/******/ var __webpack_modules__ = ({

/***/ "../../node_modules/core-js/es/number/is-integer.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/es/number/is-integer.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.number.is-integer */ "../../node_modules/core-js/modules/es.number.is-integer.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Number.isInteger;


/***/ }),

/***/ "../../node_modules/core-js/es/number/is-nan.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/es/number/is-nan.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.number.is-nan */ "../../node_modules/core-js/modules/es.number.is-nan.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Number.isNaN;


/***/ }),

/***/ "../../node_modules/core-js/es/object/assign.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/es/object/assign.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

__webpack_require__(/*! ../../modules/es.object.assign */ "../../node_modules/core-js/modules/es.object.assign.js");
var path = __webpack_require__(/*! ../../internals/path */ "../../node_modules/core-js/internals/path.js");

module.exports = path.Object.assign;


/***/ }),

/***/ "../../node_modules/core-js/internals/a-callable.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/a-callable.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var tryToString = __webpack_require__(/*! ../internals/try-to-string */ "../../node_modules/core-js/internals/try-to-string.js");

var TypeError = global.TypeError;

// `Assert: IsCallable(argument) is true`
module.exports = function (argument) {
  if (isCallable(argument)) return argument;
  throw TypeError(tryToString(argument) + ' is not a function');
};


/***/ }),

/***/ "../../node_modules/core-js/internals/an-object.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/an-object.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");

var String = global.String;
var TypeError = global.TypeError;

// `Assert: Type(argument) is Object`
module.exports = function (argument) {
  if (isObject(argument)) return argument;
  throw TypeError(String(argument) + ' is not an object');
};


/***/ }),

/***/ "../../node_modules/core-js/internals/array-includes.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/array-includes.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var toAbsoluteIndex = __webpack_require__(/*! ../internals/to-absolute-index */ "../../node_modules/core-js/internals/to-absolute-index.js");
var lengthOfArrayLike = __webpack_require__(/*! ../internals/length-of-array-like */ "../../node_modules/core-js/internals/length-of-array-like.js");

// `Array.prototype.{ indexOf, includes }` methods implementation
var createMethod = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = lengthOfArrayLike(O);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare -- NaN check
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare -- NaN check
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) {
      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

module.exports = {
  // `Array.prototype.includes` method
  // https://tc39.es/ecma262/#sec-array.prototype.includes
  includes: createMethod(true),
  // `Array.prototype.indexOf` method
  // https://tc39.es/ecma262/#sec-array.prototype.indexof
  indexOf: createMethod(false)
};


/***/ }),

/***/ "../../node_modules/core-js/internals/classof-raw.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/classof-raw.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");

var toString = uncurryThis({}.toString);
var stringSlice = uncurryThis(''.slice);

module.exports = function (it) {
  return stringSlice(toString(it), 8, -1);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/copy-constructor-properties.js":
/*!***************************************************************************!*\
  !*** ../../node_modules/core-js/internals/copy-constructor-properties.js ***!
  \***************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var ownKeys = __webpack_require__(/*! ../internals/own-keys */ "../../node_modules/core-js/internals/own-keys.js");
var getOwnPropertyDescriptorModule = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "../../node_modules/core-js/internals/object-get-own-property-descriptor.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js");

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!hasOwn(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/create-non-enumerable-property.js":
/*!******************************************************************************!*\
  !*** ../../node_modules/core-js/internals/create-non-enumerable-property.js ***!
  \******************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var definePropertyModule = __webpack_require__(/*! ../internals/object-define-property */ "../../node_modules/core-js/internals/object-define-property.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../node_modules/core-js/internals/create-property-descriptor.js");

module.exports = DESCRIPTORS ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/create-property-descriptor.js":
/*!**************************************************************************!*\
  !*** ../../node_modules/core-js/internals/create-property-descriptor.js ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};


/***/ }),

/***/ "../../node_modules/core-js/internals/descriptors.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/descriptors.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");

// Detect IE8's incomplete defineProperty implementation
module.exports = !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- required for testing
  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
});


/***/ }),

/***/ "../../node_modules/core-js/internals/document-create-element.js":
/*!***********************************************************************!*\
  !*** ../../node_modules/core-js/internals/document-create-element.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");

var document = global.document;
// typeof document.createElement is 'object' in old IE
var EXISTS = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return EXISTS ? document.createElement(it) : {};
};


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-user-agent.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-user-agent.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");

module.exports = getBuiltIn('navigator', 'userAgent') || '';


/***/ }),

/***/ "../../node_modules/core-js/internals/engine-v8-version.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/engine-v8-version.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var userAgent = __webpack_require__(/*! ../internals/engine-user-agent */ "../../node_modules/core-js/internals/engine-user-agent.js");

var process = global.process;
var Deno = global.Deno;
var versions = process && process.versions || Deno && Deno.version;
var v8 = versions && versions.v8;
var match, version;

if (v8) {
  match = v8.split('.');
  // in old Chrome, versions of V8 isn't V8 = Chrome / 10
  // but their correct versions are not interesting for us
  version = match[0] > 0 && match[0] < 4 ? 1 : +(match[0] + match[1]);
}

// BrowserFS NodeJS `process` polyfill incorrectly set `.v8` to `0.0`
// so check `userAgent` even if `.v8` exists, but 0
if (!version && userAgent) {
  match = userAgent.match(/Edge\/(\d+)/);
  if (!match || match[1] >= 74) {
    match = userAgent.match(/Chrome\/(\d+)/);
    if (match) version = +match[1];
  }
}

module.exports = version;


/***/ }),

/***/ "../../node_modules/core-js/internals/enum-bug-keys.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/enum-bug-keys.js ***!
  \*************************************************************/
/***/ ((module) => {

// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];


/***/ }),

/***/ "../../node_modules/core-js/internals/export.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/internals/export.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var getOwnPropertyDescriptor = __webpack_require__(/*! ../internals/object-get-own-property-descriptor */ "../../node_modules/core-js/internals/object-get-own-property-descriptor.js").f;
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");
var redefine = __webpack_require__(/*! ../internals/redefine */ "../../node_modules/core-js/internals/redefine.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "../../node_modules/core-js/internals/set-global.js");
var copyConstructorProperties = __webpack_require__(/*! ../internals/copy-constructor-properties */ "../../node_modules/core-js/internals/copy-constructor-properties.js");
var isForced = __webpack_require__(/*! ../internals/is-forced */ "../../node_modules/core-js/internals/is-forced.js");

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
  options.name        - the .name of the function if it does not match the key
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty == typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      createNonEnumerableProperty(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/fails.js":
/*!*****************************************************!*\
  !*** ../../node_modules/core-js/internals/fails.js ***!
  \*****************************************************/
/***/ ((module) => {

module.exports = function (exec) {
  try {
    return !!exec();
  } catch (error) {
    return true;
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/function-call.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/function-call.js ***!
  \*************************************************************/
/***/ ((module) => {

var call = Function.prototype.call;

module.exports = call.bind ? call.bind(call) : function () {
  return call.apply(call, arguments);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/function-name.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/function-name.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");

var FunctionPrototype = Function.prototype;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getDescriptor = DESCRIPTORS && Object.getOwnPropertyDescriptor;

var EXISTS = hasOwn(FunctionPrototype, 'name');
// additional protection from minified / mangled / dropped function names
var PROPER = EXISTS && (function something() { /* empty */ }).name === 'something';
var CONFIGURABLE = EXISTS && (!DESCRIPTORS || (DESCRIPTORS && getDescriptor(FunctionPrototype, 'name').configurable));

module.exports = {
  EXISTS: EXISTS,
  PROPER: PROPER,
  CONFIGURABLE: CONFIGURABLE
};


/***/ }),

/***/ "../../node_modules/core-js/internals/function-uncurry-this.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/core-js/internals/function-uncurry-this.js ***!
  \*********************************************************************/
/***/ ((module) => {

var FunctionPrototype = Function.prototype;
var bind = FunctionPrototype.bind;
var call = FunctionPrototype.call;
var callBind = bind && bind.bind(call);

module.exports = bind ? function (fn) {
  return fn && callBind(call, fn);
} : function (fn) {
  return fn && function () {
    return call.apply(fn, arguments);
  };
};


/***/ }),

/***/ "../../node_modules/core-js/internals/get-built-in.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/get-built-in.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");

var aFunction = function (argument) {
  return isCallable(argument) ? argument : undefined;
};

module.exports = function (namespace, method) {
  return arguments.length < 2 ? aFunction(global[namespace]) : global[namespace] && global[namespace][method];
};


/***/ }),

/***/ "../../node_modules/core-js/internals/get-method.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/get-method.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var aCallable = __webpack_require__(/*! ../internals/a-callable */ "../../node_modules/core-js/internals/a-callable.js");

// `GetMethod` abstract operation
// https://tc39.es/ecma262/#sec-getmethod
module.exports = function (V, P) {
  var func = V[P];
  return func == null ? undefined : aCallable(func);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/global.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/internals/global.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var check = function (it) {
  return it && it.Math == Math && it;
};

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports =
  // eslint-disable-next-line es/no-global-this -- safe
  check(typeof globalThis == 'object' && globalThis) ||
  check(typeof window == 'object' && window) ||
  // eslint-disable-next-line no-restricted-globals -- safe
  check(typeof self == 'object' && self) ||
  check(typeof __webpack_require__.g == 'object' && __webpack_require__.g) ||
  // eslint-disable-next-line no-new-func -- fallback
  (function () { return this; })() || Function('return this')();


/***/ }),

/***/ "../../node_modules/core-js/internals/has-own-property.js":
/*!****************************************************************!*\
  !*** ../../node_modules/core-js/internals/has-own-property.js ***!
  \****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "../../node_modules/core-js/internals/to-object.js");

var hasOwnProperty = uncurryThis({}.hasOwnProperty);

// `HasOwnProperty` abstract operation
// https://tc39.es/ecma262/#sec-hasownproperty
module.exports = Object.hasOwn || function hasOwn(it, key) {
  return hasOwnProperty(toObject(it), key);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/hidden-keys.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/hidden-keys.js ***!
  \***********************************************************/
/***/ ((module) => {

module.exports = {};


/***/ }),

/***/ "../../node_modules/core-js/internals/ie8-dom-define.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/ie8-dom-define.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var createElement = __webpack_require__(/*! ../internals/document-create-element */ "../../node_modules/core-js/internals/document-create-element.js");

// Thank's IE8 for his funny defineProperty
module.exports = !DESCRIPTORS && !fails(function () {
  // eslint-disable-next-line es/no-object-defineproperty -- requied for testing
  return Object.defineProperty(createElement('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});


/***/ }),

/***/ "../../node_modules/core-js/internals/indexed-object.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/indexed-object.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var classof = __webpack_require__(/*! ../internals/classof-raw */ "../../node_modules/core-js/internals/classof-raw.js");

var Object = global.Object;
var split = uncurryThis(''.split);

// fallback for non-array-like ES3 and non-enumerable old V8 strings
module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins -- safe
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split(it, '') : Object(it);
} : Object;


/***/ }),

/***/ "../../node_modules/core-js/internals/inspect-source.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/inspect-source.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "../../node_modules/core-js/internals/shared-store.js");

var functionToString = uncurryThis(Function.toString);

// this helper broken in `core-js@3.4.1-3.4.4`, so we can't use `shared` helper
if (!isCallable(store.inspectSource)) {
  store.inspectSource = function (it) {
    return functionToString(it);
  };
}

module.exports = store.inspectSource;


/***/ }),

/***/ "../../node_modules/core-js/internals/internal-state.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/internals/internal-state.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var NATIVE_WEAK_MAP = __webpack_require__(/*! ../internals/native-weak-map */ "../../node_modules/core-js/internals/native-weak-map.js");
var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var shared = __webpack_require__(/*! ../internals/shared-store */ "../../node_modules/core-js/internals/shared-store.js");
var sharedKey = __webpack_require__(/*! ../internals/shared-key */ "../../node_modules/core-js/internals/shared-key.js");
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../node_modules/core-js/internals/hidden-keys.js");

var OBJECT_ALREADY_INITIALIZED = 'Object already initialized';
var TypeError = global.TypeError;
var WeakMap = global.WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP || shared.state) {
  var store = shared.state || (shared.state = new WeakMap());
  var wmget = uncurryThis(store.get);
  var wmhas = uncurryThis(store.has);
  var wmset = uncurryThis(store.set);
  set = function (it, metadata) {
    if (wmhas(store, it)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    wmset(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget(store, it) || {};
  };
  has = function (it) {
    return wmhas(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    if (hasOwn(it, STATE)) throw new TypeError(OBJECT_ALREADY_INITIALIZED);
    metadata.facade = it;
    createNonEnumerableProperty(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return hasOwn(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return hasOwn(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-callable.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-callable.js ***!
  \***********************************************************/
/***/ ((module) => {

// `IsCallable` abstract operation
// https://tc39.es/ecma262/#sec-iscallable
module.exports = function (argument) {
  return typeof argument == 'function';
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-forced.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-forced.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");

var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : isCallable(detection) ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;


/***/ }),

/***/ "../../node_modules/core-js/internals/is-integral-number.js":
/*!******************************************************************!*\
  !*** ../../node_modules/core-js/internals/is-integral-number.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");

var floor = Math.floor;

// `IsIntegralNumber` abstract operation
// https://tc39.es/ecma262/#sec-isintegralnumber
// eslint-disable-next-line es/no-number-isinteger -- safe
module.exports = Number.isInteger || function isInteger(it) {
  return !isObject(it) && isFinite(it) && floor(it) === it;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-object.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-object.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");

module.exports = function (it) {
  return typeof it == 'object' ? it !== null : isCallable(it);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/is-pure.js":
/*!*******************************************************!*\
  !*** ../../node_modules/core-js/internals/is-pure.js ***!
  \*******************************************************/
/***/ ((module) => {

module.exports = false;


/***/ }),

/***/ "../../node_modules/core-js/internals/is-symbol.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/is-symbol.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var isPrototypeOf = __webpack_require__(/*! ../internals/object-is-prototype-of */ "../../node_modules/core-js/internals/object-is-prototype-of.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "../../node_modules/core-js/internals/use-symbol-as-uid.js");

var Object = global.Object;

module.exports = USE_SYMBOL_AS_UID ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  var $Symbol = getBuiltIn('Symbol');
  return isCallable($Symbol) && isPrototypeOf($Symbol.prototype, Object(it));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/length-of-array-like.js":
/*!********************************************************************!*\
  !*** ../../node_modules/core-js/internals/length-of-array-like.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toLength = __webpack_require__(/*! ../internals/to-length */ "../../node_modules/core-js/internals/to-length.js");

// `LengthOfArrayLike` abstract operation
// https://tc39.es/ecma262/#sec-lengthofarraylike
module.exports = function (obj) {
  return toLength(obj.length);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/native-symbol.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/native-symbol.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var V8_VERSION = __webpack_require__(/*! ../internals/engine-v8-version */ "../../node_modules/core-js/internals/engine-v8-version.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");

// eslint-disable-next-line es/no-object-getownpropertysymbols -- required for testing
module.exports = !!Object.getOwnPropertySymbols && !fails(function () {
  var symbol = Symbol();
  // Chrome 38 Symbol has incorrect toString conversion
  // `get-own-property-symbols` polyfill symbols converted to object are not Symbol instances
  return !String(symbol) || !(Object(symbol) instanceof Symbol) ||
    // Chrome 38-40 symbols are not inherited from DOM collections prototypes to instances
    !Symbol.sham && V8_VERSION && V8_VERSION < 41;
});


/***/ }),

/***/ "../../node_modules/core-js/internals/native-weak-map.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/native-weak-map.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "../../node_modules/core-js/internals/inspect-source.js");

var WeakMap = global.WeakMap;

module.exports = isCallable(WeakMap) && /native code/.test(inspectSource(WeakMap));


/***/ }),

/***/ "../../node_modules/core-js/internals/object-assign.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-assign.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {


var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var fails = __webpack_require__(/*! ../internals/fails */ "../../node_modules/core-js/internals/fails.js");
var objectKeys = __webpack_require__(/*! ../internals/object-keys */ "../../node_modules/core-js/internals/object-keys.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "../../node_modules/core-js/internals/object-get-own-property-symbols.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "../../node_modules/core-js/internals/object-property-is-enumerable.js");
var toObject = __webpack_require__(/*! ../internals/to-object */ "../../node_modules/core-js/internals/to-object.js");
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "../../node_modules/core-js/internals/indexed-object.js");

// eslint-disable-next-line es/no-object-assign -- safe
var $assign = Object.assign;
// eslint-disable-next-line es/no-object-defineproperty -- required for testing
var defineProperty = Object.defineProperty;
var concat = uncurryThis([].concat);

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
module.exports = !$assign || fails(function () {
  // should have correct order of operations (Edge bug)
  if (DESCRIPTORS && $assign({ b: 1 }, $assign(defineProperty({}, 'a', {
    enumerable: true,
    get: function () {
      defineProperty(this, 'b', {
        value: 3,
        enumerable: false
      });
    }
  }), { b: 2 })).b !== 1) return true;
  // should work with symbols and should have deterministic property order (V8 bug)
  var A = {};
  var B = {};
  // eslint-disable-next-line es/no-symbol -- safe
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return $assign({}, A)[symbol] != 7 || objectKeys($assign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars -- required for `.length`
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? concat(objectKeys(S), getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) {
      key = keys[j++];
      if (!DESCRIPTORS || call(propertyIsEnumerable, S, key)) T[key] = S[key];
    }
  } return T;
} : $assign;


/***/ }),

/***/ "../../node_modules/core-js/internals/object-define-property.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-define-property.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "../../node_modules/core-js/internals/ie8-dom-define.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "../../node_modules/core-js/internals/to-property-key.js");

var TypeError = global.TypeError;
// eslint-disable-next-line es/no-object-defineproperty -- safe
var $defineProperty = Object.defineProperty;

// `Object.defineProperty` method
// https://tc39.es/ecma262/#sec-object.defineproperty
exports.f = DESCRIPTORS ? $defineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPropertyKey(P);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return $defineProperty(O, P, Attributes);
  } catch (error) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-get-own-property-descriptor.js":
/*!**********************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-get-own-property-descriptor.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var DESCRIPTORS = __webpack_require__(/*! ../internals/descriptors */ "../../node_modules/core-js/internals/descriptors.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var propertyIsEnumerableModule = __webpack_require__(/*! ../internals/object-property-is-enumerable */ "../../node_modules/core-js/internals/object-property-is-enumerable.js");
var createPropertyDescriptor = __webpack_require__(/*! ../internals/create-property-descriptor */ "../../node_modules/core-js/internals/create-property-descriptor.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var toPropertyKey = __webpack_require__(/*! ../internals/to-property-key */ "../../node_modules/core-js/internals/to-property-key.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var IE8_DOM_DEFINE = __webpack_require__(/*! ../internals/ie8-dom-define */ "../../node_modules/core-js/internals/ie8-dom-define.js");

// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var $getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// `Object.getOwnPropertyDescriptor` method
// https://tc39.es/ecma262/#sec-object.getownpropertydescriptor
exports.f = DESCRIPTORS ? $getOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPropertyKey(P);
  if (IE8_DOM_DEFINE) try {
    return $getOwnPropertyDescriptor(O, P);
  } catch (error) { /* empty */ }
  if (hasOwn(O, P)) return createPropertyDescriptor(!call(propertyIsEnumerableModule.f, O, P), O[P]);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-get-own-property-names.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-get-own-property-names.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "../../node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "../../node_modules/core-js/internals/enum-bug-keys.js");

var hiddenKeys = enumBugKeys.concat('length', 'prototype');

// `Object.getOwnPropertyNames` method
// https://tc39.es/ecma262/#sec-object.getownpropertynames
// eslint-disable-next-line es/no-object-getownpropertynames -- safe
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-get-own-property-symbols.js":
/*!*******************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-get-own-property-symbols.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

// eslint-disable-next-line es/no-object-getownpropertysymbols -- safe
exports.f = Object.getOwnPropertySymbols;


/***/ }),

/***/ "../../node_modules/core-js/internals/object-is-prototype-of.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-is-prototype-of.js ***!
  \**********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");

module.exports = uncurryThis({}.isPrototypeOf);


/***/ }),

/***/ "../../node_modules/core-js/internals/object-keys-internal.js":
/*!********************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-keys-internal.js ***!
  \********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var toIndexedObject = __webpack_require__(/*! ../internals/to-indexed-object */ "../../node_modules/core-js/internals/to-indexed-object.js");
var indexOf = __webpack_require__(/*! ../internals/array-includes */ "../../node_modules/core-js/internals/array-includes.js").indexOf;
var hiddenKeys = __webpack_require__(/*! ../internals/hidden-keys */ "../../node_modules/core-js/internals/hidden-keys.js");

var push = uncurryThis([].push);

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !hasOwn(hiddenKeys, key) && hasOwn(O, key) && push(result, key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (hasOwn(O, key = names[i++])) {
    ~indexOf(result, key) || push(result, key);
  }
  return result;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-keys.js":
/*!***********************************************************!*\
  !*** ../../node_modules/core-js/internals/object-keys.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var internalObjectKeys = __webpack_require__(/*! ../internals/object-keys-internal */ "../../node_modules/core-js/internals/object-keys-internal.js");
var enumBugKeys = __webpack_require__(/*! ../internals/enum-bug-keys */ "../../node_modules/core-js/internals/enum-bug-keys.js");

// `Object.keys` method
// https://tc39.es/ecma262/#sec-object.keys
// eslint-disable-next-line es/no-object-keys -- safe
module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/object-property-is-enumerable.js":
/*!*****************************************************************************!*\
  !*** ../../node_modules/core-js/internals/object-property-is-enumerable.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


var $propertyIsEnumerable = {}.propertyIsEnumerable;
// eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = getOwnPropertyDescriptor && !$propertyIsEnumerable.call({ 1: 2 }, 1);

// `Object.prototype.propertyIsEnumerable` method implementation
// https://tc39.es/ecma262/#sec-object.prototype.propertyisenumerable
exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = getOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : $propertyIsEnumerable;


/***/ }),

/***/ "../../node_modules/core-js/internals/ordinary-to-primitive.js":
/*!*********************************************************************!*\
  !*** ../../node_modules/core-js/internals/ordinary-to-primitive.js ***!
  \*********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");

var TypeError = global.TypeError;

// `OrdinaryToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-ordinarytoprimitive
module.exports = function (input, pref) {
  var fn, val;
  if (pref === 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  if (isCallable(fn = input.valueOf) && !isObject(val = call(fn, input))) return val;
  if (pref !== 'string' && isCallable(fn = input.toString) && !isObject(val = call(fn, input))) return val;
  throw TypeError("Can't convert object to primitive value");
};


/***/ }),

/***/ "../../node_modules/core-js/internals/own-keys.js":
/*!********************************************************!*\
  !*** ../../node_modules/core-js/internals/own-keys.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var getBuiltIn = __webpack_require__(/*! ../internals/get-built-in */ "../../node_modules/core-js/internals/get-built-in.js");
var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");
var getOwnPropertyNamesModule = __webpack_require__(/*! ../internals/object-get-own-property-names */ "../../node_modules/core-js/internals/object-get-own-property-names.js");
var getOwnPropertySymbolsModule = __webpack_require__(/*! ../internals/object-get-own-property-symbols */ "../../node_modules/core-js/internals/object-get-own-property-symbols.js");
var anObject = __webpack_require__(/*! ../internals/an-object */ "../../node_modules/core-js/internals/an-object.js");

var concat = uncurryThis([].concat);

// all object keys, includes non-enumerable and symbols
module.exports = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? concat(keys, getOwnPropertySymbols(it)) : keys;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/path.js":
/*!****************************************************!*\
  !*** ../../node_modules/core-js/internals/path.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

module.exports = global;


/***/ }),

/***/ "../../node_modules/core-js/internals/redefine.js":
/*!********************************************************!*\
  !*** ../../node_modules/core-js/internals/redefine.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var isCallable = __webpack_require__(/*! ../internals/is-callable */ "../../node_modules/core-js/internals/is-callable.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var createNonEnumerableProperty = __webpack_require__(/*! ../internals/create-non-enumerable-property */ "../../node_modules/core-js/internals/create-non-enumerable-property.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "../../node_modules/core-js/internals/set-global.js");
var inspectSource = __webpack_require__(/*! ../internals/inspect-source */ "../../node_modules/core-js/internals/inspect-source.js");
var InternalStateModule = __webpack_require__(/*! ../internals/internal-state */ "../../node_modules/core-js/internals/internal-state.js");
var CONFIGURABLE_FUNCTION_NAME = __webpack_require__(/*! ../internals/function-name */ "../../node_modules/core-js/internals/function-name.js").CONFIGURABLE;

var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(String).split('String');

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  var name = options && options.name !== undefined ? options.name : key;
  var state;
  if (isCallable(value)) {
    if (String(name).slice(0, 7) === 'Symbol(') {
      name = '[' + String(name).replace(/^Symbol\(([^)]*)\)/, '$1') + ']';
    }
    if (!hasOwn(value, 'name') || (CONFIGURABLE_FUNCTION_NAME && value.name !== name)) {
      createNonEnumerableProperty(value, 'name', name);
    }
    state = enforceInternalState(value);
    if (!state.source) {
      state.source = TEMPLATE.join(typeof name == 'string' ? name : '');
    }
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else createNonEnumerableProperty(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return isCallable(this) && getInternalState(this).source || inspectSource(this);
});


/***/ }),

/***/ "../../node_modules/core-js/internals/require-object-coercible.js":
/*!************************************************************************!*\
  !*** ../../node_modules/core-js/internals/require-object-coercible.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

var TypeError = global.TypeError;

// `RequireObjectCoercible` abstract operation
// https://tc39.es/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/set-global.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/set-global.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

// eslint-disable-next-line es/no-object-defineproperty -- safe
var defineProperty = Object.defineProperty;

module.exports = function (key, value) {
  try {
    defineProperty(global, key, { value: value, configurable: true, writable: true });
  } catch (error) {
    global[key] = value;
  } return value;
};


/***/ }),

/***/ "../../node_modules/core-js/internals/shared-key.js":
/*!**********************************************************!*\
  !*** ../../node_modules/core-js/internals/shared-key.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var shared = __webpack_require__(/*! ../internals/shared */ "../../node_modules/core-js/internals/shared.js");
var uid = __webpack_require__(/*! ../internals/uid */ "../../node_modules/core-js/internals/uid.js");

var keys = shared('keys');

module.exports = function (key) {
  return keys[key] || (keys[key] = uid(key));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/shared-store.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/shared-store.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var setGlobal = __webpack_require__(/*! ../internals/set-global */ "../../node_modules/core-js/internals/set-global.js");

var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

module.exports = store;


/***/ }),

/***/ "../../node_modules/core-js/internals/shared.js":
/*!******************************************************!*\
  !*** ../../node_modules/core-js/internals/shared.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var IS_PURE = __webpack_require__(/*! ../internals/is-pure */ "../../node_modules/core-js/internals/is-pure.js");
var store = __webpack_require__(/*! ../internals/shared-store */ "../../node_modules/core-js/internals/shared-store.js");

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.19.0',
  mode: IS_PURE ? 'pure' : 'global',
  copyright: '© 2021 Denis Pushkarev (zloirock.ru)'
});


/***/ }),

/***/ "../../node_modules/core-js/internals/to-absolute-index.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-absolute-index.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "../../node_modules/core-js/internals/to-integer-or-infinity.js");

var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
module.exports = function (index, length) {
  var integer = toIntegerOrInfinity(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-indexed-object.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-indexed-object.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

// toObject with fallback for non-array-like ES3 strings
var IndexedObject = __webpack_require__(/*! ../internals/indexed-object */ "../../node_modules/core-js/internals/indexed-object.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "../../node_modules/core-js/internals/require-object-coercible.js");

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-integer-or-infinity.js":
/*!**********************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-integer-or-infinity.js ***!
  \**********************************************************************/
/***/ ((module) => {

var ceil = Math.ceil;
var floor = Math.floor;

// `ToIntegerOrInfinity` abstract operation
// https://tc39.es/ecma262/#sec-tointegerorinfinity
module.exports = function (argument) {
  var number = +argument;
  // eslint-disable-next-line no-self-compare -- safe
  return number !== number || number === 0 ? 0 : (number > 0 ? floor : ceil)(number);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-length.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/to-length.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toIntegerOrInfinity = __webpack_require__(/*! ../internals/to-integer-or-infinity */ "../../node_modules/core-js/internals/to-integer-or-infinity.js");

var min = Math.min;

// `ToLength` abstract operation
// https://tc39.es/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toIntegerOrInfinity(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-object.js":
/*!*********************************************************!*\
  !*** ../../node_modules/core-js/internals/to-object.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var requireObjectCoercible = __webpack_require__(/*! ../internals/require-object-coercible */ "../../node_modules/core-js/internals/require-object-coercible.js");

var Object = global.Object;

// `ToObject` abstract operation
// https://tc39.es/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-primitive.js":
/*!************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-primitive.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var call = __webpack_require__(/*! ../internals/function-call */ "../../node_modules/core-js/internals/function-call.js");
var isObject = __webpack_require__(/*! ../internals/is-object */ "../../node_modules/core-js/internals/is-object.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "../../node_modules/core-js/internals/is-symbol.js");
var getMethod = __webpack_require__(/*! ../internals/get-method */ "../../node_modules/core-js/internals/get-method.js");
var ordinaryToPrimitive = __webpack_require__(/*! ../internals/ordinary-to-primitive */ "../../node_modules/core-js/internals/ordinary-to-primitive.js");
var wellKnownSymbol = __webpack_require__(/*! ../internals/well-known-symbol */ "../../node_modules/core-js/internals/well-known-symbol.js");

var TypeError = global.TypeError;
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');

// `ToPrimitive` abstract operation
// https://tc39.es/ecma262/#sec-toprimitive
module.exports = function (input, pref) {
  if (!isObject(input) || isSymbol(input)) return input;
  var exoticToPrim = getMethod(input, TO_PRIMITIVE);
  var result;
  if (exoticToPrim) {
    if (pref === undefined) pref = 'default';
    result = call(exoticToPrim, input, pref);
    if (!isObject(result) || isSymbol(result)) return result;
    throw TypeError("Can't convert object to primitive value");
  }
  if (pref === undefined) pref = 'number';
  return ordinaryToPrimitive(input, pref);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/to-property-key.js":
/*!***************************************************************!*\
  !*** ../../node_modules/core-js/internals/to-property-key.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var toPrimitive = __webpack_require__(/*! ../internals/to-primitive */ "../../node_modules/core-js/internals/to-primitive.js");
var isSymbol = __webpack_require__(/*! ../internals/is-symbol */ "../../node_modules/core-js/internals/is-symbol.js");

// `ToPropertyKey` abstract operation
// https://tc39.es/ecma262/#sec-topropertykey
module.exports = function (argument) {
  var key = toPrimitive(argument, 'string');
  return isSymbol(key) ? key : key + '';
};


/***/ }),

/***/ "../../node_modules/core-js/internals/try-to-string.js":
/*!*************************************************************!*\
  !*** ../../node_modules/core-js/internals/try-to-string.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");

var String = global.String;

module.exports = function (argument) {
  try {
    return String(argument);
  } catch (error) {
    return 'Object';
  }
};


/***/ }),

/***/ "../../node_modules/core-js/internals/uid.js":
/*!***************************************************!*\
  !*** ../../node_modules/core-js/internals/uid.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var uncurryThis = __webpack_require__(/*! ../internals/function-uncurry-this */ "../../node_modules/core-js/internals/function-uncurry-this.js");

var id = 0;
var postfix = Math.random();
var toString = uncurryThis(1.0.toString);

module.exports = function (key) {
  return 'Symbol(' + (key === undefined ? '' : key) + ')_' + toString(++id + postfix, 36);
};


/***/ }),

/***/ "../../node_modules/core-js/internals/use-symbol-as-uid.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/use-symbol-as-uid.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

/* eslint-disable es/no-symbol -- required for testing */
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "../../node_modules/core-js/internals/native-symbol.js");

module.exports = NATIVE_SYMBOL
  && !Symbol.sham
  && typeof Symbol.iterator == 'symbol';


/***/ }),

/***/ "../../node_modules/core-js/internals/well-known-symbol.js":
/*!*****************************************************************!*\
  !*** ../../node_modules/core-js/internals/well-known-symbol.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var global = __webpack_require__(/*! ../internals/global */ "../../node_modules/core-js/internals/global.js");
var shared = __webpack_require__(/*! ../internals/shared */ "../../node_modules/core-js/internals/shared.js");
var hasOwn = __webpack_require__(/*! ../internals/has-own-property */ "../../node_modules/core-js/internals/has-own-property.js");
var uid = __webpack_require__(/*! ../internals/uid */ "../../node_modules/core-js/internals/uid.js");
var NATIVE_SYMBOL = __webpack_require__(/*! ../internals/native-symbol */ "../../node_modules/core-js/internals/native-symbol.js");
var USE_SYMBOL_AS_UID = __webpack_require__(/*! ../internals/use-symbol-as-uid */ "../../node_modules/core-js/internals/use-symbol-as-uid.js");

var WellKnownSymbolsStore = shared('wks');
var Symbol = global.Symbol;
var symbolFor = Symbol && Symbol['for'];
var createWellKnownSymbol = USE_SYMBOL_AS_UID ? Symbol : Symbol && Symbol.withoutSetter || uid;

module.exports = function (name) {
  if (!hasOwn(WellKnownSymbolsStore, name) || !(NATIVE_SYMBOL || typeof WellKnownSymbolsStore[name] == 'string')) {
    var description = 'Symbol.' + name;
    if (NATIVE_SYMBOL && hasOwn(Symbol, name)) {
      WellKnownSymbolsStore[name] = Symbol[name];
    } else if (USE_SYMBOL_AS_UID && symbolFor) {
      WellKnownSymbolsStore[name] = symbolFor(description);
    } else {
      WellKnownSymbolsStore[name] = createWellKnownSymbol(description);
    }
  } return WellKnownSymbolsStore[name];
};


/***/ }),

/***/ "../../node_modules/core-js/modules/es.number.is-integer.js":
/*!******************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.number.is-integer.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var isIntegralNumber = __webpack_require__(/*! ../internals/is-integral-number */ "../../node_modules/core-js/internals/is-integral-number.js");

// `Number.isInteger` method
// https://tc39.es/ecma262/#sec-number.isinteger
$({ target: 'Number', stat: true }, {
  isInteger: isIntegralNumber
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.number.is-nan.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.number.is-nan.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");

// `Number.isNaN` method
// https://tc39.es/ecma262/#sec-number.isnan
$({ target: 'Number', stat: true }, {
  isNaN: function isNaN(number) {
    // eslint-disable-next-line no-self-compare -- NaN check
    return number != number;
  }
});


/***/ }),

/***/ "../../node_modules/core-js/modules/es.object.assign.js":
/*!**************************************************************!*\
  !*** ../../node_modules/core-js/modules/es.object.assign.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

var $ = __webpack_require__(/*! ../internals/export */ "../../node_modules/core-js/internals/export.js");
var assign = __webpack_require__(/*! ../internals/object-assign */ "../../node_modules/core-js/internals/object-assign.js");

// `Object.assign` method
// https://tc39.es/ecma262/#sec-object.assign
// eslint-disable-next-line es/no-object-assign -- required for testing
$({ target: 'Object', stat: true, forced: Object.assign !== assign }, {
  assign: assign
});


/***/ }),

/***/ "../../node_modules/guid/guid.js":
/*!***************************************!*\
  !*** ../../node_modules/guid/guid.js ***!
  \***************************************/
/***/ ((module) => {

(function () {
  var validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i");

  function gen(count) {
    var out = "";
    for (var i=0; i<count; i++) {
      out += (((1+Math.random())*0x10000)|0).toString(16).substring(1);
    }
    return out;
  }

  function Guid(guid) {
    if (!guid) throw new TypeError("Invalid argument; `value` has no value.");

    this.value = Guid.EMPTY;

    if (guid && guid instanceof Guid) {
      this.value = guid.toString();

    } else if (guid && Object.prototype.toString.call(guid) === "[object String]" && Guid.isGuid(guid)) {
      this.value = guid;
    }

    this.equals = function(other) {
      // Comparing string `value` against provided `guid` will auto-call
      // toString on `guid` for comparison
      return Guid.isGuid(other) && this.value == other;
    };

    this.isEmpty = function() {
      return this.value === Guid.EMPTY;
    };

    this.toString = function() {
      return this.value;
    };

    this.toJSON = function() {
      return this.value;
    };
  };

  Guid.EMPTY = "00000000-0000-0000-0000-000000000000";

  Guid.isGuid = function(value) {
    return value && (value instanceof Guid || validator.test(value.toString()));
  };

  Guid.create = function() {
    return new Guid([gen(2), gen(1), gen(1), gen(1), gen(3)].join("-"));
  };

  Guid.raw = function() {
    return [gen(2), gen(1), gen(1), gen(1), gen(3)].join("-");
  };

  if( true && module.exports) {
    module.exports = Guid;
  }
  else if (typeof window != 'undefined') {
    window.Guid = Guid;
  }
})();


/***/ }),

/***/ "../../node_modules/uuid/index.js":
/*!****************************************!*\
  !*** ../../node_modules/uuid/index.js ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var v1 = __webpack_require__(/*! ./v1 */ "../../node_modules/uuid/v1.js");
var v4 = __webpack_require__(/*! ./v4 */ "../../node_modules/uuid/v4.js");

var uuid = v4;
uuid.v1 = v1;
uuid.v4 = v4;

module.exports = uuid;


/***/ }),

/***/ "../../node_modules/uuid/lib/bytesToUuid.js":
/*!**************************************************!*\
  !*** ../../node_modules/uuid/lib/bytesToUuid.js ***!
  \**************************************************/
/***/ ((module) => {

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
var byteToHex = [];
for (var i = 0; i < 256; ++i) {
  byteToHex[i] = (i + 0x100).toString(16).substr(1);
}

function bytesToUuid(buf, offset) {
  var i = offset || 0;
  var bth = byteToHex;
  // join used to fix memory issue caused by concatenation: https://bugs.chromium.org/p/v8/issues/detail?id=3175#c4
  return ([
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]], '-',
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]],
    bth[buf[i++]], bth[buf[i++]]
  ]).join('');
}

module.exports = bytesToUuid;


/***/ }),

/***/ "../../node_modules/uuid/lib/rng-browser.js":
/*!**************************************************!*\
  !*** ../../node_modules/uuid/lib/rng-browser.js ***!
  \**************************************************/
/***/ ((module) => {

// Unique ID creation requires a high quality random # generator.  In the
// browser this is a little complicated due to unknown quality of Math.random()
// and inconsistent support for the `crypto` API.  We do the best we can via
// feature-detection

// getRandomValues needs to be invoked in a context where "this" is a Crypto
// implementation. Also, find the complete implementation of crypto on IE11.
var getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto)) ||
                      (typeof(msCrypto) != 'undefined' && typeof window.msCrypto.getRandomValues == 'function' && msCrypto.getRandomValues.bind(msCrypto));

if (getRandomValues) {
  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto
  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef

  module.exports = function whatwgRNG() {
    getRandomValues(rnds8);
    return rnds8;
  };
} else {
  // Math.random()-based (RNG)
  //
  // If all else fails, use Math.random().  It's fast, but is of unspecified
  // quality.
  var rnds = new Array(16);

  module.exports = function mathRNG() {
    for (var i = 0, r; i < 16; i++) {
      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;
      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
    }

    return rnds;
  };
}


/***/ }),

/***/ "../../node_modules/uuid/v1.js":
/*!*************************************!*\
  !*** ../../node_modules/uuid/v1.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rng = __webpack_require__(/*! ./lib/rng */ "../../node_modules/uuid/lib/rng-browser.js");
var bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ "../../node_modules/uuid/lib/bytesToUuid.js");

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html

var _nodeId;
var _clockseq;

// Previous uuid creation time
var _lastMSecs = 0;
var _lastNSecs = 0;

// See https://github.com/uuidjs/uuid for API details
function v1(options, buf, offset) {
  var i = buf && offset || 0;
  var b = buf || [];

  options = options || {};
  var node = options.node || _nodeId;
  var clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq;

  // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189
  if (node == null || clockseq == null) {
    var seedBytes = rng();
    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [
        seedBytes[0] | 0x01,
        seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]
      ];
    }
    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  }

  // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.
  var msecs = options.msecs !== undefined ? options.msecs : new Date().getTime();

  // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock
  var nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1;

  // Time since last uuid creation (in msecs)
  var dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs)/10000;

  // Per 4.2.1.2, Bump clockseq on clock regression
  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  }

  // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  }

  // Per 4.2.1.2 Throw error if too many uuids are requested
  if (nsecs >= 10000) {
    throw new Error('uuid.v1(): Can\'t create more than 10M uuids/sec');
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;

  // Per 4.1.4 - Convert from unix epoch to Gregorian epoch
  msecs += 12219292800000;

  // `time_low`
  var tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff;

  // `time_mid`
  var tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff;

  // `time_high_and_version`
  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version
  b[i++] = tmh >>> 16 & 0xff;

  // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)
  b[i++] = clockseq >>> 8 | 0x80;

  // `clock_seq_low`
  b[i++] = clockseq & 0xff;

  // `node`
  for (var n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf ? buf : bytesToUuid(b);
}

module.exports = v1;


/***/ }),

/***/ "../../node_modules/uuid/v4.js":
/*!*************************************!*\
  !*** ../../node_modules/uuid/v4.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var rng = __webpack_require__(/*! ./lib/rng */ "../../node_modules/uuid/lib/rng-browser.js");
var bytesToUuid = __webpack_require__(/*! ./lib/bytesToUuid */ "../../node_modules/uuid/lib/bytesToUuid.js");

function v4(options, buf, offset) {
  var i = buf && offset || 0;

  if (typeof(options) == 'string') {
    buf = options === 'binary' ? new Array(16) : null;
    options = null;
  }
  options = options || {};

  var rnds = options.random || (options.rng || rng)();

  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
  rnds[6] = (rnds[6] & 0x0f) | 0x40;
  rnds[8] = (rnds[8] & 0x3f) | 0x80;

  // Copy bytes to buffer, if provided
  if (buf) {
    for (var ii = 0; ii < 16; ++ii) {
      buf[i + ii] = rnds[ii];
    }
  }

  return buf || bytesToUuid(rnds);
}

module.exports = v4;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Components/TableauAskData.js":
/*!***********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Components/TableauAskData.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const EmbeddingAskDataUrl_1 = __webpack_require__(/*! ../Models/EmbeddingAskDataUrl */ "./lib/src/EmbeddingApi/Models/EmbeddingAskDataUrl.js");
const WebComponentManager_1 = __webpack_require__(/*! ../WebComponentManager */ "./lib/src/EmbeddingApi/WebComponentManager.js");
const TableauWebComponent_1 = __webpack_require__(/*! ./TableauWebComponent */ "./lib/src/EmbeddingApi/Components/TableauWebComponent.js");
/**
 * Represents the entry point for the `<tableau-ask-data>` custom HTML element.
 * This class is specifically focused on transferring information between the HTML and
 * the AskData, so it should have as little logic as possible.
 */
class TableauAskData extends TableauWebComponent_1.TableauWebComponent {
    constructor() {
        super();
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the ask-data webcomponent
        return [...super.observedAttributes, ...Object.values(api_external_contract_js_1.AskDataAttributes)];
    }
    updateRenderingIfInitialized(src) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._initialized) {
                return;
            }
            WebComponentManager_1.WebComponentManager.unregisterWebComponent(this._embeddingIdCounter);
            return this.updateRendering(src);
        });
    }
    updateRendering(src) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this._initialized = true;
                if (!src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                const authResponse = yield this.auth();
                if (authResponse === TableauWebComponent_1.TableauAuthResponse.Failure) {
                    console.debug('Authentication failed.');
                    return;
                }
                // Nothing to render if the user hasn't provided a src
                if (!this.src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                if (!this.iframe) {
                    console.debug('No iframe available to update the src.');
                    return;
                }
                const customParams = this.readCustomParamsFromChildren();
                this._embeddingIdCounter = WebComponentManager_1.WebComponentManager.registerWebComponent(this);
                const askDataUrl = EmbeddingAskDataUrl_1.createAskDataUrl(this.src, this.constructOptions(), this._embeddingIdCounter, customParams).toString();
                this.iframe.src = askDataUrl;
                this.raiseIframeSrcUpdatedNotification();
                return;
            }
            catch (e) {
                console.warn(e);
            }
        });
    }
    constructOptions() {
        const options = {
            origin: this.origin,
            showEmbed: this.showEmbed,
            showPin: this.showPin,
            showSave: this.showSave,
            showShare: this.showShare,
            token: this.token,
            iframeAuth: this.iframeAuth,
            debug: this.debug,
        };
        return options;
    }
    get origin() {
        const originValue = this.getAttribute(api_external_contract_js_1.AskDataAttributes.Origin);
        return originValue ? originValue : undefined;
    }
    set origin(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.Origin, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.Origin);
        }
    }
    get showEmbed() {
        return this.hasAttribute(api_external_contract_js_1.AskDataAttributes.ShowEmbed);
    }
    set showEmbed(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.ShowEmbed, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.ShowEmbed);
        }
    }
    get showPin() {
        return this.hasAttribute(api_external_contract_js_1.AskDataAttributes.ShowPin);
    }
    set showPin(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.ShowPin, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.ShowPin);
        }
    }
    get showShare() {
        return this.hasAttribute(api_external_contract_js_1.AskDataAttributes.ShowShare);
    }
    set showShare(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.ShowShare, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.ShowShare);
        }
    }
    get showSave() {
        return this.hasAttribute(api_external_contract_js_1.AskDataAttributes.ShowSave);
    }
    set showSave(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.AskDataAttributes.ShowSave, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.AskDataAttributes.ShowSave);
        }
    }
}
exports.TableauAskData = TableauAskData;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Components/TableauAuthoringViz.js":
/*!****************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Components/TableauAuthoringViz.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
const EmbeddingVizUrl_1 = __webpack_require__(/*! ../Models/EmbeddingVizUrl */ "./lib/src/EmbeddingApi/Models/EmbeddingVizUrl.js");
const TableauVizBase_1 = __webpack_require__(/*! ./TableauVizBase */ "./lib/src/EmbeddingApi/Components/TableauVizBase.js");
/**
 * Represents the entry point for the `<tableau-authoring-viz>` custom HTML element.
 * This class is specifically focused on transferring information between the HTML and
 * the Viz, so it should have as little logic as possible.  Most of the logic should be
 * in {@link VizImpl}.
 */
class TableauAuthoringViz extends TableauVizBase_1.TableauVizBase {
    // ========================================== Begin Custom Element definition ==========================================
    //#region Reactions
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the viz
        return [...super.observedAttributes, ...Object.values(Contract.VizAuthoringAttributes)];
    }
    //#endregion Reaction
    getAttributeEvents() {
        return [
            [Contract.VizSharedAttributes.OnEditInDesktopButtonClicked, Contract.EmbeddingTableauEventType.EditInDesktopButtonClicked],
            [Contract.VizSharedAttributes.OnFirstInteractive, Contract.EmbeddingTableauEventType.FirstInteractive],
            [Contract.VizSharedAttributes.OnFirstVizSizeKnown, Contract.EmbeddingTableauEventType.FirstVizSizeKnown],
            [Contract.VizAuthoringAttributes.OnWorkbookPublished, Contract.EmbeddingTableauEventType.WorkbookPublished],
            [Contract.VizAuthoringAttributes.OnWorkbookPublishedAs, Contract.EmbeddingTableauEventType.WorkbookPublishedAs],
            [Contract.VizAuthoringAttributes.OnWorkbookReadyToClose, Contract.EmbeddingTableauEventType.WorkbookReadyToClose],
        ];
    }
    createFrameUrlWithParams() {
        const vizqlOptions = this.constructVizqlOptions();
        const customParams = this.readCustomParamsFromChildren();
        return EmbeddingVizUrl_1.createVizUrl(this.src, EmbeddingVizUrl_1.EmbeddingUrlMode.Authoring, vizqlOptions, this._embeddingIdCounter, [] /* filters */, [] /* params */, customParams);
    }
    constructVizqlOptions() {
        const options = {
            token: this.token,
            touchOptimize: this.touchOptimize,
            hideEditInDesktopButton: this.hideEditInDesktopButton,
            suppressDefaultEditBehavior: this.suppressDefaultEditBehavior,
            hideCloseButton: this.hideCloseButton,
            debug: this.debug,
            iframeAuth: this.iframeAuth,
        };
        return options;
    }
    getRegisteredEvents() {
        return super.getRegisteredEvents().concat([
            [
                api_internal_contract_js_1.NotificationId.WorkbookPublished,
                () => true,
                () => this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.WorkbookPublished)),
            ],
            [api_internal_contract_js_1.NotificationId.WorkbookPublishedAs, () => true, (model) => this.handleWorkbookPublishedAsEvent(model)],
            [
                api_internal_contract_js_1.NotificationId.WorkbookReadyToClose,
                () => true,
                () => this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.WorkbookReadyToClose)),
            ],
        ]);
    }
    handleWorkbookPublishedAsEvent(model) {
        const workbookPublishedAsEvent = {
            newUrl: model.newUrl,
        };
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.WorkbookPublishedAs, { detail: workbookPublishedAsEvent }));
    }
    //#region Simple Getters / Setters
    set hideCloseButton(v) {
        if (v) {
            this.setAttribute(Contract.VizAuthoringAttributes.HideCloseButton, '');
        }
        else {
            this.removeAttribute(Contract.VizAuthoringAttributes.HideCloseButton);
        }
    }
    get hideCloseButton() {
        return this.hasAttribute(Contract.VizAuthoringAttributes.HideCloseButton);
    }
}
exports.TableauAuthoringViz = TableauAuthoringViz;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Components/TableauViz.js":
/*!*******************************************************!*\
  !*** ./lib/src/EmbeddingApi/Components/TableauViz.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const CustomMarkContextMenuEvent_1 = __webpack_require__(/*! ../Events/CustomMarkContextMenuEvent */ "./lib/src/EmbeddingApi/Events/CustomMarkContextMenuEvent.js");
const FilterChangedEvent_1 = __webpack_require__(/*! ../Events/FilterChangedEvent */ "./lib/src/EmbeddingApi/Events/FilterChangedEvent.js");
const MarksSelectedEvent_1 = __webpack_require__(/*! ../Events/MarksSelectedEvent */ "./lib/src/EmbeddingApi/Events/MarksSelectedEvent.js");
const ParameterChangedEvent_1 = __webpack_require__(/*! ../Events/ParameterChangedEvent */ "./lib/src/EmbeddingApi/Events/ParameterChangedEvent.js");
const StoryPointSwitchedEvent_1 = __webpack_require__(/*! ../Events/StoryPointSwitchedEvent */ "./lib/src/EmbeddingApi/Events/StoryPointSwitchedEvent.js");
const UrlActionEvent_1 = __webpack_require__(/*! ../Events/UrlActionEvent */ "./lib/src/EmbeddingApi/Events/UrlActionEvent.js");
const EmbeddingVizUrl_1 = __webpack_require__(/*! ../Models/EmbeddingVizUrl */ "./lib/src/EmbeddingApi/Models/EmbeddingVizUrl.js");
const Workbook_1 = __webpack_require__(/*! ../Models/Workbook */ "./lib/src/EmbeddingApi/Models/Workbook.js");
const WebComponentManager_1 = __webpack_require__(/*! ../WebComponentManager */ "./lib/src/EmbeddingApi/WebComponentManager.js");
const TableauVizBase_1 = __webpack_require__(/*! ./TableauVizBase */ "./lib/src/EmbeddingApi/Components/TableauVizBase.js");
/**
 * Represents the entry point for the `<tableau-viz>` custom HTML element.
 * This class is specifically focused on transferring information between the HTML and
 * the Viz, so it should have as little logic as possible.  Most of the logic should be
 * in {@link VizImpl}.
 */
class TableauViz extends TableauVizBase_1.TableauVizBase {
    constructor() {
        // ========================================== Begin Custom Element definition ==========================================
        super(...arguments);
        // This stores filters added via addFilter()
        this.preInitFilters = [];
        // =========================================== End Viz Model definiton =================================================
    }
    //#region Reactions
    //#region Filters
    readFiltersFromChild() {
        const filters = [];
        [].forEach.call(this.children, (child) => {
            if (child.localName === Contract.VizChildElements.VizFilter &&
                !!child.getAttribute(Contract.VizChildElementAttributes.Field) &&
                child.getAttribute(Contract.VizChildElementAttributes.Value) !== undefined) {
                filters.push({
                    field: child.getAttribute(Contract.VizChildElementAttributes.Field),
                    value: child.getAttribute(Contract.VizChildElementAttributes.Value),
                });
            }
        });
        return filters;
    }
    //#endregion Filters
    //#region Parameters
    readParametersFromChild() {
        const params = [];
        [].forEach.call(this.children, (child) => {
            if (child.localName === Contract.VizChildElements.VizParameter &&
                !!child.getAttribute(Contract.VizChildElementAttributes.Name) &&
                !!child.getAttribute(Contract.VizChildElementAttributes.Value)) {
                params.push({
                    name: child.getAttribute(Contract.VizChildElementAttributes.Name),
                    value: child.getAttribute(Contract.VizChildElementAttributes.Value),
                });
            }
        });
        return params;
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the viz
        return [...super.observedAttributes, ...Object.values(Contract.VizAttributes)];
    }
    disconnectedCallback() {
        this.preInitFilters = [];
        super.disconnectedCallback();
    }
    //#endregion Reaction
    createFrameUrlWithParams() {
        const vizqlOptions = this.constructVizqlOptions();
        const filters = this.readFiltersFromChild().concat(this.preInitFilters);
        const params = this.readParametersFromChild();
        const customParams = this.readCustomParamsFromChildren();
        return EmbeddingVizUrl_1.createVizUrl(this.src, EmbeddingVizUrl_1.EmbeddingUrlMode.Viewing, vizqlOptions, this._embeddingIdCounter, filters, params, customParams);
    }
    constructVizqlOptions() {
        const options = {
            disableUrlActionsPopups: this.disableUrlActionsPopups,
            hideTabs: this.hideTabs,
            toolbar: this.toolbar,
            instanceIdToClone: this.instanceIdToClone,
            device: this.device,
            token: this.token,
            touchOptimize: this.touchOptimize,
            hideEditButton: this.hideEditButton,
            hideEditInDesktopButton: this.hideEditInDesktopButton,
            suppressDefaultEditBehavior: this.suppressDefaultEditBehavior,
            debug: this.debug,
            iframeAuth: this.iframeAuth,
        };
        return options;
    }
    getAttributeEvents() {
        return [
            [Contract.VizAttributes.OnCustomMarkContextMenuEvent, Contract.EmbeddingTableauEventType.CustomMarkContextMenuEvent],
            [Contract.VizAttributes.OnEditButtonClicked, Contract.EmbeddingTableauEventType.EditButtonClicked],
            [Contract.VizSharedAttributes.OnEditInDesktopButtonClicked, Contract.EmbeddingTableauEventType.EditInDesktopButtonClicked],
            [Contract.VizAttributes.OnFilterChanged, Contract.EmbeddingTableauEventType.FilterChanged],
            [Contract.VizSharedAttributes.OnFirstInteractive, Contract.EmbeddingTableauEventType.FirstInteractive],
            [Contract.VizSharedAttributes.OnFirstVizSizeKnown, Contract.EmbeddingTableauEventType.FirstVizSizeKnown],
            [Contract.VizAttributes.OnMarkSelectionChanged, Contract.EmbeddingTableauEventType.MarkSelectionChanged],
            [Contract.VizAttributes.OnParameterChanged, Contract.EmbeddingTableauEventType.ParameterChanged],
            [Contract.VizAttributes.OnTabSwitched, Contract.EmbeddingTableauEventType.TabSwitched],
            [Contract.VizAttributes.OnToolbarStateChanged, Contract.EmbeddingTableauEventType.ToolbarStateChanged],
            [Contract.VizAttributes.OnUrlAction, Contract.EmbeddingTableauEventType.UrlAction],
            [Contract.VizAttributes.OnCustomViewLoaded, Contract.EmbeddingTableauEventType.CustomViewLoaded],
            [Contract.VizAttributes.OnCustomViewRemoved, Contract.EmbeddingTableauEventType.CustomViewRemoved],
            [Contract.VizAttributes.OnCustomViewSaved, Contract.EmbeddingTableauEventType.CustomViewSaved],
            [Contract.VizAttributes.OnCustomViewSetDefault, Contract.EmbeddingTableauEventType.CustomViewSetDefault],
            [Contract.VizAttributes.OnStoryPointSwitched, Contract.EmbeddingTableauEventType.StoryPointSwitched],
        ];
    }
    getRegisteredEvents() {
        return super.getRegisteredEvents().concat([
            [
                api_internal_contract_js_1.NotificationId.SelectedMarksChanged,
                (model) => {
                    return this.shouldNotifyEvent(model);
                },
                (visualId) => this.handleSelectedMarksChangedEvent(visualId),
            ],
            [
                api_internal_contract_js_1.NotificationId.FilterChanged,
                (model) => this.shouldNotifyEvent(model.visualId),
                (event) => this.handleFilterChangedEvent(event),
            ],
            [api_internal_contract_js_1.NotificationId.EditButtonClicked, () => true, () => this.handleEditButtonClicked()],
            [
                api_internal_contract_js_1.NotificationId.CustomMarkContextMenuClicked,
                (model) => {
                    return this.shouldNotifyEvent(model.visualId);
                },
                (event) => this.handleCustomMarkClickedContextMenuEvent(event),
            ],
            [
                api_internal_contract_js_1.NotificationId.ParameterChanged,
                () => true,
                (fieldName) => this.handleParameterChangedEvent(fieldName),
            ],
            [api_internal_contract_js_1.NotificationId.UrlAction, () => true, (event) => this.handleUrlAction(event)],
            [api_internal_contract_js_1.NotificationId.StoryPointSwitched, () => true, (event) => this.handleStoryPointSwitch(event)],
        ]);
    }
    shouldNotifyEvent(visualId) {
        switch (this.workbook.activeSheet.sheetType) {
            case Contract.SheetType.Worksheet:
                return this.workbook.activeSheet.name === visualId.worksheet;
            case Contract.SheetType.Dashboard: {
                const dashboard = this.workbook.activeSheet;
                const length = dashboard.worksheets.filter((ws) => ws.name === visualId.worksheet).length;
                return length === 1;
            }
            case Contract.SheetType.Story: {
                const story = this.workbook.activeSheet;
                const containedSheet = story.activeStoryPoint.containedSheet;
                if (!containedSheet) {
                    return false;
                }
                if (containedSheet.sheetType === Contract.SheetType.Worksheet) {
                    return containedSheet.name === visualId.worksheet;
                }
                else if (containedSheet.sheetType === Contract.SheetType.Dashboard) {
                    const dashboard = containedSheet;
                    const length = dashboard.worksheets.filter((ws) => ws.name === visualId.worksheet).length;
                    return length === 1;
                }
                else {
                    return false;
                }
            }
            default:
                return false;
        }
    }
    handleSelectedMarksChangedEvent(visualId) {
        const event = new MarksSelectedEvent_1.MarksSelectedEvent(this.getWorksheetForNotificationHandler(visualId));
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.MarkSelectionChanged, { detail: event }));
    }
    handleFilterChangedEvent(event) {
        const filterChangeEvent = new FilterChangedEvent_1.FilterChangedEvent(this.getWorksheetForNotificationHandler(event.visualId), event.fieldName, event.fieldId);
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.FilterChanged, { detail: filterChangeEvent }));
    }
    handleEditButtonClicked() {
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.EditButtonClicked));
    }
    handleCustomMarkClickedContextMenuEvent(event) {
        const customMarkClickedEvent = new CustomMarkContextMenuEvent_1.CustomMarkContextMenuEvent(this.getWorksheetForNotificationHandler(event.visualId), event.contextMenuId);
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.CustomMarkContextMenuEvent, { detail: customMarkClickedEvent }));
    }
    handleParameterChangedEvent(fieldName) {
        const event = new ParameterChangedEvent_1.ParameterChangedEvent(fieldName, this.vizImpl.embeddingId);
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.ParameterChanged, { detail: event }));
    }
    handleUrlAction(event) {
        const urlActionEvent = new UrlActionEvent_1.UrlActionEvent(event.url, event.target);
        this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.UrlAction, { detail: urlActionEvent }));
    }
    handleStoryPointSwitch(newStoryPointModel) {
        const storyImpl = this.vizImpl.workbookImpl.activeSheet;
        const storyPointInfoImpl = storyImpl.storyPointsInfo.find((storyPointInfo) => storyPointInfo.active === true);
        if (storyImpl.activeStoryPoint && storyPointInfoImpl) {
            if (storyImpl.activeStoryPoint.index !== newStoryPointModel.index) {
                storyImpl.updateStory(newStoryPointModel);
                const storyPointSwitchedEvent = new StoryPointSwitchedEvent_1.StoryPointSwitchedEvent(storyPointInfoImpl, storyImpl.activeStoryPoint, this.vizImpl.workbookImpl);
                this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.StoryPointSwitched, { detail: storyPointSwitchedEvent }));
            }
        }
    }
    getWorksheetForNotificationHandler(visualId) {
        let worksheet;
        switch (this.workbook.activeSheet.sheetType) {
            case Contract.SheetType.Worksheet: {
                worksheet = this.workbook.activeSheet;
                break;
            }
            case Contract.SheetType.Dashboard: {
                const dashboard = this.workbook.activeSheet;
                const worksheetArr = dashboard.worksheets.filter((ws) => ws.name === visualId.worksheet);
                if (worksheetArr.length === 1) {
                    worksheet = worksheetArr[0];
                }
                else {
                    throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'Worksheet not found');
                }
                break;
            }
            case Contract.SheetType.Story: {
                const story = this.workbook.activeSheet;
                const containedSheet = story.activeStoryPoint.containedSheet;
                if (!containedSheet) {
                    throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'Worksheet not found');
                }
                if (containedSheet.sheetType === Contract.SheetType.Worksheet) {
                    worksheet = containedSheet;
                }
                else if (containedSheet.sheetType === Contract.SheetType.Dashboard) {
                    const dashboard = containedSheet;
                    const worksheetArr = dashboard.worksheets.filter((ws) => ws.name === visualId.worksheet);
                    if (worksheetArr.length === 1) {
                        worksheet = worksheetArr[0];
                    }
                    else {
                        throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'Worksheet not found');
                    }
                }
                else {
                    throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Could not find sheetType');
                }
                break;
            }
            default:
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Could not find sheetType');
        }
        return worksheet;
    }
    //#region Simple Getters / Setters
    get disableUrlActionsPopups() {
        return this.hasAttribute(Contract.VizAttributes.DisableUrlActionsPopups);
    }
    set disableUrlActionsPopups(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.DisableUrlActionsPopups, '');
        }
        else {
            this.removeAttribute(Contract.VizAttributes.DisableUrlActionsPopups);
        }
    }
    get hideTabs() {
        return this.hasAttribute(Contract.VizAttributes.HideTabs);
    }
    set hideTabs(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.HideTabs, '');
        }
        else {
            this.removeAttribute(Contract.VizAttributes.HideTabs);
        }
    }
    get toolbar() {
        const toolbarKey = TableauVizBase_1.attributeToEnumKey(this.getAttribute(Contract.VizAttributes.Toolbar));
        const position = Contract.Toolbar[toolbarKey];
        if (!position) {
            return TableauVizBase_1.TableauVizBase.VizAttributeDefaults.toolbar;
        }
        return position;
    }
    set toolbar(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.Toolbar, v);
        }
    }
    get instanceIdToClone() {
        const idToClone = this.getAttribute(Contract.VizAttributes.InstanceIdToClone);
        if (!idToClone) {
            return undefined;
        }
        return idToClone;
    }
    set instanceIdToClone(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.InstanceIdToClone, v);
        }
        else {
            this.removeAttribute(Contract.VizAttributes.InstanceIdToClone);
        }
    }
    get device() {
        const deviceKey = TableauVizBase_1.attributeToEnumKey(this.getAttribute(Contract.VizAttributes.Device));
        const device = Contract.DeviceType[deviceKey];
        if (!device) {
            return TableauVizBase_1.TableauVizBase.VizAttributeDefaults.device; // it was not a valid device type
        }
        return device;
    }
    set device(v) {
        this.setAttribute(Contract.VizAttributes.Device, v);
    }
    get hideEditButton() {
        return this.hasAttribute(Contract.VizAttributes.HideEditButton);
    }
    set hideEditButton(v) {
        if (v) {
            this.setAttribute(Contract.VizAttributes.HideEditButton, '');
        }
        else {
            this.removeAttribute(Contract.VizAttributes.HideEditButton);
        }
    }
    //#endregion
    // ========================================== End Custom Element definition ============================================
    // =========================================== Begin Viz Model definiton ===============================================
    get automaticUpdatesArePaused() {
        return this.vizImpl.automaticUpdatesArePaused;
    }
    pauseAutomaticUpdatesAsync() {
        return this.vizImpl.pauseAutomaticUpdatesAsync();
    }
    resumeAutomaticUpdatesAsync() {
        return this.vizImpl.resumeAutomaticUpdatesAsync();
    }
    toggleAutomaticUpdatesAsync() {
        return this.vizImpl.toggleAutomaticUpdatesAsync();
    }
    revertAllAsync() {
        return this.vizImpl.revertAllAsync();
    }
    refreshDataAsync() {
        return this.vizImpl.refreshDataAsync();
    }
    exportImageAsync() {
        return this.vizImpl.exportImageAsync();
    }
    exportCrosstabAsync(sheetName, format) {
        return this.vizImpl.exportCrosstabAsync(sheetName, format);
    }
    exportDataAsync(sheetName, options) {
        return this.vizImpl.exportDataAsync(sheetName, options);
    }
    exportPowerPointAsync(sheetNames) {
        return this.vizImpl.exportPowerPointAsync(sheetNames);
    }
    exportPDFAsync(sheetNames, options) {
        return this.vizImpl.exportPDFAsync(sheetNames, options);
    }
    displayDialogAsync(dialogType) {
        return this.vizImpl.displayDialogAsync(dialogType);
    }
    redoAsync() {
        return this.vizImpl.redoAsync();
    }
    undoAsync() {
        return this.vizImpl.undoAsync();
    }
    addFilter(fieldName, value) {
        this.preInitFilters.push({ field: fieldName, value: value });
        WebComponentManager_1.WebComponentManager.synchronizeRender(this.updateRenderingIfInitialized.bind(this, this.src));
    }
    /**
     * This is the public entry point for users to get a reference to the whole data model
     */
    get workbook() {
        return new Workbook_1.Workbook(this.vizImpl.workbookImpl);
    }
}
exports.TableauViz = TableauViz;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Components/TableauVizBase.js":
/*!***********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Components/TableauVizBase.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const VizImpl_1 = __webpack_require__(/*! ../Impl/VizImpl */ "./lib/src/EmbeddingApi/Impl/VizImpl.js");
const WebComponentManager_1 = __webpack_require__(/*! ../WebComponentManager */ "./lib/src/EmbeddingApi/WebComponentManager.js");
const TableauWebComponent_1 = __webpack_require__(/*! ./TableauWebComponent */ "./lib/src/EmbeddingApi/Components/TableauWebComponent.js");
/**
 * This class is specifically focused on transferring information between html and viz
 * and giving the user an entry point into the viz model
 * It should have as little logic as possible
 */
class TableauVizBase extends TableauWebComponent_1.TableauWebComponent {
    // ========================================== Begin Custom Element definition ==========================================
    // https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element-conformance
    disconnectedCallback() {
        super.disconnectedCallback();
        if (this._vizImpl) {
            this._vizImpl.dispose();
        }
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the viz
        return [...super.observedAttributes, ...Object.values(Contract.VizSharedAttributes)];
    }
    updateRenderingIfInitialized(src) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._initialized) {
                return;
            }
            // vizImpl is empty when a src is not set on initial tableau-viz load
            if (this._vizImpl) {
                this._vizImpl.dispose();
            }
            WebComponentManager_1.WebComponentManager.unregisterWebComponent(this._embeddingIdCounter);
            return this.updateRendering(src);
        });
    }
    updateRendering(src) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                this._initialized = true;
                if (!src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                const authResponse = yield this.auth();
                if (authResponse === TableauWebComponent_1.TableauAuthResponse.Failure) {
                    console.debug('Authentication failed.');
                    return;
                }
                // Nothing to render if the user hasn't provided a src
                if (!this.src) {
                    console.debug(`A src needs to be set on the ${this.tagName.toLowerCase()} element. Skipping rendering.`);
                    return;
                }
                if (!this.iframe) {
                    console.debug('No iframe available to update the src.');
                    return;
                }
                this._embeddingIdCounter = WebComponentManager_1.WebComponentManager.registerWebComponent(this);
                this.registerAttributeEvents();
                const frameUrl = this.createFrameUrlWithParams();
                this._vizImpl = this.createAndInitializeVizImpl(frameUrl);
                this.iframe.src = frameUrl.toString();
                this.raiseIframeSrcUpdatedNotification();
                return;
            }
            catch (e) {
                console.debug(e);
            }
        });
    }
    createAndInitializeVizImpl(vizUrl) {
        const vizImpl = new VizImpl_1.VizImpl(this, this.iframe, vizUrl, this._embeddingIdCounter);
        vizImpl.initializeViz();
        return vizImpl;
    }
    registerAttributeEvents() {
        this.getAttributeEvents().forEach((elem) => {
            const [attributeEvent, eventType] = elem;
            this.registerCallback(attributeEvent, eventType);
        });
    }
    initializeEvents() {
        let notificationService;
        try {
            notificationService = api_shared_js_1.ApiServiceRegistry.get(this.vizImpl.embeddingId).getService("notification-service" /* Notification */);
        }
        catch (e) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.EventInitializationError, 'Event initialization failed');
        }
        const registeredEvents = this.getRegisteredEvents();
        for (const [notification, filterfn, handler] of registeredEvents) {
            notificationService.registerHandler(notification, filterfn, handler);
        }
    }
    getRegisteredEvents() {
        return [
            [
                api_internal_contract_js_1.NotificationId.EditInDesktopButtonClicked,
                () => true,
                () => this.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.EditInDesktopButtonClicked)),
            ],
        ];
    }
    //#region Simple Getters / Setters
    get touchOptimize() {
        return this.hasAttribute(Contract.VizSharedAttributes.TouchOptimize);
    }
    set touchOptimize(v) {
        if (v) {
            this.setAttribute(Contract.VizSharedAttributes.TouchOptimize, '');
        }
        else {
            this.removeAttribute(Contract.VizSharedAttributes.TouchOptimize);
        }
    }
    get vizImpl() {
        return this._vizImpl;
    }
    get hideEditInDesktopButton() {
        return this.hasAttribute(Contract.VizSharedAttributes.HideEditInDesktopButton);
    }
    set hideEditInDesktopButton(v) {
        if (v) {
            this.setAttribute(Contract.VizSharedAttributes.HideEditInDesktopButton, '');
        }
        else {
            this.removeAttribute(Contract.VizSharedAttributes.HideEditInDesktopButton);
        }
    }
    get suppressDefaultEditBehavior() {
        return this.hasAttribute(Contract.VizSharedAttributes.SuppressDefaultEditBehavior);
    }
    set suppressDefaultEditBehavior(v) {
        if (v) {
            this.setAttribute(Contract.VizSharedAttributes.SuppressDefaultEditBehavior, '');
        }
        else {
            this.removeAttribute(Contract.VizSharedAttributes.SuppressDefaultEditBehavior);
        }
    }
    get disableVersionCheck() {
        return this.hasAttribute(Contract.VizSharedAttributes.DisableVersionCheck);
    }
    set disableVersionCheck(v) {
        if (v) {
            this.setAttribute(Contract.VizSharedAttributes.DisableVersionCheck, '');
        }
        else {
            this.removeAttribute(Contract.VizSharedAttributes.DisableVersionCheck);
        }
    }
    //#endregion
    getCurrentSrcAsync() {
        return this.vizImpl.getCurrentSrcAsync();
    }
}
exports.TableauVizBase = TableauVizBase;
TableauVizBase.VizAttributeDefaults = {
    device: Contract.DeviceType.Default,
    toolbar: Contract.Toolbar.Bottom,
};
// This maybe needed in multiple files, so leaving outside the class for now.
function attributeToEnumKey(value) {
    if (!value || value.length < 1) {
        return '';
    }
    const lowercase = value.toLowerCase();
    const firstUpper = lowercase[0].toUpperCase() + lowercase.substring(1);
    return firstUpper;
}
exports.attributeToEnumKey = attributeToEnumKey;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Components/TableauWebComponent.js":
/*!****************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Components/TableauWebComponent.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const VizLoadErrorEvent_1 = __webpack_require__(/*! ../Events/VizLoadErrorEvent */ "./lib/src/EmbeddingApi/Events/VizLoadErrorEvent.js");
const EmbeddingUrlBuilder_1 = __webpack_require__(/*! ../Models/EmbeddingUrlBuilder */ "./lib/src/EmbeddingApi/Models/EmbeddingUrlBuilder.js");
const HtmlElementHelpers_1 = __webpack_require__(/*! ../Utils/HtmlElementHelpers */ "./lib/src/EmbeddingApi/Utils/HtmlElementHelpers.js");
const WebComponentManager_1 = __webpack_require__(/*! ../WebComponentManager */ "./lib/src/EmbeddingApi/WebComponentManager.js");
var TableauAuthResponse;
(function (TableauAuthResponse) {
    TableauAuthResponse["Skip"] = "skip";
    TableauAuthResponse["Success"] = "success";
    TableauAuthResponse["Failure"] = "failure";
})(TableauAuthResponse = exports.TableauAuthResponse || (exports.TableauAuthResponse = {}));
class TableauWebComponent extends HTMLElement {
    // https://html.spec.whatwg.org/multipage/custom-elements.html#custom-element-conformance
    constructor() {
        super();
        this._initialized = false;
        this._embeddingIdCounter = 0;
        this._fixedSize = false;
        this.attachShadow({ mode: 'open' });
    }
    disconnectedCallback() {
        var _a;
        if (this._iframe) {
            (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeChild(this._iframe);
        }
        WebComponentManager_1.WebComponentManager.unregisterWebComponent(this._embeddingIdCounter);
        this._initialized = false;
    }
    connectedCallback() {
        if (document.readyState === 'loading') {
            // Loading hasn't finished yet
            document.addEventListener('DOMContentLoaded', () => {
                this.initialize();
            });
        }
        else {
            // `DOMContentLoaded` has already fired
            this.initialize();
        }
    }
    /**
     * Invoked each time one of the custom element's attributes is added, removed, or changed.
     * @param  {string} name - The name of the attribute.
     * @param  {string|null} oldValue - The previous value of the attribute or null if the attribute was just added.
     * @param  {string|null} newValue - The new value of the attribute or null if the attribute was just removed.
     * @returns void
     */
    attributeChangedCallback(name, oldValue, newValue) {
        if (!oldValue && oldValue === newValue) {
            // A value-less attribute was reapplied.
            // e.g. hide-tabs=''
            return;
        }
        // if it's width/height, resize the frame
        // TFS 892487: Deal with sizing and scrollbars later
        if (name === api_external_contract_js_1.WebComponentAttributes.Width || name === api_external_contract_js_1.WebComponentAttributes.Height) {
            this.setFrameSize();
            return;
        }
        // When there is a change in the other observed attributes, let's unregister the Viz
        // and re-render the viz again with new attribute values
        WebComponentManager_1.WebComponentManager.synchronizeRender(this.updateRenderingIfInitialized.bind(this, this.src));
    }
    static get observedAttributes() {
        // Take caution before adding to this list because for every observed attribute change
        // we unregister and re-render the viz
        return Object.values(api_external_contract_js_1.WebComponentAttributes);
    }
    initialize() {
        if (!this._initialized) {
            // The tableau viz component must display as flex so that it is simply a container
            // for the iframe and doesn't take up any room from its children.
            this.style.display = 'flex';
            this.setupFrame();
            this.registerAttributeAuthErrorEvent();
            WebComponentManager_1.WebComponentManager.synchronizeRender(this.updateRendering.bind(this, this.src));
        }
    }
    get fixedSize() {
        return this._fixedSize;
    }
    readCustomParamsFromChildren() {
        const params = [];
        Array.from(this.children).forEach((child) => {
            if (child.localName === api_external_contract_js_1.WebComponentChildElements.CustomParameter &&
                child.getAttribute(api_external_contract_js_1.WebComponentChildElementAttributes.Name) &&
                child.getAttribute(api_external_contract_js_1.WebComponentChildElementAttributes.Value)) {
                params.push({
                    name: child.getAttribute(api_external_contract_js_1.WebComponentChildElementAttributes.Name),
                    value: child.getAttribute(api_external_contract_js_1.WebComponentChildElementAttributes.Value),
                });
            }
        });
        return params;
    }
    localizedTitle(lang) {
        return (TableauWebComponent.localizedTitles[lang] ||
            TableauWebComponent.localizedTitles[lang.substr(0, 2)] ||
            TableauWebComponent.localizedTitles.en);
    }
    setupFrame() {
        this._iframe = document.createElement('iframe');
        const lang = navigator.language;
        const localizedTitle = this.localizedTitle(lang);
        // give context to users using screenreaders as to what kind of iframe they've entered
        this._iframe.setAttribute('title', localizedTitle);
        this._iframe.setAttribute('allowTransparency', 'true');
        this._iframe.setAttribute('allowFullScreen', 'true');
        // reset any box model styles
        this._iframe.style.margin = '0px';
        this._iframe.style.padding = '0px';
        this._iframe.style.border = 'none';
        this._iframe.style.position = 'relative';
        this._iframe.style.width = '100%';
        // set iframe name & id
        this._iframe.id = this.id;
        this._iframe.name = this.id;
        this.setFrameSize();
        if (this.shadowRoot) {
            this.shadowRoot.appendChild(this._iframe);
        }
    }
    setFrameSize() {
        if (this._iframe) {
            this._iframe.style.height = this.height;
            this._iframe.style.width = this.width;
        }
    }
    /**
     * Compute the height and width by checking for the existence of
     * 1. The height and width attributes on the element, and
     * 2. The window computed height and width of the parent element.
     * If neither are defined for both dimensions, then return the default values.
     * @returns height and width to be used in setting the iframe size.
     */
    computeElementSize() {
        const heightAttr = this.getPixelAttribute(api_external_contract_js_1.WebComponentAttributes.Height);
        const widthAttr = this.getPixelAttribute(api_external_contract_js_1.WebComponentAttributes.Width);
        if (heightAttr && widthAttr) {
            this._fixedSize = true;
            return { height: heightAttr, width: widthAttr };
        }
        if (this.parentElement) {
            const { height, width } = HtmlElementHelpers_1.HtmlElementHelpers.getContentSize(this.parentElement);
            if (height && width) {
                this._fixedSize = true;
                return { height: `${height}px`, width: `${width}px` };
            }
        }
        this._fixedSize = false;
        return { height: TableauWebComponent.AttributeDefaults.height, width: TableauWebComponent.AttributeDefaults.width };
    }
    //Simple Getters / Setters
    get src() {
        return this.getAttribute(api_external_contract_js_1.WebComponentAttributes.Src);
    }
    set src(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Src, v);
        }
    }
    get width() {
        return this.computeElementSize().width;
    }
    // non-valid css lengths will simply turn into '' e.g a number with no units
    set width(v) {
        this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Width, v);
    }
    get height() {
        return this.computeElementSize().height;
    }
    // non-valid css lengths will simply turn into '' e.g a number with no units
    set height(v) {
        this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Height, v);
    }
    get debug() {
        return this.hasAttribute(api_external_contract_js_1.WebComponentAttributes.Debug);
    }
    set debug(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Debug, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.WebComponentAttributes.Debug);
        }
    }
    get token() {
        const tokenValue = this.getAttribute(api_external_contract_js_1.WebComponentAttributes.Token);
        if (!tokenValue) {
            return undefined;
        }
        return tokenValue;
    }
    set token(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.Token, v);
        }
        else {
            this.removeAttribute(api_external_contract_js_1.WebComponentAttributes.Token);
        }
    }
    get iframeAuth() {
        return this.hasAttribute(api_external_contract_js_1.WebComponentAttributes.IframeAuth);
    }
    set iframeAuth(v) {
        if (v) {
            this.setAttribute(api_external_contract_js_1.WebComponentAttributes.IframeAuth, '');
        }
        else {
            this.removeAttribute(api_external_contract_js_1.WebComponentAttributes.IframeAuth);
        }
    }
    getPixelAttribute(attributeName) {
        const attr = this.getAttribute(attributeName);
        if (attr && attr !== '') {
            return isNaN(Number(attr)) ? attr : `${Math.round(Number(attr))}px`;
        }
        else {
            // if it was invalid css, it will be blank
            return '';
        }
    }
    get iframe() {
        return this._iframe;
    }
    registerAttributeAuthErrorEvent() {
        this.getWebComponentAttributeEvents().forEach((elem) => {
            const [attributeEvent, eventType] = elem;
            this.registerCallback(attributeEvent, eventType);
        });
    }
    getWebComponentAttributeEvents() {
        return [[api_external_contract_js_1.WebComponentAttributes.OnVizLoadError, api_external_contract_js_1.EmbeddingTableauEventType.VizLoadError]];
    }
    registerCallback(attributeEvent, eventType) {
        // this will allow for both lowercase and camelcase attribute
        const funcName = this.getAttribute(attributeEvent);
        if (funcName && /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(funcName)) {
            if (window[funcName]) {
                this.addEventListener(eventType, window[funcName]);
            }
        }
    }
    auth() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (!this.src) {
                    return TableauAuthResponse.Skip;
                }
                if (!this.token) {
                    return TableauAuthResponse.Skip;
                }
                if (this.iframeAuth) {
                    return TableauAuthResponse.Skip;
                }
                const siteName = EmbeddingUrlBuilder_1.getSiteId(this.src);
                const origin = new URL(this.src).origin.toString();
                const connectedAppUrl = `${origin}/vizportal/api/web/v1/auth/embed/signin`;
                const body = {
                    siteName,
                    jwt: this.token,
                };
                const options = {
                    method: 'POST',
                    credentials: 'include',
                    headers: {
                        'content-type': 'application/json',
                    },
                    body: JSON.stringify(body),
                };
                const response = yield fetch(connectedAppUrl, options);
                if (response.ok) {
                    return TableauAuthResponse.Success;
                }
                const text = yield response.text();
                const err = text;
                const error = {
                    statusCode: response.status,
                    errorMessage: err,
                };
                if (this.isFallbackToRedirectAuthNeeded(error)) {
                    this.iframeAuth = true;
                    console.debug('Auth Fallback trigger');
                    return TableauAuthResponse.Failure;
                }
                this.raiseVizLoadErrorNotification(api_external_contract_js_1.EmbeddingErrorCodes.AuthFailed, error);
                return TableauAuthResponse.Failure;
            }
            catch (error) {
                this.raiseVizLoadErrorNotification(api_external_contract_js_1.EmbeddingErrorCodes.UnknownAuthError, error);
                return TableauAuthResponse.Failure;
            }
        });
    }
    isFallbackToRedirectAuthNeeded(error) {
        try {
            if (error.statusCode === 404) {
                // redirect if the new endpoint is not available.
                return true;
            }
            if (error.statusCode === 401) {
                let errors = JSON.parse(error.errorMessage).result.errors;
                if (errors && errors.length > 0 && errors[0].code === 67) {
                    // redirect if the feature flag is turned off.
                    return true;
                }
            }
            return false;
        }
        catch (e) {
            console.error('Parsing error: ' + e);
            return false;
        }
    }
    raiseIframeSrcUpdatedNotification() {
        this.dispatchEvent(new CustomEvent(api_external_contract_js_1.EmbeddingTableauEventType.IframeSrcUpdated));
    }
    raiseVizLoadErrorNotification(errorCode, error) {
        try {
            console.error(error);
            const errorEvent = new VizLoadErrorEvent_1.VizLoadErrorEvent(errorCode, JSON.stringify(error));
            this.dispatchEvent(new CustomEvent(api_external_contract_js_1.EmbeddingTableauEventType.VizLoadError, { detail: errorEvent }));
        }
        catch (err) {
            const errorEvent = new VizLoadErrorEvent_1.VizLoadErrorEvent(api_external_contract_js_1.EmbeddingErrorCodes.UnknownAuthError, '');
            this.dispatchEvent(new CustomEvent(api_external_contract_js_1.EmbeddingTableauEventType.VizLoadError, { detail: errorEvent }));
        }
    }
}
exports.TableauWebComponent = TableauWebComponent;
// localized strings copied over from Strings.AccessibilityDataVisualizationTitleAttr
// TFS 1287423: Enable loc pipeline
TableauWebComponent.localizedTitles = {
    en: 'Data Visualization',
    'en-GB': 'Data Visualisation',
    fr: 'Visualisation de donn\u00E9es',
    es: 'Visualizaci\u00F3n de datos',
    it: 'Visualizzazione dati',
    pt: 'Visualiza\u00E7\u00E3o de dados',
    ja: '\u30C7\u30FC\u30BF \u30D3\u30B8\u30E5\u30A2\u30E9\u30A4\u30BC\u30FC\u30B7\u30E7\u30F3',
    de: 'Datenvisualisierung',
    ko: '\uB370\uC774\uD130 \uBE44\uC8FC\uC5BC\uB9AC\uC81C\uC774\uC158',
    'zh-CN': '\u6570\u636E\u53EF\u89C6\u5316',
    'zh-TW': '\u8CC7\u6599\u53EF\u8996\u5316',
};
TableauWebComponent.AttributeDefaults = {
    width: '800px',
    height: '600px',
};


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/CustomMarkContextMenuEvent.js":
/*!*******************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/CustomMarkContextMenuEvent.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const TableauWorksheetEvent_1 = __webpack_require__(/*! ./TableauWorksheetEvent */ "./lib/src/EmbeddingApi/Events/TableauWorksheetEvent.js");
class CustomMarkContextMenuEvent extends TableauWorksheetEvent_1.TableauWorksheetEvent {
    constructor(worksheet, contextMenuId) {
        super(api_external_contract_js_1.EmbeddingTableauEventType.CustomMarkContextMenuEvent, worksheet);
        this._contextMenuId = contextMenuId;
    }
    getContextMenuId() {
        return this._contextMenuId;
    }
    getSelectedMarksAsync() {
        return this.worksheet.getSelectedMarksAsync();
    }
}
exports.CustomMarkContextMenuEvent = CustomMarkContextMenuEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/FilterChangedEvent.js":
/*!***********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/FilterChangedEvent.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const TableauWorksheetEvent_1 = __webpack_require__(/*! ./TableauWorksheetEvent */ "./lib/src/EmbeddingApi/Events/TableauWorksheetEvent.js");
class FilterChangedEvent extends TableauWorksheetEvent_1.TableauWorksheetEvent {
    constructor(worksheet, _fieldName, _fieldId) {
        super(api_external_contract_js_1.EmbeddingTableauEventType.FilterChanged, worksheet);
        this._fieldName = _fieldName;
        this._fieldId = _fieldId;
    }
    get fieldName() {
        return this._fieldName;
    }
    get fieldId() {
        return this._fieldId;
    }
    getFilterAsync() {
        return this.worksheet.getFiltersAsync().then((filters) => {
            // TODO: Filtering of the filters should eventually be done platform side.
            const eventedFilter = this.fieldId
                ? filters.find((filter) => filter.fieldId === this.fieldId, this)
                : filters.find((filter) => filter.fieldName === this.fieldName, this);
            if (!eventedFilter) {
                // We shouldn't hit this unless the filter was removed from the worksheet
                // after the event was raised.
                throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.FilterMissingOrNotImplemented, `Cannot find filter: ${this._fieldName}.`);
            }
            return eventedFilter;
        });
    }
}
exports.FilterChangedEvent = FilterChangedEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/FirstVizSizeKnownEvent.js":
/*!***************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/FirstVizSizeKnownEvent.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class FirstVizSizeKnownEvent {
    constructor(vizSize) {
        this._vizSize = vizSize;
    }
    get vizSize() {
        return this._vizSize;
    }
}
exports.FirstVizSizeKnownEvent = FirstVizSizeKnownEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/MarksSelectedEvent.js":
/*!***********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/MarksSelectedEvent.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const TableauWorksheetEvent_1 = __webpack_require__(/*! ./TableauWorksheetEvent */ "./lib/src/EmbeddingApi/Events/TableauWorksheetEvent.js");
class MarksSelectedEvent extends TableauWorksheetEvent_1.TableauWorksheetEvent {
    constructor(worksheet) {
        super(api_external_contract_js_1.EmbeddingTableauEventType.MarkSelectionChanged, worksheet);
    }
    getMarksAsync() {
        return this.worksheet.getSelectedMarksAsync();
    }
}
exports.MarksSelectedEvent = MarksSelectedEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/ParameterChangedEvent.js":
/*!**************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/ParameterChangedEvent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const Parameter_1 = __webpack_require__(/*! ../Models/Parameter */ "./lib/src/EmbeddingApi/Models/Parameter.js");
class ParameterChangedEvent {
    constructor(_globalFieldName, _embeddingId) {
        this._globalFieldName = _globalFieldName;
        this._embeddingId = _embeddingId;
    }
    getParameterAsync() {
        // Call down to our service to get the parameter back via its field name
        const service = api_shared_js_1.ApiServiceRegistry.get(this._embeddingId).getService("parameters-service" /* Parameters */);
        return service.findParameterByGlobalFieldNameAsync(this._globalFieldName).then((parameterImpl) => {
            if (parameterImpl === undefined) {
                throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.MissingParameter, `Cannot find parameter: ${this._globalFieldName}`);
            }
            return new Parameter_1.Parameter(parameterImpl);
        });
    }
}
exports.ParameterChangedEvent = ParameterChangedEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/StoryPointSwitchedEvent.js":
/*!****************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/StoryPointSwitchedEvent.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const StoryPoint_1 = __webpack_require__(/*! ../Models/StoryPoint */ "./lib/src/EmbeddingApi/Models/StoryPoint.js");
const StoryPointInfo_1 = __webpack_require__(/*! ../Models/StoryPointInfo */ "./lib/src/EmbeddingApi/Models/StoryPointInfo.js");
class StoryPointSwitchedEvent {
    constructor(_oldStoryPointInfoImpl, _currStoryPointImpl, _workbookImpl) {
        this._oldStoryPointInfoImpl = _oldStoryPointInfoImpl;
        this._currStoryPointImpl = _currStoryPointImpl;
        this._workbookImpl = _workbookImpl;
    }
    get oldStoryPointInfo() {
        return new StoryPointInfo_1.StoryPointInfo(this._oldStoryPointInfoImpl, this._workbookImpl);
    }
    get newStoryPoint() {
        return new StoryPoint_1.StoryPoint(this._currStoryPointImpl, this._workbookImpl);
    }
}
exports.StoryPointSwitchedEvent = StoryPointSwitchedEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/TabSwitchedEvent.js":
/*!*********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/TabSwitchedEvent.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class TabSwitchedEvent {
    constructor(_oldSheetName, _newSheetName) {
        this._oldSheetName = _oldSheetName;
        this._newSheetName = _newSheetName;
    }
    get oldSheetName() {
        return this._oldSheetName;
    }
    get newSheetName() {
        return this._newSheetName;
    }
}
exports.TabSwitchedEvent = TabSwitchedEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/TableauSheetEvent.js":
/*!**********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/TableauSheetEvent.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class TableauSheetEvent {
    constructor(type, sheet) {
        this._sheet = sheet;
    }
    get sheet() {
        return this._sheet;
    }
}
exports.TableauSheetEvent = TableauSheetEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/TableauWorksheetEvent.js":
/*!**************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/TableauWorksheetEvent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const TableauSheetEvent_1 = __webpack_require__(/*! ./TableauSheetEvent */ "./lib/src/EmbeddingApi/Events/TableauSheetEvent.js");
class TableauWorksheetEvent extends TableauSheetEvent_1.TableauSheetEvent {
    constructor(type, _worksheet) {
        super(type, _worksheet);
        this._worksheet = _worksheet;
    }
    get worksheet() {
        return this._worksheet;
    }
}
exports.TableauWorksheetEvent = TableauWorksheetEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/ToolbarStateChangedEvent.js":
/*!*****************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/ToolbarStateChangedEvent.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class ToolbarStateChangedEvent {
    constructor(_canRedo, _canUndo) {
        this._canRedo = _canRedo;
        this._canUndo = _canUndo;
    }
    get canRedo() {
        return this._canRedo;
    }
    get canUndo() {
        return this._canUndo;
    }
}
exports.ToolbarStateChangedEvent = ToolbarStateChangedEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/UrlActionEvent.js":
/*!*******************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/UrlActionEvent.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class UrlActionEvent {
    constructor(_url, _target) {
        this._url = _url;
        this._target = _target;
    }
    get url() {
        return this._url;
    }
    get target() {
        return this._target;
    }
}
exports.UrlActionEvent = UrlActionEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Events/VizLoadErrorEvent.js":
/*!**********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Events/VizLoadErrorEvent.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class VizLoadErrorEvent {
    constructor(errorCode, message) {
        this._errorCode = errorCode;
        this._message = message;
    }
    get message() {
        return this._message;
    }
    get errorCode() {
        return this._errorCode;
    }
}
exports.VizLoadErrorEvent = VizLoadErrorEvent;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Impl/EmbeddingWorkbookImpl.js":
/*!************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Impl/EmbeddingWorkbookImpl.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
class EmbeddingWorkbookImpl extends api_shared_js_1.WorkbookImpl {
    constructor(bootstrapInfo, _registryId) {
        super();
        this._registryId = _registryId;
        this._publishedSheetsInfo = [];
        this._customViews = new Map();
        this._name = bootstrapInfo.workbookName;
        this._canDownloadWorkbook = bootstrapInfo.canDownloadWorkbook;
        this.initializeWorkbook(bootstrapInfo);
    }
    get activeSheet() {
        return this._activeSheetImpl;
    }
    get publishedSheetsInfo() {
        return this._publishedSheetsInfo;
    }
    get name() {
        return this._name;
    }
    get canDownloadWorkbook() {
        return this._canDownloadWorkbook;
    }
    get pendingTabSwitchPromise() {
        return this._pendingTabSwitchPromise;
    }
    get pendingShowCustomViewPromise() {
        return this._pendingShowCustomViewPromise;
    }
    clearPendingShowCustomViewPromise() {
        this._pendingShowCustomViewPromise = undefined;
    }
    get activeCustomView() {
        return this._currentCustomView;
    }
    activateSheetAsync(sheetNameOrIndex) {
        api_shared_js_1.ErrorHelpers.verifyParameter(sheetNameOrIndex, 'sheetNameOrIndex');
        let sheetName = this.convertSheetIndexToSheetName(sheetNameOrIndex);
        api_shared_js_1.ErrorHelpers.verifyParameterType(sheetName, 'string', 'sheetNameOrIndex');
        if (!this.validatePublishedSheet(sheetName)) {
            this.verifyDashboardSheets(sheetName);
        }
        // Check to see if the sheet is already active.
        if (this._activeSheetImpl && sheetName === this._activeSheetImpl.name) {
            return new Promise((resolve, reject) => {
                resolve(this);
            });
        }
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        service.activateSheetAsync(sheetName);
        let promise = new Promise((resolve, reject) => {
            // `this._pendingTabSwitchPromise` will be resolved when `TabSwitchedEvent` is fired.
            this._pendingTabSwitchPromise = { resolve: resolve, reject: reject };
        });
        return promise;
    }
    getParametersAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return service.getAllParametersAsync();
    }
    changeParameterValueAsync(name, value) {
        return __awaiter(this, void 0, void 0, function* () {
            api_shared_js_1.ErrorHelpers.verifyParameter(name, 'parameterName');
            const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
            const parameter = yield service.findParameterByNameAsync(name);
            if (parameter) {
                return parameter.changeValueAsync(value).then(() => {
                    return parameter;
                });
            }
            else {
                return undefined;
            }
        });
    }
    updateExistingActiveSheetReferences(newSheetName) {
        if (this._activeSheetImpl) {
            // No need to do anything if we're already on the current sheet.
            if (this._activeSheetImpl.name === newSheetName) {
                return;
            }
            this._activeSheetImpl.active = false;
            this._publishedSheetsInfo.forEach((sheetInfo, index) => {
                if (sheetInfo.name === this._activeSheetImpl.name) {
                    sheetInfo.active = false;
                }
            });
        }
    }
    /**
     *
     * This method is responsible for processing custom views from Tableau. It does two things:
     * First, finds out what's the diff between our local cache & the incoming set of custom views depending on the notification
     * Then, updates the local cache
     *
     * @param customViewNotification
     * @param customViewsInfo
     * @returns The updated {@link CustomViewImpl}
     */
    processCustomViews(customViewNotification, customViewsInfo) {
        var _a;
        const currentCustomViewLuid = (_a = customViewsInfo.currentView) === null || _a === void 0 ? void 0 : _a.luid;
        let updatedCustomViews = [];
        // For CustomViewsLoaded, set the updatedCustomView to the currently active one
        // For CustomViewRemoved, CustomViewSaved & CustomViewSetDefault find the corresponding one from the cache
        // before updating the cache with the incoming set
        switch (customViewNotification) {
            case api_internal_contract_js_1.NotificationId.CustomViewsLoaded:
            case api_internal_contract_js_1.NotificationId.CustomViewSaved: {
                this.refreshCustomViewCache(customViewsInfo);
                if (currentCustomViewLuid) {
                    updatedCustomViews.push(this._customViews.get(currentCustomViewLuid));
                }
                break;
            }
            case api_internal_contract_js_1.NotificationId.CustomViewRemoved: {
                let oldCustomViews = new Map(this._customViews);
                this._customViews.clear();
                customViewsInfo.customViewsList.map((customView) => {
                    this._customViews.set(customView.luid, new api_shared_js_1.CustomViewImpl(customView, this._registryId));
                    oldCustomViews.delete(customView.luid);
                });
                for (let removedCustomView of oldCustomViews.values()) {
                    updatedCustomViews.push(removedCustomView);
                }
                break;
            }
            case api_internal_contract_js_1.NotificationId.CustomViewSetDefault: {
                this.refreshCustomViewCache(customViewsInfo);
                const defaultCustomView = customViewsInfo.customViewsList.find((customView) => customView.isDefault);
                if (defaultCustomView) {
                    updatedCustomViews.push(new api_shared_js_1.CustomViewImpl(defaultCustomView, this._registryId));
                }
                break;
            }
        }
        // If there's an active custom view, update currentCustomView else clear it
        this._currentCustomView = currentCustomViewLuid ? this._customViews.get(currentCustomViewLuid) : undefined;
        return updatedCustomViews;
    }
    refreshCustomViewCache(customViewsInfo) {
        this._customViews.clear();
        customViewsInfo.customViewsList.map((customView) => {
            this._customViews.set(customView.luid, new api_shared_js_1.CustomViewImpl(customView, this._registryId));
        });
    }
    revertAllAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("ToolbarService" /* ToolbarService */);
        return service.revertAllAsync();
    }
    getCustomViewsAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.getCustomViewsAsync();
    }
    showCustomViewAsync(customViewName) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        service.showCustomViewAsync(customViewName);
        let promise = new Promise((resolve, reject) => {
            // `this._pendingShowCustomViewPromise` will be resolved when `CustomViewsLoadedEvent` is fired.
            this._pendingShowCustomViewPromise = { resolve: resolve, reject: reject };
        });
        return promise;
    }
    removeCustomViewAsync(customViewName) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.removeCustomViewAsync(customViewName);
    }
    saveCustomViewAsync(customViewName) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.saveCustomViewAsync(customViewName);
    }
    setActiveCustomViewAsDefaultAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.setActiveCustomViewAsDefaultAsync();
    }
    initializeWorkbook(bootstrapInfo) {
        bootstrapInfo.publishedSheets.forEach((publishedSheet, index) => {
            const sheetSize = api_shared_js_1.SheetUtils.getSheetSizeFromSizeConstraints(publishedSheet.sizeConstraint);
            const isActive = publishedSheet.name === bootstrapInfo.currWorksheetName;
            // Published sheets are not hidden
            const isHidden = false;
            const sheetType = api_shared_js_1.SheetUtils.getSheetTypeEnum(publishedSheet.sheetType);
            const sheetInfoImpl = new api_shared_js_1.SheetInfoImpl(publishedSheet.name, sheetType, sheetSize, index, isActive, isHidden, publishedSheet.url);
            this._publishedSheetsInfo.push(sheetInfoImpl);
            if (isActive) {
                switch (sheetInfoImpl.sheetType) {
                    case Contract.SheetType.Worksheet: {
                        const vizId = {
                            worksheet: sheetInfoImpl.name,
                        };
                        this._activeSheetImpl = new api_shared_js_1.WorksheetImpl(sheetInfoImpl, this._registryId, vizId, null, null);
                        break;
                    }
                    case Contract.SheetType.Dashboard: {
                        const sheetPath = {
                            sheetName: sheetInfoImpl.name,
                            isDashboard: true,
                        };
                        this._activeSheetImpl = new api_shared_js_1.DashboardImpl(sheetInfoImpl, bootstrapInfo.dashboardZones, sheetPath, this._registryId, null);
                        break;
                    }
                    case Contract.SheetType.Story: {
                        if (!bootstrapInfo.story) {
                            throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Unable to receive story information from Tableau');
                        }
                        this._activeSheetImpl = new api_shared_js_1.StoryImpl(sheetInfoImpl, bootstrapInfo.story, bootstrapInfo.publishedSheets, this._registryId);
                        break;
                    }
                    default: {
                        throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');
                    }
                }
            }
        });
    }
    convertSheetIndexToSheetName(sheetNameOrIndex) {
        if (typeof sheetNameOrIndex == 'number') {
            const sheetIndex = sheetNameOrIndex;
            if (this.publishedSheetsInfo[sheetIndex]) {
                return this.publishedSheetsInfo[sheetIndex].name;
            }
            else {
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, `Index ${sheetIndex} is out of range.`);
            }
        }
        return sheetNameOrIndex;
    }
    validatePublishedSheet(sheetName) {
        const found = this.publishedSheetsInfo.find((sheetInfo) => sheetInfo.name === sheetName);
        return found !== undefined;
    }
    verifyDashboardSheets(sheetName) {
        if (this._activeSheetImpl.sheetType === Contract.SheetType.Dashboard) {
            let activeSheet = this._activeSheetImpl;
            let index = activeSheet.worksheetsImpl.findIndex((worksheetImpl) => {
                return worksheetImpl.name === sheetName;
            });
            if (index !== -1) {
                if (activeSheet.worksheetsImpl[index].hidden) {
                    throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Cannot activate hidden sheet');
                }
                return;
            }
        }
        throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.SheetNotInWorkbook, 'Sheet is not found in Workbook');
    }
}
exports.EmbeddingWorkbookImpl = EmbeddingWorkbookImpl;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Impl/VizImpl.js":
/*!**********************************************!*\
  !*** ./lib/src/EmbeddingApi/Impl/VizImpl.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const Enums_1 = __webpack_require__(/*! @tableau/api-external-contract-js/lib/src/ExternalContract/Embedding/Enums */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/Enums.js");
const api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const FirstVizSizeKnownEvent_1 = __webpack_require__(/*! ../Events/FirstVizSizeKnownEvent */ "./lib/src/EmbeddingApi/Events/FirstVizSizeKnownEvent.js");
const TabSwitchedEvent_1 = __webpack_require__(/*! ../Events/TabSwitchedEvent */ "./lib/src/EmbeddingApi/Events/TabSwitchedEvent.js");
const ToolbarStateChangedEvent_1 = __webpack_require__(/*! ../Events/ToolbarStateChangedEvent */ "./lib/src/EmbeddingApi/Events/ToolbarStateChangedEvent.js");
const EmbeddingWorkbookImpl_1 = __webpack_require__(/*! ../Impl/EmbeddingWorkbookImpl */ "./lib/src/EmbeddingApi/Impl/EmbeddingWorkbookImpl.js");
const CustomView_1 = __webpack_require__(/*! ../Models/CustomView */ "./lib/src/EmbeddingApi/Models/CustomView.js");
const VizSize_1 = __webpack_require__(/*! ../Models/VizSize */ "./lib/src/EmbeddingApi/Models/VizSize.js");
const Services_1 = __webpack_require__(/*! ../Services */ "./lib/src/EmbeddingApi/Services/index.js");
const HtmlElementHelpers_1 = __webpack_require__(/*! ../Utils/HtmlElementHelpers */ "./lib/src/EmbeddingApi/Utils/HtmlElementHelpers.js");
class VizImpl {
    constructor(_viz, _iframe, _frameUrl, _embeddingId) {
        this._viz = _viz;
        this._iframe = _iframe;
        this._frameUrl = _frameUrl;
        this._embeddingId = _embeddingId;
        this._automaticUpdatesArePaused = false;
        this._resizeEventType = 'resize';
        if (!this._iframe) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'Iframe has not been created yet');
        }
    }
    get workbookImpl() {
        return this._workbookImpl;
    }
    get iframe() {
        return this._iframe;
    }
    get embeddingId() {
        return this._embeddingId;
    }
    get exportScenariosForPdfAndPowerPoint() {
        return {
            currentSheetName: this._workbookImpl.activeSheet.name,
            exportableSheetNamesFromDashboard: this.exportableSheetNamesFromDashboard,
            exportableSheetNamesFromWorkbook: this.exportableSheetNamesFromWorkbook,
        };
    }
    get exportableSheetNamesFromDashboard() {
        const currentSheet = this._workbookImpl.activeSheet;
        if (currentSheet && currentSheet.sheetType === Contract.SheetType.Dashboard) {
            return currentSheet.getWorksheetNamesFromZones();
        }
        return [];
    }
    get exportableSheetNamesFromWorkbook() {
        const exportableSheetNames = [];
        if (this._workbookImpl) {
            for (const publishedSheetInfo of this._workbookImpl.publishedSheetsInfo) {
                exportableSheetNames.push(publishedSheetInfo.name);
            }
        }
        return exportableSheetNames;
    }
    get automaticUpdatesArePaused() {
        return this._automaticUpdatesArePaused;
    }
    // TODO: TFS 892510 TabSwitchEvent etc is resposible for updating the state
    set automaticUpdatesArePaused(isAutoUpdate) {
        this._automaticUpdatesArePaused = isAutoUpdate;
    }
    getVisualIdForSheetName(sheetName) {
        var _a, _b, _c;
        const currentSheet = this._workbookImpl.activeSheet;
        switch (currentSheet.sheetType) {
            case Contract.SheetType.Worksheet:
                if (currentSheet.name === sheetName) {
                    return currentSheet.visualId;
                }
                break;
            case Contract.SheetType.Dashboard: {
                const dashboardImpl = currentSheet;
                for (const worksheetName of dashboardImpl.getWorksheetNamesFromZones()) {
                    if (worksheetName === sheetName) {
                        return { worksheet: worksheetName, dashboard: dashboardImpl.name };
                    }
                }
                break;
            }
            case Contract.SheetType.Story: {
                const storyImpl = currentSheet;
                const containedSheet = (_a = storyImpl.activeStoryPoint) === null || _a === void 0 ? void 0 : _a.containedSheet;
                if (containedSheet && containedSheet.sheetType === Contract.SheetType.Worksheet && containedSheet.name === sheetName) {
                    // TFSID 1505602: VisualId is incomplete for worksheets within stories
                    const visualId = Object.assign({}, containedSheet.visualId);
                    visualId.dashboard = visualId.worksheet;
                    visualId.storyboard = storyImpl.name;
                    visualId.storyPointID = (_b = storyImpl.activeStoryPoint) === null || _b === void 0 ? void 0 : _b.storyPointId;
                    return visualId;
                }
                else if (containedSheet && containedSheet.sheetType === Contract.SheetType.Dashboard) {
                    const dashboard = containedSheet;
                    // @W-12986439: use worksheetImpls here, but the VisualIds are still incomplete for worksheets within dashboards within stories (TFSID 1505602)
                    for (const worksheetName of dashboard.getWorksheetNamesFromZones()) {
                        if (worksheetName === sheetName) {
                            return {
                                worksheet: worksheetName,
                                dashboard: dashboard.name,
                                storyboard: storyImpl.name,
                                storyPointID: (_c = storyImpl.activeStoryPoint) === null || _c === void 0 ? void 0 : _c.storyPointId,
                            };
                        }
                    }
                }
                break;
            }
            default:
                throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');
        }
        throw new api_shared_js_1.TableauError(Contract.SharedErrorCodes.InvalidParameter, 'sheetName parameter must belong to a worksheet within the current view');
    }
    get exportableWorksheetNames() {
        var _a;
        const currentSheet = this._workbookImpl.activeSheet;
        switch (currentSheet.sheetType) {
            case Contract.SheetType.Worksheet:
                return [currentSheet.name];
            case Contract.SheetType.Dashboard:
                return currentSheet.getWorksheetNamesFromZones();
            case Contract.SheetType.Story: {
                const containedSheet = (_a = currentSheet.activeStoryPoint) === null || _a === void 0 ? void 0 : _a.containedSheet;
                if (containedSheet && containedSheet.sheetType === Contract.SheetType.Worksheet) {
                    return [containedSheet.name];
                }
                else if (containedSheet && containedSheet.sheetType === Contract.SheetType.Dashboard) {
                    return containedSheet.getWorksheetNamesFromZones();
                }
                break;
            }
            default:
                break;
        }
        return [];
    }
    initializeViz() {
        const iframeWindow = this._iframe.contentWindow;
        if (!iframeWindow) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'Iframe has not been created yet');
        }
        try {
            this._messenger = new api_internal_contract_js_1.CrossFrameMessenger(window, iframeWindow, this._frameUrl.origin);
            // We need the notification service for the bootstrap flow.
            this._dispatcher = new api_shared_js_1.CrossFrameDispatcher(this._messenger);
            Services_1.registerInitializationEmbeddingServices(this._dispatcher, this.embeddingId);
            const initializationService = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("initialization-service" /* Initialization */);
            const vizSizeKnownUnregister = initializationService.registerHandler(api_internal_contract_js_1.NotificationId.FirstVizSizeKnown, () => true, (model) => {
                this.handleVizSizeKnownEvent(model);
                vizSizeKnownUnregister();
            });
            const vizInteractiveUnregister = initializationService.registerHandler(api_internal_contract_js_1.NotificationId.VizInteractive, () => true, (model) => {
                this.handleVizInteractiveEvent(model);
                vizInteractiveUnregister();
            });
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.ToolbarStateChanged, () => true, (model) => this.handleToolbarStateEvent(model));
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.TabSwitched, () => true, (model) => this.handleTabSwitch(model));
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.CustomViewsLoaded, () => true, (model) => this.handleCustomViews(model));
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.CustomViewRemoved, () => true, (model) => this.handleCustomViewRemoved(model));
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.CustomViewSaved, () => true, (model) => this.handleCustomViewSaved(model));
            initializationService.registerHandler(api_internal_contract_js_1.NotificationId.CustomViewSetDefault, () => true, (model) => this.handleCustomViewSetDefault(model));
            this._messenger.startListening();
        }
        catch (e) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'Unexpected error during initialization.');
        }
    }
    dispose() {
        if (this._messenger) {
            this._messenger.stopListening();
        }
        this.removeWindowResizeHandler();
    }
    getCurrentSrcAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("viz-service" /* Viz */);
        return service.getCurrentSrcAsync();
    }
    revertAllAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("ToolbarService" /* ToolbarService */);
        return service.revertAllAsync();
    }
    redoAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("ToolbarService" /* ToolbarService */);
        return service.redoAsync();
    }
    undoAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("ToolbarService" /* ToolbarService */);
        return service.undoAsync();
    }
    refreshDataAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("data-source-service" /* DataSourceService */);
        return service.refreshAsync();
    }
    pauseAutomaticUpdatesAsync() {
        if (this._automaticUpdatesArePaused) {
            return Promise.resolve();
        }
        return this.setAutoUpdateAsync(false);
    }
    resumeAutomaticUpdatesAsync() {
        if (!this._automaticUpdatesArePaused) {
            return Promise.resolve();
        }
        return this.setAutoUpdateAsync(true);
    }
    toggleAutomaticUpdatesAsync() {
        return this.setAutoUpdateAsync(this._automaticUpdatesArePaused);
    }
    exportImageAsync() {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("ToolbarService" /* ToolbarService */);
        return service.exportImageAsync();
    }
    exportCrosstabAsync(sheetName, format) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("export-service" /* Export */);
            yield service.exportCrosstabAsync(sheetName, format, this.exportableWorksheetNames, this._workbookImpl.activeSheet.sheetType);
        });
    }
    exportDataAsync(sheetName, options = api_shared_js_1.ExportHelpers.DefaultDataOptions) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("export-service" /* Export */);
        return service.exportDataAsync(this.getVisualIdForSheetName(sheetName), options);
    }
    exportPowerPointAsync(sheetNames = []) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("export-service" /* Export */);
            const exportScenarios = this.exportScenariosForPdfAndPowerPoint;
            if (sheetNames.length === 0) {
                sheetNames.push(exportScenarios.currentSheetName);
            }
            yield service.exportPowerPointAsync(sheetNames, exportScenarios);
        });
    }
    exportPDFAsync(sheetNames = [], options = api_shared_js_1.ExportHelpers.DefaultPDFOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("export-service" /* Export */);
            const exportScenarios = this.exportScenariosForPdfAndPowerPoint;
            if (sheetNames.length === 0) {
                sheetNames.push(exportScenarios.currentSheetName);
            }
            yield service.exportPDFAsync(sheetNames, options, exportScenarios);
        });
    }
    displayDialogAsync(dialogType) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("ToolbarService" /* ToolbarService */);
        switch (dialogType) {
            case Enums_1.TableauDialogType.ExportWorkbook:
                if (!this.workbookImpl.canDownloadWorkbook) {
                    throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.DownloadWorkbookNotAllowed, 'Download workbook is not allowed');
                }
                return service.displayDownloadWorkbookDialogAsync();
            case Enums_1.TableauDialogType.ExportPDF:
                return service.displayExportPdfDialogAsync();
            case Enums_1.TableauDialogType.ExportPowerPoint:
                return service.displayExportPowerpointDialogAsync();
            case Enums_1.TableauDialogType.ExportData:
                return service.displayExportDataDialogAsync();
            case Enums_1.TableauDialogType.ExportCrossTab:
                return service.displayExportCrosstabDialogAsync();
            case Enums_1.TableauDialogType.Share:
                return service.displayShareDialogAsync();
            default:
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.UnknownDialogType, 'Unknown dialog type');
        }
    }
    setAutoUpdateAsync(state) {
        const service = api_shared_js_1.ApiServiceRegistry.get(this.embeddingId).getService("ToolbarService" /* ToolbarService */);
        return service.setAutoUpdateAsync(state).then(() => {
            this._automaticUpdatesArePaused = !state;
            return;
        });
    }
    isVersionCompatible(platformVersion) {
        // Platform version will be undefined in 2021.4.
        // Return false when loading a 3.1+ library against 2021.4.
        if (!platformVersion) {
            return false;
        }
        // If our platform is less than the external library version, return false
        return api_internal_contract_js_1.VersionLessThan(api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION, platformVersion) || api_internal_contract_js_1.VersionEqualTo(api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION, platformVersion);
    }
    handleVizInteractiveEvent(bootstrapInfo) {
        // Embedding API will currently block all api calls/notifications if there is an incompatible version.
        if (!this._viz.disableVersionCheck && !this.isVersionCompatible(bootstrapInfo.platformVersion)) {
            this._messenger.stopListening();
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.IncompatibleVersionError, 'The version of the Embedding library is not compatible with the version of Tableau.' +
                ' The visualization will load, but the Embedding API methods and events are not available.');
        }
        api_shared_js_1.registerAllSharedServices(this._dispatcher, this.embeddingId);
        Services_1.registerAllEmbeddingServices(this._dispatcher, this.embeddingId);
        this._viz.initializeEvents();
        // These are the steps involved. It's critical that this is in order
        // 1. Create the workbook
        // 2. Process Custom Views
        // 3. Send FirstInteractive event
        // 4. Send CustomViewLoaded event
        this._workbookImpl = new EmbeddingWorkbookImpl_1.EmbeddingWorkbookImpl(bootstrapInfo, this.embeddingId);
        let updatedCustomViews = [];
        if (this._customViewsTemp) {
            updatedCustomViews = this._workbookImpl.processCustomViews(api_internal_contract_js_1.NotificationId.CustomViewsLoaded, this._customViewsTemp);
        }
        this._viz.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.FirstInteractive));
        if (this._customViewsTemp) {
            this.sendCustomViewEvents(Contract.EmbeddingTableauEventType.CustomViewLoaded, updatedCustomViews);
            this._customViewsTemp = null;
        }
    }
    handleVizSizeKnownEvent(model) {
        const sheetSize = api_shared_js_1.SheetUtils.getSheetSizeFromSizeConstraints(model.sheetSize);
        this._vizSize = new VizSize_1.VizSize(sheetSize, model.chromeHeight);
        const vizSizeEvent = new FirstVizSizeKnownEvent_1.FirstVizSizeKnownEvent(this._vizSize);
        this._viz.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.FirstVizSizeKnown, { detail: vizSizeEvent }));
        if (this._viz.fixedSize) {
            return;
        }
        this.refreshSize();
        this.addWindowResizeHandler();
    }
    refreshSize() {
        const { height, width } = this.calculateLayoutSize();
        if (height === this._vizSize.chromeHeight) {
            // The chromeHeight is what is calculated for any UI contained within the iframe that
            // isn't the viz (e.g. toolbar, sheet tabs). If we calculate the height to be only a
            // big as a chromeHeight, then we are probably too early (e.g. mid-fullscreen change).
            // Related to defect 570417.
            return;
        }
        this._iframe.style.height = height + 'px';
        this._iframe.style.width = width + 'px';
    }
    calculateLayoutSize() {
        const availableSize = this._viz.parentElement ? HtmlElementHelpers_1.HtmlElementHelpers.getContentSize(this._viz.parentElement) : { height: 0, width: 0 };
        const { chromeHeight, sheetSize } = this._vizSize;
        let width = 0;
        let height = 0;
        const minSize = sheetSize.minSize || { height: 0, width: 0 };
        const maxSize = sheetSize.maxSize || { height: 0, width: 0 };
        // If it's an exact size, use it. The size of the container is disregarded.
        if (sheetSize.behavior === Contract.SheetSizeBehavior.Exactly) {
            width = maxSize.width;
            height = maxSize.height + chromeHeight;
        }
        else {
            let minWidth;
            let maxWidth;
            let minHeight;
            let maxHeight;
            switch (sheetSize.behavior) {
                case Contract.SheetSizeBehavior.Range:
                    // The iframe should obey the range. As the size of the container changes,
                    // the iframe changes size if it can remain within the range
                    minWidth = minSize.width;
                    maxWidth = maxSize.width;
                    minHeight = minSize.height + chromeHeight;
                    maxHeight = maxSize.height + chromeHeight;
                    width = Math.max(minWidth, Math.min(maxWidth, availableSize.width));
                    height = Math.max(minHeight, Math.min(maxHeight, availableSize.height));
                    break;
                case Contract.SheetSizeBehavior.AtLeast:
                    // The iframe should be no smaller than the minimum. As the size of the container changes,
                    // the iframe changes size if it can remain above the minimum size.
                    minWidth = minSize.width;
                    minHeight = minSize.height + chromeHeight;
                    width = Math.max(minWidth, availableSize.width);
                    height = Math.max(minHeight, availableSize.height);
                    break;
                case Contract.SheetSizeBehavior.AtMost:
                    // The iframe should be no larger than the maximum. As the size of the container changes,
                    // the iframe changes size if it can remain below the maximum size
                    maxWidth = maxSize.width;
                    maxHeight = maxSize.height + chromeHeight;
                    width = Math.min(maxWidth, availableSize.width);
                    height = Math.min(maxHeight, availableSize.height);
                    break;
                case Contract.SheetSizeBehavior.Automatic:
                    // the iframe should fill the containing element
                    width = availableSize.width;
                    height = Math.max(availableSize.height, chromeHeight);
                    break;
                default:
                    // We should never get here. The given size behavior is not one we know about. That would be a bug
                    throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSizeBehavior, 'Unknown SheetSizeBehavior for viz: ' + sheetSize.behavior);
            }
        }
        return { height, width };
    }
    removeWindowResizeHandler() {
        if (!this._windowResizeHandler) {
            return;
        }
        window.removeEventListener(this._resizeEventType, this._windowResizeHandler);
    }
    addWindowResizeHandler() {
        if (this._windowResizeHandler) {
            return;
        }
        this._windowResizeHandler = this.refreshSize.bind(this);
        window.addEventListener(this._resizeEventType, this._windowResizeHandler);
    }
    handleToolbarStateEvent(model) {
        const toolbarStateChangedEvent = new ToolbarStateChangedEvent_1.ToolbarStateChangedEvent(model.toolbarState.canRedo, model.toolbarState.canUndo);
        this._viz.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.ToolbarStateChanged, { detail: toolbarStateChangedEvent }));
    }
    handleTabSwitch(bootstrapInfo) {
        // If we didn't receive an interactive event that initializes the workbook, then ignore the tabswitch event
        if (!this._workbookImpl) {
            return;
        }
        if (!bootstrapInfo.oldSheetName) {
            return;
        }
        const pendingTabSwitchPromise = this._workbookImpl.pendingTabSwitchPromise;
        this._workbookImpl.updateExistingActiveSheetReferences(bootstrapInfo.currWorksheetName);
        this._workbookImpl = new EmbeddingWorkbookImpl_1.EmbeddingWorkbookImpl(bootstrapInfo, this.embeddingId);
        if (pendingTabSwitchPromise) {
            pendingTabSwitchPromise.resolve(this._workbookImpl);
        }
        const tabSwitchedEvent = new TabSwitchedEvent_1.TabSwitchedEvent(bootstrapInfo.oldSheetName, bootstrapInfo.currWorksheetName);
        this._viz.dispatchEvent(new CustomEvent(Contract.EmbeddingTableauEventType.TabSwitched, { detail: tabSwitchedEvent }));
    }
    handleCustomViews(customViewsInfo) {
        // If workbook is not initialized, temporarily store the custom views info in VizImpl
        if (!this._workbookImpl) {
            this._customViewsTemp = customViewsInfo;
        }
        else {
            const updatedCustomViews = this._workbookImpl.processCustomViews(api_internal_contract_js_1.NotificationId.CustomViewsLoaded, customViewsInfo);
            const pendingShowCustomViewPromise = this._workbookImpl.pendingShowCustomViewPromise;
            if (pendingShowCustomViewPromise) {
                if (updatedCustomViews[0]) {
                    pendingShowCustomViewPromise.resolve(updatedCustomViews[0]);
                }
                else {
                    pendingShowCustomViewPromise.reject('No custom view.');
                }
                this._workbookImpl.clearPendingShowCustomViewPromise();
            }
            this.sendCustomViewEvents(Contract.EmbeddingTableauEventType.CustomViewLoaded, updatedCustomViews);
        }
    }
    handleCustomViewRemoved(customViewsInfo) {
        const updatedCustomViews = this._workbookImpl.processCustomViews(api_internal_contract_js_1.NotificationId.CustomViewRemoved, customViewsInfo);
        this.sendCustomViewEvents(Contract.EmbeddingTableauEventType.CustomViewRemoved, updatedCustomViews);
    }
    handleCustomViewSaved(customViewsInfo) {
        const updatedCustomViews = this._workbookImpl.processCustomViews(api_internal_contract_js_1.NotificationId.CustomViewSaved, customViewsInfo);
        this.sendCustomViewEvents(Contract.EmbeddingTableauEventType.CustomViewSaved, updatedCustomViews);
    }
    handleCustomViewSetDefault(customViewsInfo) {
        const updatedCustomViews = this._workbookImpl.processCustomViews(api_internal_contract_js_1.NotificationId.CustomViewSetDefault, customViewsInfo);
        this.sendCustomViewEvents(Contract.EmbeddingTableauEventType.CustomViewSetDefault, updatedCustomViews);
    }
    sendCustomViewEvents(tableauEvent, updatedCustomViews) {
        // Send an event only if there's an updated custom view
        for (let customView of updatedCustomViews) {
            if (customView) {
                const customViewEvent = { customView: new CustomView_1.CustomView(customView, this._workbookImpl) };
                this._viz.dispatchEvent(new CustomEvent(tableauEvent, { detail: customViewEvent }));
            }
        }
    }
}
exports.VizImpl = VizImpl;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/CustomView.js":
/*!***************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/CustomView.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const Workbook_1 = __webpack_require__(/*! ./Workbook */ "./lib/src/EmbeddingApi/Models/Workbook.js");
class CustomView {
    constructor(_customViewImpl, _workbookImpl) {
        this._customViewImpl = _customViewImpl;
        this._workbookImpl = _workbookImpl;
    }
    get name() {
        return this._customViewImpl.name;
    }
    set name(name) {
        this._customViewImpl.name = name;
    }
    get shared() {
        return this._customViewImpl.shared;
    }
    set shared(shared) {
        this._customViewImpl.shared = shared;
    }
    get default() {
        return this._customViewImpl.isDefault;
    }
    set default(isDefault) {
        this._customViewImpl.isDefault = isDefault;
    }
    get ownerName() {
        return this._customViewImpl.ownerName;
    }
    get url() {
        return this._customViewImpl.url;
    }
    get workbook() {
        return new Workbook_1.Workbook(this._workbookImpl);
    }
    saveAsync() {
        return this._customViewImpl.saveAsync().then((customViewImpl) => {
            return new CustomView(customViewImpl, this._workbookImpl);
        });
    }
}
exports.CustomView = CustomView;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/Dashboard.js":
/*!**************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/Dashboard.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const DashboardObject_1 = __webpack_require__(/*! ./DashboardObject */ "./lib/src/EmbeddingApi/Models/DashboardObject.js");
const Sheet_1 = __webpack_require__(/*! ./Sheet */ "./lib/src/EmbeddingApi/Models/Sheet.js");
const StoryPoint_1 = __webpack_require__(/*! ./StoryPoint */ "./lib/src/EmbeddingApi/Models/StoryPoint.js");
const Worksheet_1 = __webpack_require__(/*! ./Worksheet */ "./lib/src/EmbeddingApi/Models/Worksheet.js");
class Dashboard extends Sheet_1.Sheet {
    constructor(_dashboardImpl, workbookImpl) {
        super(_dashboardImpl, workbookImpl);
        this._dashboardImpl = _dashboardImpl;
        _dashboardImpl.initializeWithPublicInterfaces();
    }
    get objects() {
        return this._dashboardImpl.objects.map((object) => {
            return new DashboardObject_1.DashboardObject(object, this._workbookImpl);
        });
    }
    get worksheets() {
        return this._dashboardImpl.worksheetsImpl.map((object) => {
            return new Worksheet_1.Worksheet(object, this._workbookImpl);
        });
    }
    get parentStoryPoint() {
        if (this._dashboardImpl.parentStoryPoint == null) {
            // Dashboard doesn't belong to a story point. Return null.
            return null;
        }
        return new StoryPoint_1.StoryPoint(this._dashboardImpl.parentStoryPoint, this._workbookImpl);
    }
    getFiltersAsync() {
        return this._dashboardImpl.getFiltersAsync();
    }
    applyFilterAsync(fieldName, values, updateType, options) {
        return this._dashboardImpl.applyFilterAsync(fieldName, values, updateType, options);
    }
}
exports.Dashboard = Dashboard;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/DashboardObject.js":
/*!********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/DashboardObject.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const Dashboard_1 = __webpack_require__(/*! ./Dashboard */ "./lib/src/EmbeddingApi/Models/Dashboard.js");
const Worksheet_1 = __webpack_require__(/*! ./Worksheet */ "./lib/src/EmbeddingApi/Models/Worksheet.js");
/**
 * Implementation of the dashboard objects - the zones in a dashboard.
 */
class DashboardObject {
    constructor(_dashboardObjectImpl, _workbookImpl) {
        this._dashboardObjectImpl = _dashboardObjectImpl;
        this._workbookImpl = _workbookImpl;
    }
    get dashboard() {
        return new Dashboard_1.Dashboard(this._dashboardObjectImpl.dashboardImpl, this._workbookImpl);
    }
    get type() {
        return this._dashboardObjectImpl.type;
    }
    get position() {
        return this._dashboardObjectImpl.position;
    }
    get size() {
        return this._dashboardObjectImpl.size;
    }
    get worksheet() {
        if (this._dashboardObjectImpl.worksheetImpl) {
            return new Worksheet_1.Worksheet(this._dashboardObjectImpl.worksheetImpl, this._workbookImpl);
        }
        return undefined;
    }
    get name() {
        return this._dashboardObjectImpl.name;
    }
    get isFloating() {
        return this._dashboardObjectImpl.isFloating;
    }
    get isVisible() {
        return this._dashboardObjectImpl.isVisible;
    }
    get id() {
        return this._dashboardObjectImpl.id;
    }
}
exports.DashboardObject = DashboardObject;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/EmbeddingAskDataUrl.js":
/*!************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/EmbeddingAskDataUrl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const EmbeddingUrlBuilder_1 = __webpack_require__(/*! ./EmbeddingUrlBuilder */ "./lib/src/EmbeddingApi/Models/EmbeddingUrlBuilder.js");
function createAskDataUrl(src, options, embeddingId, customParams) {
    // strip params in URL, all custom params should come through 'askDataOptions', 'filters' or 'customParams'.
    const srcWithoutQueryParams = src.split('?')[0];
    let url;
    try {
        url = new URL(srcWithoutQueryParams);
        EmbeddingUrlBuilder_1.validateUrl(url);
    }
    catch (error) {
        throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InvalidUrl, error.message);
    }
    const defaultParams = createAskDataDefaultParameters(url, embeddingId);
    const builder = new EmbeddingAskDataUrlBuilder(url)
        .appendDefaultParameters(defaultParams)
        .appendUserOptions(options)
        .appendCustomParams(customParams);
    // If api auth is enabled, we don't need to redirect to the auth endpoint as part of loading the Viz.
    if (options.iframeAuth) {
        builder.setToken(options.token);
    }
    return builder.build();
}
exports.createAskDataUrl = createAskDataUrl;
function createAskDataDefaultParameters(url, embeddingId) {
    const defaultParameters = new Map();
    const internalVersion = `${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.major}.${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.minor}.${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.fix}`;
    defaultParameters.set(api_internal_contract_js_1.AskDataOptionNames.ApiInternalVersion, internalVersion);
    const externalVersion = api_shared_js_1.ApiVersion.Instance.formattedValue; // maj.min.fix (no build)
    defaultParameters.set(api_internal_contract_js_1.AskDataOptionNames.ApiExternalVersion, externalVersion);
    defaultParameters.set(api_internal_contract_js_1.AskDataOptionNames.ApiID, `embhost${embeddingId}`);
    defaultParameters.set(api_internal_contract_js_1.AskDataOptionNames.AskDataWebComponent, 'true');
    return defaultParameters;
}
class EmbeddingAskDataUrlBuilder extends EmbeddingUrlBuilder_1.EmbeddingUrlBuilder {
    constructor(_url) {
        super();
        this._url = _url;
        this._optionNames = api_internal_contract_js_1.AskDataOptionNames;
    }
    /**
     * Sanitizes parameter values before they are added to the search params.
     * @param parameterName The name of the parameter. Some parameters require special handling.
     * @param value The raw value of the parameter.
     */
    sanitizeParameterValue(parameterName, value) {
        return this.sanitizeValue(value);
    }
}
exports.EmbeddingAskDataUrlBuilder = EmbeddingAskDataUrlBuilder;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/EmbeddingUrlBuilder.js":
/*!************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/EmbeddingUrlBuilder.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.SANITIZED_VALUES = {
    YES_VALUE: 'y',
    NO_VALUE: 'n',
};
const supportedProtocols = new Set(['https:', 'http:']);
class EmbeddingUrlBuilder {
    build() {
        return this._url;
    }
    /**
     * Appends the non-empty parameters to the URL, preserving parameters that already exist.
     * @param defaultParameters The map of key/value pairs to append to the search params.
     * @returns This object, so you can chain calls.
     */
    appendDefaultParameters(defaultParameters) {
        for (const key of defaultParameters.keys()) {
            const value = defaultParameters.get(key);
            // don't overwrite any values already written, and don't add empty default values
            if (value && !this._url.searchParams.has(key)) {
                this._url.searchParams.append(key, value);
            }
        }
        return this;
    }
    /**
     * Appends the user-supplied options to the search params. Only known options will be passed
     * through. All unknown options are ignored.
     * @param options The options to set on the search params.
     * @returns This object, so you can chain calls.
     */
    appendUserOptions(options) {
        for (const key of Object.keys(options)) {
            // ignore null/unset values
            if (options[key] === null || options[key] === undefined) {
                continue;
            }
            const parameterName = this._optionNames[key];
            // only accept known parameter names
            if (!parameterName) {
                continue;
            }
            const cleanedValue = this.sanitizeParameterValue(parameterName, options[key]);
            this._url.searchParams.append(parameterName, cleanedValue);
        }
        return this;
    }
    appendCustomParams(customParams) {
        for (const customParam of customParams) {
            this._url.searchParams.set(customParam.name, customParam.value);
        }
        return this;
    }
    setToken(token) {
        if (this._token) {
            throw new Error(`The token has already been set to ${this._token}`);
        }
        if (!token) {
            return this;
        }
        this._token = token;
        // the target is everything after the origin
        const target = this._url.toString().substring(this._url.origin.length);
        // change the URL path to include the ticket entry point in vizportal
        this._url = new URL(`${this._url.origin}/vizportal/api/web/v1/auth/embed/target`);
        this._url.searchParams.append('token', token);
        this._url.searchParams.append('target', target);
        return this;
    }
    sanitizeValue(v) {
        const valueAsString = String(v);
        switch (valueAsString) {
            case 'true':
                return exports.SANITIZED_VALUES.YES_VALUE;
            case 'false':
                return exports.SANITIZED_VALUES.NO_VALUE;
            default:
                return valueAsString;
        }
    }
}
exports.EmbeddingUrlBuilder = EmbeddingUrlBuilder;
function validateUrl(url) {
    validateProtocolInUrl(url);
}
exports.validateUrl = validateUrl;
function validateProtocolInUrl(url) {
    const protocol = url.protocol;
    if (!supportedProtocols.has(protocol)) {
        throw new Error(`Invalid protocol in URL '${url}'. The protocols supported are ${Array.from(supportedProtocols).join(', ')}.`);
    }
}
function getSiteId(url) {
    const pathname = canonicalizeVizPortalRoutingHashes(new URL(url.toString())).pathname;
    const parts = pathname.split('/').filter((x) => x);
    if (parts.length === 0) {
        return '';
    }
    // check if the site root is in the t/siteName form
    // If a siteName is not present in the path, return an empty string to represent the default site.
    if (parts[0] !== 't') {
        return '';
    }
    if (parts.length < 2) {
        return '';
    }
    return parts[1];
}
exports.getSiteId = getSiteId;
/**
 * This canonicalizes any URL that contains '/#/site' or '/#/'.
 * Examples:
 * 'https://tableau.com/#/site/alpodev/views/Workbook/Sheet' would return 'https://tableau.com/t/alpodev/views/Workbook/Sheet';
 * 'https://tableau.com/#/views/Workbook/Sheet' would return 'https://tableau.com/views/Workbook/Sheet'.
 */
function canonicalizeVizPortalRoutingHashes(url) {
    let urlStr = url.toString();
    urlStr = urlStr.replace('/#/site/', '/t/').replace('/#/', '/');
    return new URL(urlStr);
}
exports.canonicalizeVizPortalRoutingHashes = canonicalizeVizPortalRoutingHashes;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/EmbeddingVizUrl.js":
/*!********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/EmbeddingVizUrl.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const EmbeddingUrlBuilder_1 = __webpack_require__(/*! ./EmbeddingUrlBuilder */ "./lib/src/EmbeddingApi/Models/EmbeddingUrlBuilder.js");
const VizUrl_1 = __webpack_require__(/*! ./VizUrl */ "./lib/src/EmbeddingApi/Models/VizUrl.js");
var EmbeddingUrlMode;
(function (EmbeddingUrlMode) {
    EmbeddingUrlMode[EmbeddingUrlMode["Viewing"] = 0] = "Viewing";
    EmbeddingUrlMode[EmbeddingUrlMode["Authoring"] = 1] = "Authoring";
})(EmbeddingUrlMode = exports.EmbeddingUrlMode || (exports.EmbeddingUrlMode = {}));
const embeddingUrlModeToVizUrlMode = new Map([
    [EmbeddingUrlMode.Viewing, VizUrl_1.VizUrlMode.Viewing],
    [EmbeddingUrlMode.Authoring, VizUrl_1.VizUrlMode.Authoring],
]);
class EmbeddingVizUrlBuilder extends EmbeddingUrlBuilder_1.EmbeddingUrlBuilder {
    constructor(_url) {
        super();
        this._url = _url;
        this._optionNames = api_internal_contract_js_1.VizOptionNames;
    }
    appendFilters(filters) {
        for (const filter of filters) {
            this._url.searchParams.append(filter.field, filter.value);
        }
        return this;
    }
    appendParams(params) {
        for (const param of params) {
            this._url.searchParams.append(param.name, param.value);
        }
        return this;
    }
    /**
     * Sanitizes parameter values before they are added to the search params.
     * @param parameterName The name of the parameter. Some parameters require special handling.
     * @param value The raw value of the parameter.
     */
    sanitizeParameterValue(parameterName, value) {
        // Some parameters need their values to be flipped (false in the property is a yes to server)
        let sanitizedValue;
        switch (parameterName) {
            case api_internal_contract_js_1.VizOptionNames.hideTabs:
                // ! here to reverse the value hideTabs = true -> tabs:n
                sanitizedValue = this.sanitizeValue(!value);
                break;
            case api_internal_contract_js_1.VizOptionNames.toolbar:
                sanitizedValue = this.sanitizeValue(value === api_external_contract_js_1.Toolbar.Hidden ? false : value);
                break;
            default:
                sanitizedValue = this.sanitizeValue(value);
                break;
        }
        return sanitizedValue;
    }
}
exports.EmbeddingVizUrlBuilder = EmbeddingVizUrlBuilder;
/**
 * This function should be the only one in api-embedding to contain any knowledge of how to
 * construct a url for vizql including what parameters can be sent and what values they can have or
 * will default to.
 *
 * NOTE-jrockwood-2021-12-02: There is also a {@link VizUrl} class and it might be confusing on the
 * difference between the two.
 *
 * VizUrl - used to parse and construct valid URLs that point to a viz in a particular mode (viewing
 * vs. authoring). It ensures that query parameters are correctly encoded, but it is ignorant of any
 * semantic meaning assigned to query (search) parameters. The plan is to move this into it's own
 * module that will be used in this code and in the VizClient core code.
 *
 * EmbeddingUrl - this class knows how to assemble query parameters specific to the embedding use
 * cases. It uses VizUrl as part of its implementation to ensure that the mode (viewing vs.
 * authoring) is correct.
 */
function createVizUrl(src, mode, vizOptions, embeddingId, filters, params, customParams) {
    if (!src) {
        throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InternalError, 'We should not have attempted to render the component without a src');
    }
    // ensure the URL is in the right mode (authoring/viewing)
    const urlMode = embeddingUrlModeToVizUrlMode.get(mode);
    if (!urlMode) {
        throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InternalError, `'${mode}' is not yet supported.`);
    }
    // strip params in URL, all custom params should come through 'vizOptions', 'filters' or 'customParams'.
    const srcWithoutQueryParams = src.split('?')[0];
    let url;
    try {
        url = new URL(srcWithoutQueryParams);
        EmbeddingUrlBuilder_1.validateUrl(url);
    }
    catch (error) {
        throw new api_shared_js_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InvalidUrl, error.message);
    }
    try {
        url = VizUrl_1.VizUrl.create(srcWithoutQueryParams).withMode(urlMode).toURL();
    }
    catch (error) {
        // Syntactically valid URLs will be accepted even if they do not meet the requirements of a VizUrl.
    }
    const defaultParams = createDefaultParameters(url, embeddingId);
    const builder = new EmbeddingVizUrlBuilder(url)
        .appendDefaultParameters(defaultParams)
        .appendUserOptions(vizOptions)
        .appendFilters(filters)
        .appendParams(params)
        .appendCustomParams(customParams);
    // If api auth is enabled, we don't need to redirect to the auth endpoint as part of loading the Viz.
    if (vizOptions.iframeAuth) {
        builder.setToken(vizOptions.token);
    }
    return builder.build();
}
exports.createVizUrl = createVizUrl;
function createDefaultParameters(url, embeddingId) {
    const defaultParameters = new Map();
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.Embed, EmbeddingUrlBuilder_1.SANITIZED_VALUES.YES_VALUE);
    // This is used to tell the viz that it is embedded and who to talk to. Ideally
    // we will use a MessageChannel after the initial load so we don't need to dispatch
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.ApiID, `embhost${embeddingId}`);
    // TFS 1287448: Fix this Public hack
    if (url.hostname === 'public.tableau.com') {
        defaultParameters.set(api_internal_contract_js_1.VizOptionNames.ShowVizHome, EmbeddingUrlBuilder_1.SANITIZED_VALUES.NO_VALUE);
    }
    const internalVersion = `${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.major}.${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.minor}.${api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION.fix}`;
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.ApiInternalVersion, internalVersion);
    const externalVersion = api_shared_js_1.ApiVersion.Instance.formattedValue; // maj.min.fix (no build)
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.ApiExternalVersion, externalVersion);
    // TODO: investigate nav values and make an enum showing acceptable values
    // used to manage sessions server-side
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.NavType, '0');
    defaultParameters.set(api_internal_contract_js_1.VizOptionNames.NavSrc, 'Opt');
    return defaultParameters;
}


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/Parameter.js":
/*!**************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/Parameter.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the Parameter contract. Calls down to the impl
 * class for almost all of the work it does.
 */
class Parameter {
    constructor(parameterImpl) {
        this.parameterImpl = parameterImpl;
    }
    get name() {
        return this.parameterImpl.name;
    }
    get currentValue() {
        return this.parameterImpl.currentValue;
    }
    get dataType() {
        return this.parameterImpl.dataType;
    }
    get allowableValues() {
        return this.parameterImpl.allowableValues;
    }
    get id() {
        return this.parameterImpl.id;
    }
    changeValueAsync(newValue) {
        return this.parameterImpl.changeValueAsync(newValue);
    }
}
exports.Parameter = Parameter;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/Sheet.js":
/*!**********************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/Sheet.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const Workbook_1 = __webpack_require__(/*! ./Workbook */ "./lib/src/EmbeddingApi/Models/Workbook.js");
class Sheet {
    constructor(_sheetImpl, _workbookImpl) {
        this._sheetImpl = _sheetImpl;
        this._workbookImpl = _workbookImpl;
    }
    get isHidden() {
        return this._sheetImpl.hidden;
    }
    get isActive() {
        return this._sheetImpl.active;
    }
    get name() {
        return this._sheetImpl.name;
    }
    get sheetType() {
        return this._sheetImpl.sheetType;
    }
    get size() {
        if (api_shared_js_1.SheetUtils.isValidSheetSize(this._sheetImpl.size)) {
            return this._sheetImpl.size;
        }
        throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.NotImplemented, 'Not implemented');
    }
    get url() {
        if (this.isHidden) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.NoUrlForHiddenWorksheet, 'No URL for hidden worksheet');
        }
        return this._sheetImpl.url;
    }
    get index() {
        return this._sheetImpl.index;
    }
    get workbook() {
        return new Workbook_1.Workbook(this._workbookImpl);
    }
    changeSizeAsync(newSize) {
        return this._sheetImpl.changeSizeAsync(newSize);
    }
}
exports.Sheet = Sheet;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/SheetInfo.js":
/*!**************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/SheetInfo.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const Workbook_1 = __webpack_require__(/*! ./Workbook */ "./lib/src/EmbeddingApi/Models/Workbook.js");
class SheetInfo {
    constructor(_sheetInfoImpl, _workbookImpl) {
        this._sheetInfoImpl = _sheetInfoImpl;
        this._workbookImpl = _workbookImpl;
    }
    get name() {
        return this._sheetInfoImpl.name;
    }
    get sheetType() {
        return this._sheetInfoImpl.sheetType;
    }
    get index() {
        if (this._sheetInfoImpl.index !== undefined) {
            return this._sheetInfoImpl.index;
        }
        throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, `index not implemented`);
    }
    get isActive() {
        if (this._sheetInfoImpl.isActive) {
            return this._sheetInfoImpl.isActive;
        }
        return false;
    }
    get isHidden() {
        if (this._sheetInfoImpl.isHidden) {
            return this._sheetInfoImpl.isHidden;
        }
        return false;
    }
    get workbook() {
        return new Workbook_1.Workbook(this._workbookImpl);
    }
    get url() {
        if (this._sheetInfoImpl.url) {
            return this._sheetInfoImpl.url;
        }
        return '';
    }
    get size() {
        if (api_shared_js_1.SheetUtils.isValidSheetSize(this._sheetInfoImpl.sheetSize)) {
            return this._sheetInfoImpl.sheetSize;
        }
        throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.NotImplemented, 'Not implemented');
    }
}
exports.SheetInfo = SheetInfo;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/Story.js":
/*!**********************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/Story.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const Sheet_1 = __webpack_require__(/*! ./Sheet */ "./lib/src/EmbeddingApi/Models/Sheet.js");
const StoryPoint_1 = __webpack_require__(/*! ./StoryPoint */ "./lib/src/EmbeddingApi/Models/StoryPoint.js");
const StoryPointInfo_1 = __webpack_require__(/*! ./StoryPointInfo */ "./lib/src/EmbeddingApi/Models/StoryPointInfo.js");
class Story extends Sheet_1.Sheet {
    constructor(_storyImpl, _workbookImpl) {
        super(_storyImpl, _workbookImpl);
        this._storyImpl = _storyImpl;
    }
    get activeStoryPoint() {
        if (!this._storyImpl.activeStoryPoint) {
            throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Active story point has not been initialized');
        }
        return new StoryPoint_1.StoryPoint(this._storyImpl.activeStoryPoint, this._workbookImpl);
    }
    get storyPointsInfo() {
        return this._storyImpl.storyPointsInfo.map((storyPointInfoImpl) => {
            return new StoryPointInfo_1.StoryPointInfo(storyPointInfoImpl, this._workbookImpl);
        });
    }
    activateNextStoryPointAsync() {
        return this._storyImpl.activateNextStoryPointAsync().then((storyPointImpl) => {
            return new StoryPoint_1.StoryPoint(storyPointImpl, this._workbookImpl);
        });
    }
    activatePreviousStoryPointAsync() {
        return this._storyImpl.activatePreviousStoryPointAsync().then((storyPointImpl) => {
            return new StoryPoint_1.StoryPoint(storyPointImpl, this._workbookImpl);
        });
    }
    activateStoryPointAsync(index) {
        return this._storyImpl.activateStoryPointAsync(index).then((storyPointImpl) => {
            return new StoryPoint_1.StoryPoint(storyPointImpl, this._workbookImpl);
        });
    }
    revertStoryPointAsync(index) {
        return this._storyImpl.revertStoryPointAsync(index).then((storyPointInfoImpl) => {
            return new StoryPointInfo_1.StoryPointInfo(storyPointInfoImpl, this._workbookImpl);
        });
    }
}
exports.Story = Story;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/StoryPoint.js":
/*!***************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/StoryPoint.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const Dashboard_1 = __webpack_require__(/*! ./Dashboard */ "./lib/src/EmbeddingApi/Models/Dashboard.js");
const Story_1 = __webpack_require__(/*! ./Story */ "./lib/src/EmbeddingApi/Models/Story.js");
const Worksheet_1 = __webpack_require__(/*! ./Worksheet */ "./lib/src/EmbeddingApi/Models/Worksheet.js");
class StoryPoint {
    constructor(_storyPointImpl, _workbookImpl) {
        this._storyPointImpl = _storyPointImpl;
        this._workbookImpl = _workbookImpl;
    }
    get index() {
        return this._storyPointImpl.index;
    }
    get caption() {
        return this._storyPointImpl.caption;
    }
    get active() {
        return this._storyPointImpl.active;
    }
    get updated() {
        return this._storyPointImpl.updated;
    }
    get containedSheet() {
        const containedSheet = this._storyPointImpl.containedSheet;
        if (!containedSheet) {
            return undefined;
        }
        switch (containedSheet.sheetType) {
            case Contract.SheetType.Worksheet: {
                return new Worksheet_1.Worksheet(containedSheet, this._workbookImpl);
            }
            case Contract.SheetType.Dashboard: {
                return new Dashboard_1.Dashboard(containedSheet, this._workbookImpl);
            }
            case Contract.SheetType.Story: {
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'A story cannot contain another story');
            }
            default: {
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Unable to initialize contained sheet');
            }
        }
    }
    get parentStory() {
        return new Story_1.Story(this._storyPointImpl.parentStory, this._workbookImpl);
    }
}
exports.StoryPoint = StoryPoint;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/StoryPointInfo.js":
/*!*******************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/StoryPointInfo.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const Story_1 = __webpack_require__(/*! ./Story */ "./lib/src/EmbeddingApi/Models/Story.js");
class StoryPointInfo {
    constructor(_storyPointInfoImpl, _workbookImpl) {
        this._storyPointInfoImpl = _storyPointInfoImpl;
        this._workbookImpl = _workbookImpl;
    }
    get index() {
        return this._storyPointInfoImpl.index;
    }
    get caption() {
        return this._storyPointInfoImpl.caption;
    }
    get active() {
        return this._storyPointInfoImpl.active;
    }
    get updated() {
        return this._storyPointInfoImpl.updated;
    }
    get parentStory() {
        return new Story_1.Story(this._storyPointInfoImpl.parentStory, this._workbookImpl);
    }
}
exports.StoryPointInfo = StoryPointInfo;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/VizSize.js":
/*!************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/VizSize.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
class VizSize {
    constructor(_sheetSize, _chromeHeight) {
        this._sheetSize = _sheetSize;
        this._chromeHeight = _chromeHeight;
    }
    get sheetSize() {
        return this._sheetSize;
    }
    get chromeHeight() {
        return this._chromeHeight;
    }
}
exports.VizSize = VizSize;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/VizUrl.js":
/*!***********************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/VizUrl.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const EmbeddingUrlBuilder_1 = __webpack_require__(/*! ./EmbeddingUrlBuilder */ "./lib/src/EmbeddingApi/Models/EmbeddingUrlBuilder.js");
/**
 * Enumerates the different modes that are represented with a URL relating to a Tableau
 * visualization.
 *
 * The names of these modes are important! They are used in the URL to indicate the mode (called
 * module in VizPortal) and are part of the VizPortal and VizClient routing schemes.
 */
exports.VizUrlMode = {
    Viewing: 'views',
    Authoring: 'authoring',
};
/**
 * Represents a URL that contains a mode of operation (viewing, authoring, etc.), along with a
 * specific workbook/sheet. Site names are also tracked. Query parameters are preserved, but this
 * class is ignorant of any semantic meaning assigned to them.
 *
 * This class is designed to be immutable. You can use the various `withX` methods to change state
 * on a cloned version.
 *
 * @example <caption>How to create an instance</caption>
 * const vizUrl = VizUrl.create('http://www.example.com/t/site/views/workbook/sheet');
 *
 * @example <caption>How to clone an instance</caption>
 * const cloned = VizUrl.create(vizUrl);
 *
 * @example <caption>How to change values</caption>
 * const vizUrl = VizUrl.create('http://www.example.com/t/site/views/workbook/sheet')
 *   .withMode(VizUrlMode.Authoring)
 *   .withWorkbookId('newWorkbook')
 *   .withSheetId('newSheet');
 * expect(vizUrl.toString()).toBe('http://www.example.com/t/site/authoring/newWorkbook/newSheet');
 *
 * TODO: TFSID 1351171: Move this out into its own module and use it in VizClient.
 */
class VizUrl {
    constructor(originalUrl, segments) {
        this._url = originalUrl;
        this._segments = segments;
    }
    get mode() {
        return this._segments.mode;
    }
    get siteId() {
        return this._segments.siteId;
    }
    get workbookId() {
        return this._segments.workbookId;
    }
    get sheetId() {
        return this._segments.sheetId;
    }
    get customView() {
        return this._segments.customView;
    }
    /**
     * Constructs a new URL representing a particular workbook/sheet in a particular mode (viewing,
     * authoring, etc.).
     * @param url An existing URL or href to parse.
     */
    static create(url) {
        const clonedUrl = EmbeddingUrlBuilder_1.canonicalizeVizPortalRoutingHashes(new URL(url.toString()));
        const segments = VizUrl._parsePathName(clonedUrl.pathname);
        clonedUrl.pathname = VizUrl._buildPathName(segments);
        return new VizUrl(clonedUrl, segments);
    }
    toURL() {
        return new URL(this.toString());
    }
    toString() {
        return this._url.toString();
    }
    /**
     * This returns a {@link VizUrl} in the requested mode, if the mode is valid.
     * @param desiredMode The desired {@link VizUrlMode} for a viz.
     * @returns A {@link VizUrl} in the desired mode; throws if the requested mode change is invalid.
     */
    withMode(desiredMode) {
        // no need to do anything if the mode isn't changing
        if (this._segments.mode === desiredMode) {
            return this;
        }
        const modeSegments = this._getSegmentsForMode(desiredMode);
        return this._makeVizUrlFromPathSegments(modeSegments);
    }
    /**
     * This returns a {@link VizUrl} with the requested custom view.
     * @param customView The desired {@link CustomViewPathPart} for a viz.
     * @returns A {@link VizUrl} with the requested view parameters, or no-op if the URL is a non-viewing URL.
     */
    withCustomView(customView) {
        var _a;
        if (customView.luid === ((_a = this.customView) === null || _a === void 0 ? void 0 : _a.luid) && customView.name === this.customView.name) {
            return this;
        }
        const modeSegments = this._getSegmentsForMode(this.mode);
        modeSegments.customView = customView;
        return this._makeVizUrlFromPathSegments(modeSegments);
    }
    /**
     * This returns a {@link VizUrl} with the requested sheet ID.
     * @param sheetId The desired {@link sheetId} for a viz.
     * @returns A {@link VizUrl} with the desired sheet ID, or no-op if the URL is already for the desired sheet.
     */
    withSheetId(sheetId) {
        if (this.sheetId === sheetId) {
            return this;
        }
        const modeSegments = Object.assign(Object.assign({}, this._segments), { sheetId: sheetId });
        return this._makeVizUrlFromPathSegments(modeSegments);
    }
    /**
     * This returns a {@link VizUrl} with the requested workbook ID.
     * @param workbookId The desired {@link workbookId} for a viz.
     * @returns A {@link VizUrl} with the desired workbook ID, or no-op if the URL is already for the desired workbook.
     */
    withWorkbookId(workbookId) {
        if (this.workbookId === workbookId) {
            return this;
        }
        const modeSegments = Object.assign(Object.assign({}, this._segments), { workbookId: workbookId });
        return this._makeVizUrlFromPathSegments(modeSegments);
    }
    _getSegmentsForMode(desiredMode) {
        if (desiredMode === exports.VizUrlMode.Authoring) {
            this._segments.customView = undefined;
        }
        return Object.assign(Object.assign({}, this._segments), { mode: desiredMode });
    }
    _makeVizUrlFromPathSegments(modeSegments) {
        const modePathName = VizUrl._buildPathName(modeSegments);
        const modeUrl = new URL(this._url.toString());
        modeUrl.pathname = modePathName;
        return new VizUrl(modeUrl, modeSegments);
    }
    /**
     * Parses the input url and returns all the parts in its pathname.
     */
    static _parsePathName(pathName) {
        var _a, _b, _c;
        // Split up the constituent parts of the path.
        // For example, 'https://devplat.tableautest.com/t/site/authoring/Workbook/Sheet'
        //   parts = ['t', 'site', 'authoring', 'Workbook', 'Sheet']
        const parts = pathName.split('/').filter((x) => x);
        if (parts.length === 0) {
            throw new Error('Invalid path name');
        }
        let siteId;
        // check if the site root is in the t/siteName form
        if (parts[0] === 't') {
            if (parts.length < 2) {
                throw new Error(`Invalid site in path '${pathName}'`);
            }
            siteId = parts[1];
            parts.splice(0, 2);
        }
        // Extract the mode.
        //   parts = ['authoring', 'Workbook', 'Sheet']
        const modePathPart = parts.shift();
        if (!modePathPart) {
            throw new Error(`Missing mode in path '${pathName}'`);
        }
        const mode = modePathPart;
        if (!Object.values(exports.VizUrlMode).includes(mode)) {
            throw new Error(`Invalid Viz Url Mode '${modePathPart}' in path '${pathName}'`);
        }
        // Extract the workbook and sheet
        //   parts = ['Workbook', 'Sheet']
        if (parts.length === 0) {
            throw new Error(`Missing workbook/sheet name in path '${pathName}'`);
        }
        const workbookId = (_a = parts.shift(), (_a !== null && _a !== void 0 ? _a : ''));
        const sheetId = parts.shift();
        if (parts.length !== 0 && parts.length !== 2) {
            throw new Error(`Invalid path name: unknown parts after sheet id: '${pathName}'`);
        }
        // Handle the possibility that the URL has a 2 part custom view consisting of an ID and a name
        let customView = undefined;
        if (parts.length === 2) {
            const viewId = (_b = parts.shift(), (_b !== null && _b !== void 0 ? _b : ''));
            const viewName = (_c = parts.shift(), (_c !== null && _c !== void 0 ? _c : ''));
            customView = { luid: viewId, name: viewName };
        }
        return { mode, siteId, workbookId, sheetId, customView };
    }
    /**
     * Builds the pathname of a URL from its parts.
     * @param segments Parts of a URL pathname.
     * @returns A string that represents a URL pathname.
     */
    static _buildPathName(segments) {
        const parts = [];
        if (segments.siteId) {
            parts.push('t');
            parts.push(segments.siteId);
        }
        parts.push(segments.mode);
        if (segments.workbookId) {
            parts.push(segments.workbookId);
        }
        if (segments.sheetId) {
            parts.push(segments.sheetId);
        }
        if (segments.customView && segments.mode === exports.VizUrlMode.Viewing) {
            parts.push(segments.customView.luid);
            parts.push(segments.customView.name);
        }
        const path = parts.join('/');
        return path;
    }
}
exports.VizUrl = VizUrl;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/Workbook.js":
/*!*************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/Workbook.js ***!
  \*************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
const Contract = __importStar(__webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js"));
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const CustomView_1 = __webpack_require__(/*! ./CustomView */ "./lib/src/EmbeddingApi/Models/CustomView.js");
const Dashboard_1 = __webpack_require__(/*! ./Dashboard */ "./lib/src/EmbeddingApi/Models/Dashboard.js");
const Parameter_1 = __webpack_require__(/*! ./Parameter */ "./lib/src/EmbeddingApi/Models/Parameter.js");
const SheetInfo_1 = __webpack_require__(/*! ./SheetInfo */ "./lib/src/EmbeddingApi/Models/SheetInfo.js");
const Story_1 = __webpack_require__(/*! ./Story */ "./lib/src/EmbeddingApi/Models/Story.js");
const Worksheet_1 = __webpack_require__(/*! ./Worksheet */ "./lib/src/EmbeddingApi/Models/Worksheet.js");
class Workbook {
    constructor(_workbookImpl) {
        this._workbookImpl = _workbookImpl;
    }
    get activeSheet() {
        switch (this._workbookImpl.activeSheet.sheetType) {
            case Contract.SheetType.Worksheet: {
                return new Worksheet_1.Worksheet(this._workbookImpl.activeSheet, this._workbookImpl);
            }
            case Contract.SheetType.Dashboard: {
                return new Dashboard_1.Dashboard(this._workbookImpl.activeSheet, this._workbookImpl);
            }
            case Contract.SheetType.Story: {
                return new Story_1.Story(this._workbookImpl.activeSheet, this._workbookImpl);
            }
            default: {
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, 'Unable to initialize ActiveSheet');
            }
        }
    }
    get publishedSheetsInfo() {
        return this._workbookImpl.publishedSheetsInfo.map((sheetInfoImpl) => {
            return new SheetInfo_1.SheetInfo(sheetInfoImpl, this._workbookImpl);
        });
    }
    get name() {
        return this._workbookImpl.name;
    }
    get activeCustomView() {
        if (this._workbookImpl.activeCustomView) {
            return new CustomView_1.CustomView(this._workbookImpl.activeCustomView, this._workbookImpl);
        }
        else {
            return undefined;
        }
    }
    activateSheetAsync(sheetNameOrIndex) {
        return this._workbookImpl.activateSheetAsync(sheetNameOrIndex).then((workbookImpl) => {
            if (this._workbookImpl !== workbookImpl) {
                this._workbookImpl = workbookImpl;
            }
            return this.activeSheet;
        });
    }
    revertAllAsync() {
        return this._workbookImpl.revertAllAsync();
    }
    getCustomViewsAsync() {
        return this._workbookImpl.getCustomViewsAsync().then((customViewsImpl) => {
            return customViewsImpl.map((customViewImpl) => {
                return new CustomView_1.CustomView(customViewImpl, this._workbookImpl);
            });
        });
    }
    showCustomViewAsync(customViewName) {
        return this._workbookImpl.showCustomViewAsync(customViewName).then((customViewImpl) => {
            return new CustomView_1.CustomView(customViewImpl, this._workbookImpl);
        });
    }
    removeCustomViewAsync(customViewName) {
        return this._workbookImpl.removeCustomViewAsync(customViewName).then((customViewImpl) => {
            return new CustomView_1.CustomView(customViewImpl, this._workbookImpl);
        });
    }
    saveCustomViewAsync(customViewName) {
        return this._workbookImpl.saveCustomViewAsync(customViewName).then((customViewImpl) => {
            return new CustomView_1.CustomView(customViewImpl, this._workbookImpl);
        });
    }
    setActiveCustomViewAsDefaultAsync() {
        return this._workbookImpl.setActiveCustomViewAsDefaultAsync();
    }
    getParametersAsync() {
        return this._workbookImpl.getParametersAsync().then((parametersImpl) => {
            return parametersImpl.map((parameterImpl) => {
                return new Parameter_1.Parameter(parameterImpl);
            });
        });
    }
    changeParameterValueAsync(name, value) {
        return this._workbookImpl.changeParameterValueAsync(name, value).then((parameterImpl) => {
            if (parameterImpl) {
                return new Parameter_1.Parameter(parameterImpl);
            }
            else {
                throw new api_shared_js_1.TableauError(Contract.EmbeddingErrorCodes.InvalidParameter, `Invalid parameter:  ${name}`);
            }
        });
    }
}
exports.Workbook = Workbook;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Models/Worksheet.js":
/*!**************************************************!*\
  !*** ./lib/src/EmbeddingApi/Models/Worksheet.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const Dashboard_1 = __webpack_require__(/*! ./Dashboard */ "./lib/src/EmbeddingApi/Models/Dashboard.js");
const Sheet_1 = __webpack_require__(/*! ./Sheet */ "./lib/src/EmbeddingApi/Models/Sheet.js");
const StoryPoint_1 = __webpack_require__(/*! ./StoryPoint */ "./lib/src/EmbeddingApi/Models/StoryPoint.js");
class Worksheet extends Sheet_1.Sheet {
    constructor(_worksheetImpl, _workbookImpl) {
        super(_worksheetImpl, _workbookImpl);
        this._worksheetImpl = _worksheetImpl;
    }
    get parentDashboard() {
        if (this._worksheetImpl.parentDashboard == null) {
            // Worksheet doesn't belong to a dashboard. Return null.
            return null;
        }
        return new Dashboard_1.Dashboard(this._worksheetImpl.parentDashboard, this._workbookImpl);
    }
    get parentStoryPoint() {
        if (this._worksheetImpl.parentStoryPoint == null) {
            // Worksheet doesn't belong to a story point. Return null.
            return null;
        }
        return new StoryPoint_1.StoryPoint(this._worksheetImpl.parentStoryPoint, this._workbookImpl);
    }
    getDataSourcesAsync() {
        return this._worksheetImpl.getDataSourcesAsync();
    }
    getSummaryDataAsync(options) {
        return this._worksheetImpl.getSummaryDataAsync(options);
    }
    getSummaryDataReaderAsync(pageRowCount, options) {
        return this._worksheetImpl.getSummaryDataReaderAsync(pageRowCount, options);
    }
    getSummaryColumnsInfoAsync() {
        return this._worksheetImpl.getSummaryColumnsInfoAsync();
    }
    getUnderlyingDataAsync(options) {
        console.warn('Worksheet.getUnderlyingDataAsync is deprecated. Please use ' +
            'Worksheet.getUnderlyingTablesAsync and Worksheet.getUnderlyingTableDataAsync');
        return this._worksheetImpl.getUnderlyingDataAsync(options);
    }
    getUnderlyingTablesAsync() {
        return this._worksheetImpl.getUnderlyingTablesAsync();
    }
    getUnderlyingTableDataAsync(logicalTableId, options) {
        return this._worksheetImpl.getUnderlyingTableDataAsync(logicalTableId, options);
    }
    getUnderlyingTableDataReaderAsync(logicalTableId, pageRowCount, options) {
        return this._worksheetImpl.getUnderlyingTableDataReaderAsync(logicalTableId, pageRowCount, options);
    }
    getFiltersAsync() {
        return this._worksheetImpl.getFiltersAsync();
    }
    applyFilterAsync(fieldName, values, updateType, options) {
        return this._worksheetImpl.applyFilterAsync(fieldName, values, updateType, options);
    }
    applyRangeFilterAsync(fieldName, filterOptions) {
        return this._worksheetImpl.applyRangeFilterAsync(fieldName, filterOptions);
    }
    clearFilterAsync(fieldName) {
        return this._worksheetImpl.clearFilterAsync(fieldName);
    }
    applyRelativeDateFilterAsync(fieldName, options) {
        return this._worksheetImpl.applyRelativeDateFilterAsync(fieldName, options);
    }
    applyHierarchicalFilterAsync(fieldName, values, updateType, options) {
        return this._worksheetImpl.applyHierarchicalFilterAsync(fieldName, values, updateType, options);
    }
    clearSelectedMarksAsync() {
        return this._worksheetImpl.clearSelectedMarksAsync();
    }
    getSelectedMarksAsync() {
        return this._worksheetImpl.getSelectedMarksAsync();
    }
    annotateMarkAsync(mark, annotationText) {
        return this._worksheetImpl.annotateMarkAsync(mark, annotationText);
    }
    getAnnotationsAsync() {
        return this._worksheetImpl.getAnnotationsAsync();
    }
    removeAnnotationAsync(annotation) {
        return this._worksheetImpl.removeAnnotationAsync(annotation);
    }
    selectMarksByValueAsync(selections, selectionUpdateType) {
        return this._worksheetImpl.selectMarksByValueAsync(selections, selectionUpdateType);
    }
    appendContextMenuAsync(targetMenu, config) {
        return this._worksheetImpl.appendContextMenuAsync(targetMenu, config);
    }
    removeContextMenuAsync(targetMenu, menuItemId) {
        return this._worksheetImpl.removeContextMenuAsync(targetMenu, menuItemId);
    }
    executeContextMenuAsync(targetMenu, menuItemId) {
        return this._worksheetImpl.executeContextMenuAsync(targetMenu, menuItemId);
    }
    renameContextMenuAsync(targetMenu, menuHeader, menuDescription) {
        return this._worksheetImpl.renameContextMenuAsync(targetMenu, menuHeader, menuDescription);
    }
}
exports.Worksheet = Worksheet;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Services/Impl/InitializationServiceImpl.js":
/*!*************************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Services/Impl/InitializationServiceImpl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
class InitializationServiceImpl extends api_shared_js_1.NotificationServiceImplBase {
    get serviceName() {
        return "initialization-service" /* Initialization */;
    }
}
exports.InitializationServiceImpl = InitializationServiceImpl;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Services/Impl/ToolbarServiceImpl.js":
/*!******************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Services/Impl/ToolbarServiceImpl.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
class ToolbarServiceImpl extends api_shared_js_1.ServiceImplBase {
    get serviceName() {
        return "ToolbarService" /* ToolbarService */;
    }
    revertAllAsync() {
        const verb = api_internal_contract_js_1.VerbId.RevertWorkbook;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'revertAllAsync',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    redoAsync() {
        const verb = api_internal_contract_js_1.VerbId.Redo;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'redoAsync',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    undoAsync() {
        const verb = api_internal_contract_js_1.VerbId.Undo;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'undoAsync',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    exportImageAsync() {
        const verb = api_internal_contract_js_1.VerbId.ExportImage;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'exportImageAsync',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    setAutoUpdateAsync(state) {
        const verb = api_internal_contract_js_1.VerbId.SetAutoUpdate;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'setAutoUpdateAsync',
            [api_internal_contract_js_1.ParameterId.State]: state,
        };
        return this.execute(verb, parameters).then(() => {
            return;
        });
    }
    displayDownloadWorkbookDialogAsync() {
        const verb = api_internal_contract_js_1.VerbId.DownloadWorkbook;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'displayDialogAsync(Workbook)',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    displayExportPdfDialogAsync() {
        const verb = api_internal_contract_js_1.VerbId.ExportPdf;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'displayDialogAsync(ExportPDF)',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    displayExportPowerpointDialogAsync() {
        const verb = api_internal_contract_js_1.VerbId.ExportPowerpoint;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'displayDialogAsync(ExportPowerPoint)',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    displayExportDataDialogAsync() {
        const verb = api_internal_contract_js_1.VerbId.ExportData;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'displayDialogAsync(ExportData)',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    displayExportCrosstabDialogAsync() {
        const verb = api_internal_contract_js_1.VerbId.ExportCrosstab;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'displayDialogAsync(ExportCrossTab)',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
    displayShareDialogAsync() {
        const verb = api_internal_contract_js_1.VerbId.Share;
        const parameters = {
            [api_internal_contract_js_1.ParameterId.FunctionName]: 'displayDialogAsync(Share)',
        };
        return this.execute(verb, parameters).then((response) => {
            return;
        });
    }
}
exports.ToolbarServiceImpl = ToolbarServiceImpl;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Services/RegisterAllEmbeddingServices.js":
/*!***********************************************************************!*\
  !*** ./lib/src/EmbeddingApi/Services/RegisterAllEmbeddingServices.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const InitializationServiceImpl_1 = __webpack_require__(/*! ./Impl/InitializationServiceImpl */ "./lib/src/EmbeddingApi/Services/Impl/InitializationServiceImpl.js");
const ToolbarServiceImpl_1 = __webpack_require__(/*! ./Impl/ToolbarServiceImpl */ "./lib/src/EmbeddingApi/Services/Impl/ToolbarServiceImpl.js");
function registerAllEmbeddingServices(dispatcher, registryId) {
    const registry = api_shared_js_1.ApiServiceRegistry.get(registryId);
    registry.registerService(new api_shared_js_1.ClientInfoServiceImpl(dispatcher, registryId));
    registry.registerService(new api_shared_js_1.SizeServiceImpl(dispatcher, registryId));
    registry.registerService(new api_shared_js_1.StoryActivationServiceImpl(dispatcher, registryId));
    registry.registerService(new ToolbarServiceImpl_1.ToolbarServiceImpl(dispatcher, registryId));
}
exports.registerAllEmbeddingServices = registerAllEmbeddingServices;
function registerInitializationEmbeddingServices(dispatcher, registryId) {
    api_shared_js_1.ApiServiceRegistry.get(registryId).registerService(new InitializationServiceImpl_1.InitializationServiceImpl(dispatcher));
}
exports.registerInitializationEmbeddingServices = registerInitializationEmbeddingServices;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Services/index.js":
/*!************************************************!*\
  !*** ./lib/src/EmbeddingApi/Services/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var RegisterAllEmbeddingServices_1 = __webpack_require__(/*! ./RegisterAllEmbeddingServices */ "./lib/src/EmbeddingApi/Services/RegisterAllEmbeddingServices.js");
exports.registerAllEmbeddingServices = RegisterAllEmbeddingServices_1.registerAllEmbeddingServices;
exports.registerInitializationEmbeddingServices = RegisterAllEmbeddingServices_1.registerInitializationEmbeddingServices;


/***/ }),

/***/ "./lib/src/EmbeddingApi/Utils/HtmlElementHelpers.js":
/*!**********************************************************!*\
  !*** ./lib/src/EmbeddingApi/Utils/HtmlElementHelpers.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Helper methods for {@link HTMLElement}.
 *
 * @class HtmlElementHelpers
 */
class HtmlElementHelpers {
}
exports.HtmlElementHelpers = HtmlElementHelpers;
/**
 * Calculates the size of element's content area, which is the area that you'd expect a
 * child element to occupy to fill the available space (the area after padding and borders
 * are subtracted out). This is equivalent in behavior to jQuery's width() and height()
 * functions. See {@link http://api.jquery.com/width/}.
 *
 * @static
 * @param {HTMLElement} element
 * @see workgroup\vqlweb\scriptsharp\src\ApiShared\Internal\Utility.cs
 */
HtmlElementHelpers.getContentSize = (element) => {
    const style = window.getComputedStyle(element);
    const paddingLeft = parseInt(style.paddingLeft, 10) || 0;
    const paddingTop = parseInt(style.paddingTop, 10) || 0;
    const paddingRight = parseInt(style.paddingRight, 10) || 0;
    const paddingBottom = parseInt(style.paddingBottom, 10) || 0;
    // clientWidth/Height includes padding, but excludes margin and borders and scrollbars,
    // but we also want padding excluded.
    const width = element.clientWidth - Math.round(paddingLeft + paddingRight);
    const height = element.clientHeight - Math.round(paddingTop + paddingBottom);
    return { width, height };
};


/***/ }),

/***/ "./lib/src/EmbeddingApi/Utils/PromiseQueue.js":
/*!****************************************************!*\
  !*** ./lib/src/EmbeddingApi/Utils/PromiseQueue.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * A custom promise queue that serializes execution of multiple promises.
 *
 * @export
 * @class PromiseQueue
 */
class PromiseQueue {
    /**
     * Creates an instance of PromiseQueue.
     */
    constructor() {
        this.queue = [];
        this.pending = 0;
        this.concurrency = 1;
    }
    /**
     * Add a function that returns a promise to the queue.
     *
     * @template T
     * @param {PromiseFactory<T>} func
     * @return {*}  {Promise<T>}
     * @memberof PromiseQueue
     */
    add(func) {
        const promise = new Promise((resolve, reject) => {
            this.queue.push(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const result = yield func();
                    resolve(result);
                }
                catch (error) {
                    reject(error);
                }
                finally {
                    this.pending--;
                    this.poll();
                }
            }));
        });
        return promise;
    }
    poll() {
        if (this.pending < this.concurrency && this.queue.length > 0) {
            const queueJob = this.queue.shift();
            this.pending++;
            queueJob();
        }
    }
    size() {
        return this.queue.length;
    }
}
exports.PromiseQueue = PromiseQueue;


/***/ }),

/***/ "./lib/src/EmbeddingApi/WebComponentManager.js":
/*!*****************************************************!*\
  !*** ./lib/src/EmbeddingApi/WebComponentManager.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
const PromiseQueue_1 = __webpack_require__(/*! ./Utils/PromiseQueue */ "./lib/src/EmbeddingApi/Utils/PromiseQueue.js");
class WebComponentManager {
    static registerWebComponent(webComponent) {
        const assignedId = this.embeddingIndex;
        this.webComponents.set(assignedId, webComponent);
        this.embeddingIndex++;
        return assignedId;
    }
    static unregisterWebComponent(embeddingIndex) {
        this.webComponents.delete(embeddingIndex);
    }
    // Methods below only used for testing
    static getWebComponents() {
        const webComponentsCloned = new Map();
        // a shallow copy is good enough
        this.webComponents.forEach((webComponent, embeddingIndex) => {
            webComponentsCloned.set(embeddingIndex, webComponent);
        });
        return webComponentsCloned;
    }
    static synchronizeRender(func) {
        const promise = this.queue.add(func);
        this.queue.poll();
        return promise;
    }
    static clear() {
        this.webComponents.clear();
    }
}
exports.WebComponentManager = WebComponentManager;
// This contains a static counter & a map that keeps track of the webComponents embedded.
WebComponentManager.embeddingIndex = 0;
WebComponentManager.webComponents = new Map();
WebComponentManager.queue = new PromiseQueue_1.PromiseQueue();


/***/ }),

/***/ "../api-external-contract-js/lib/src/EmbeddingApiExternalContract.js":
/*!***************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/EmbeddingApiExternalContract.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// This file re-exports everything which is part of the extensions api public interface
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
__export(__webpack_require__(/*! ./ExternalContract/Embedding/AskDataInterfaces */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/AskDataInterfaces.js"));
var Enums_1 = __webpack_require__(/*! ./ExternalContract/Embedding/Enums */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/Enums.js");
exports.ApiMenuType = Enums_1.ApiMenuType;
exports.CrosstabFileFormat = Enums_1.CrosstabFileFormat;
exports.DeviceType = Enums_1.DeviceType;
exports.EmbeddingErrorCodes = Enums_1.EmbeddingErrorCodes;
exports.PrintOrientation = Enums_1.PrintOrientation;
exports.PrintPageSize = Enums_1.PrintPageSize;
exports.PrintScaling = Enums_1.PrintScaling;
exports.SheetSizeBehavior = Enums_1.SheetSizeBehavior;
exports.TableauDialogType = Enums_1.TableauDialogType;
exports.EmbeddingTableauEventType = Enums_1.TableauEventType;
exports.Toolbar = Enums_1.Toolbar;
__export(__webpack_require__(/*! ./ExternalContract/Embedding/VizInterfaces */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/VizInterfaces.js"));
__export(__webpack_require__(/*! ./ExternalContract/Embedding/WebComponentInterfaces */ "../api-external-contract-js/lib/src/ExternalContract/Embedding/WebComponentInterfaces.js"));
__export(__webpack_require__(/*! ./SharedApiExternalContract */ "../api-external-contract-js/lib/src/SharedApiExternalContract.js"));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExtensionsApiExternalContract.js":
/*!****************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExtensionsApiExternalContract.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// This file re-exports everything which is part of the extensions api public interface
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Tableau_1 = __webpack_require__(/*! ./ExternalContract/Extensions/Namespaces/Tableau */ "../api-external-contract-js/lib/src/ExternalContract/Extensions/Namespaces/Tableau.js");
exports.ErrorCodes = Tableau_1.ErrorCodes;
exports.ExtensionContext = Tableau_1.ExtensionContext;
exports.ExtensionMode = Tableau_1.ExtensionMode;
exports.TableauEventType = Tableau_1.TableauEventType;
exports.VizImageEncodingType = Tableau_1.VizImageEncodingType;
exports.VizImagePaletteType = Tableau_1.VizImagePaletteType;
exports.VizImageSizeSettingAlignmentType = Tableau_1.VizImageSizeSettingAlignmentType;
exports.VizImageSizeSettingType = Tableau_1.VizImageSizeSettingType;
exports.VizImageSortDirectionType = Tableau_1.VizImageSortDirectionType;
__export(__webpack_require__(/*! ./SharedApiExternalContract */ "../api-external-contract-js/lib/src/SharedApiExternalContract.js"));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract.js":
/*!***************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/**
 * This is your main. This is where you re-export everything you want to be publicly available.
 *
 * The build enforces that the file has the same name as the global variable that is exported.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
__export(__webpack_require__(/*! ./EmbeddingApiExternalContract */ "../api-external-contract-js/lib/src/EmbeddingApiExternalContract.js"));
__export(__webpack_require__(/*! ./ExtensionsApiExternalContract */ "../api-external-contract-js/lib/src/ExtensionsApiExternalContract.js"));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/AskDataInterfaces.js":
/*!*******************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/AskDataInterfaces.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * The names of the string constants you can use as HTML attributes for the <tableau-ask-data> web component.
 * @ignore
 */
var AskDataAttributes;
(function (AskDataAttributes) {
    AskDataAttributes["Origin"] = "origin";
    AskDataAttributes["ShowEmbed"] = "show-embed";
    AskDataAttributes["ShowPin"] = "show-pin";
    AskDataAttributes["ShowSave"] = "show-save";
    AskDataAttributes["ShowShare"] = "show-share";
})(AskDataAttributes = exports.AskDataAttributes || (exports.AskDataAttributes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/Enums.js":
/*!*******************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/Enums.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


// All enum values made available to Embedding developers.
// Enums should be kept in alphabetical order.
// Most of them should match an enum on the server defined at
// workgroup/vqlweb/scriptsharp/src/ApiShared/PublicEnums.cs#L398:17
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Crosstab file formats available to use with {@link Viz.exportCrosstabAsync}
 */
var CrosstabFileFormat;
(function (CrosstabFileFormat) {
    CrosstabFileFormat["CSV"] = "csv";
    CrosstabFileFormat["Excel"] = "xlsx";
})(CrosstabFileFormat = exports.CrosstabFileFormat || (exports.CrosstabFileFormat = {}));
/**
 * Device types available to use with {@link Viz.device}
 */
var DeviceType;
(function (DeviceType) {
    DeviceType["Default"] = "default";
    DeviceType["Desktop"] = "desktop";
    DeviceType["Tablet"] = "tablet";
    DeviceType["Phone"] = "phone";
})(DeviceType = exports.DeviceType || (exports.DeviceType = {}));
/**
 * All error codes used by the Embedding API.
 */
var EmbeddingErrorCodes;
(function (EmbeddingErrorCodes) {
    /**
     * Raised when a request to the auth endpoint fails.
     */
    EmbeddingErrorCodes["AuthFailed"] = "auth-failed";
    /**
     * The browser is not capable of supporting the Tableau Embedding API
     */
    EmbeddingErrorCodes["BrowserNotCapable"] = "browser-not-capable";
    /**
     * The permissions on a workbook or a view do not allow downloading the workbook.
     */
    EmbeddingErrorCodes["DownloadWorkbookNotAllowed"] = "download-workbook-not-allowed";
    /**
     * Thrown when an error occurs while attempting to perform a filter operation.
     */
    EmbeddingErrorCodes["FilterCannotBePerformed"] = "filter-cannot-be-performed";
    /**
     * Thrown when attempting to switch to a sheet by index that does not exist in the workbook.
     */
    EmbeddingErrorCodes["IndexOutOfRange"] = "index-out-of-range";
    /**
     * Thrown when an error occurs within the Tableau Embedding API. Contact Tableau Support.
     */
    EmbeddingErrorCodes["InternalError"] = "internal-error";
    /**
     * An operation was attempted on a custom view that does not exist.
     */
    EmbeddingErrorCodes["InvalidCustomViewName"] = "invalid-custom-view-name";
    /**
     * An invalid date was specified in a method that required a date parameter.
     */
    EmbeddingErrorCodes["InvalidDateParameter"] = "invalid-date-parameter";
    /**
     * Either a filter operation was attempted on a field that does not exist in the data source, or the value supplied
     * in the filter operation is the wrong data type or format.
     */
    EmbeddingErrorCodes["invalidFilterFieldNameOrValue"] = "invalid-filter-field-name";
    /**
     * A parameter is not the correct data type or format. The name of the parameter is specified in the Error.message
     * field.
     */
    EmbeddingErrorCodes["InvalidParameter"] = "invalid-parameter";
    /**
     * A negative size was specified or the maxSize value is less than minSize in Sheet.changeSizeAsync().
     */
    EmbeddingErrorCodes["InvalidSize"] = "invalid-size";
    /**
     * A behavior value was found that is not included in the SheetSizeBehavior enum.
     */
    EmbeddingErrorCodes["InvalidSizeBehavior"] = "invalid-size-behavior";
    /**
     * A behavior other than SheetSizeBehavior.Automatic was specified in Sheet.changeSizeAsync() when the sheet is a
     * Worksheet instance.
     */
    EmbeddingErrorCodes["InvalidSizeBehaviorOnWorksheet"] = "invalid-size-behavior-on-worksheet";
    /**
     * The URL specified in the Viz class constructor is not valid.
     */
    EmbeddingErrorCodes["InvalidUrl"] = "invalid-url";
    /**
     * The maxSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.AtMost.
     */
    EmbeddingErrorCodes["MissingMaxSize"] = "missing-max-size";
    /**
     * The minSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.AtLeast.
     */
    EmbeddingErrorCodes["MissingMinSize"] = "missing-min-size";
    /**
     * The minSize or maxSize field is missing in Sheet.changeSizeAsync() when specifying SheetSizeBehavior.Range.
     */
    EmbeddingErrorCodes["MissingMinMaxSize"] = "missing-min-max-size";
    /**
     * Can occur if the embedding app interacts with a parameter that has been removed from the worksheet.
     */
    EmbeddingErrorCodes["MissingParameter"] = "missing-parameter";
    /**
     * The rangeN field is missing for a relative date filter of type LASTN or NEXTN.
     */
    EmbeddingErrorCodes["MissingRangeNForRelativeDateFilters"] = "missing-range-n-for-relative-date-filters";
    /**
     * An attempt was made to access Sheet.getUrl() on a hidden sheet. Hidden sheets do not have URLs.
     */
    EmbeddingErrorCodes["NoUrlForHiddenWorksheet"] = "no-url-for-hidden-worksheet";
    /**
     * One or both of the parentElement or the URL parameters is not specified in the Viz constructor.
     */
    EmbeddingErrorCodes["NoUrlOrParentElementNotFound"] = "no-url-or-parent-element-not-found";
    /**
     * An operation was attempted on a sheet that is not active or embedded within the active dashboard.
     */
    EmbeddingErrorCodes["NotActiveSheet"] = "not-active-sheet";
    /**
     * A required parameter was not specified, null, or an empty string/array.
     */
    EmbeddingErrorCodes["NullOrEmptyParameter"] = "null-or-empty-parameter";
    /**
     * An operation was attempted on a sheet that does not exist in the workbook.
     */
    EmbeddingErrorCodes["SheetNotInWorkbook"] = "sheet-not-in-workbook";
    /**
     * An operation is performed on a CustomView object that is no longer valid (it has been removed).
     */
    EmbeddingErrorCodes["StaleDataReference"] = "stale-data-reference";
    /**
     * Unknown error triggered during the auth flow.
     */
    EmbeddingErrorCodes["UnknownAuthError"] = "unknown-auth-error";
    /**
     * An unknown event name was specified in the call to Viz.addEventListener or Viz.removeEventListener.
     */
    EmbeddingErrorCodes["UnsupportedEventName"] = "unsupported-event-name";
    /**
     * A Viz object has already been created as a child of the parentElement specified in the Viz constructor.
     */
    EmbeddingErrorCodes["VizAlreadyInManager"] = "viz-already-in-manager";
    /**
     * Function is not supported in the embedding api.
     */
    EmbeddingErrorCodes["ImplementationError"] = "wrong-implementation";
    /**
     * @NotImplemented
     */
    EmbeddingErrorCodes["NotImplemented"] = "not-implemented";
    /**
     * Unknown error during event initialization
     */
    EmbeddingErrorCodes["EventInitializationError"] = "event-initialization-error";
    /**
     * Version of the embedding api not supported by the version of tableau
     */
    EmbeddingErrorCodes["IncompatibleVersionError"] = "incompatible-version-error";
    /**
     * Unknown {@link TableauDialogType} passed in to Viz.displayDialogAsync.
     */
    EmbeddingErrorCodes["UnknownDialogType"] = "unknown-dialog-type";
    /**
     * Can occur if the API interacts with a filter that has been removed from the worksheet.
     * Can also occurs if a {@link FilterType} has not been implemented.
     */
    EmbeddingErrorCodes["FilterMissingOrNotImplemented"] = "filter-missing-not-implemented";
    /**
     * Can occur if story point ids no longer match.
     */
    EmbeddingErrorCodes["StoryPointIdMismatch"] = "storypoint-id-mismatch";
})(EmbeddingErrorCodes = exports.EmbeddingErrorCodes || (exports.EmbeddingErrorCodes = {}));
/**
 * Formats available to use with displayStaticImage in @VizInterfaces
 */
var FileFormats;
(function (FileFormats) {
    FileFormats["PDF"] = "pdf";
    FileFormats["PNG"] = "png";
})(FileFormats = exports.FileFormats || (exports.FileFormats = {}));
var PrintOrientation;
(function (PrintOrientation) {
    PrintOrientation["Portrait"] = "portrait";
    PrintOrientation["Landscape"] = "landscape";
})(PrintOrientation = exports.PrintOrientation || (exports.PrintOrientation = {}));
var PrintPageSize;
(function (PrintPageSize) {
    PrintPageSize["Letter"] = "letter";
    PrintPageSize["Legal"] = "legal";
    PrintPageSize["Note"] = "note";
    PrintPageSize["Folio"] = "folio";
    PrintPageSize["Tabloid"] = "tabloid";
    PrintPageSize["Ledger"] = "ledger";
    PrintPageSize["Statement"] = "statement";
    PrintPageSize["Executive"] = "executive";
    PrintPageSize["A3"] = "A3";
    PrintPageSize["A4"] = "A4";
    PrintPageSize["A5"] = "A5";
    PrintPageSize["B4"] = "B4";
    PrintPageSize["B5"] = "B5";
    PrintPageSize["Quarto"] = "quarto";
    PrintPageSize["Unspecified"] = "unspecified";
})(PrintPageSize = exports.PrintPageSize || (exports.PrintPageSize = {}));
var PrintScaling;
(function (PrintScaling) {
    PrintScaling["Automatic"] = "automatic";
    PrintScaling["Perc25"] = "25%";
    PrintScaling["Perc50"] = "50%";
    PrintScaling["Perc60"] = "60%";
    PrintScaling["Perc75"] = "75%";
    PrintScaling["Perc80"] = "80%";
    PrintScaling["Perc90"] = "90%";
    PrintScaling["Perc100"] = "100%";
    PrintScaling["Perc200"] = "200%";
    PrintScaling["Perc400"] = "400%";
    PrintScaling["AtMost1PageHigh"] = "at-most-1-page-high";
    PrintScaling["AtMost2PagesHigh"] = "at-most-2-pages-high";
    PrintScaling["AtMost1PageWide"] = "at-most-1-page-wide";
    PrintScaling["AtMost2PagesWide"] = "at-most-2-pages-wide";
})(PrintScaling = exports.PrintScaling || (exports.PrintScaling = {}));
var RevertVizSelection;
(function (RevertVizSelection) {
    RevertVizSelection["All"] = "all";
    RevertVizSelection["Axes"] = "axes";
    RevertVizSelection["Filters"] = "filters";
    RevertVizSelection["Sorts"] = "sorts";
    RevertVizSelection["Shelves"] = "shelves";
})(RevertVizSelection = exports.RevertVizSelection || (exports.RevertVizSelection = {}));
var ToolbarButtons;
(function (ToolbarButtons) {
    ToolbarButtons["Alerts"] = "alerts";
    ToolbarButtons["AskData"] = "askData";
    ToolbarButtons["CustomViews"] = "customViews";
    ToolbarButtons["DataDetails"] = "dataDetails";
    ToolbarButtons["Share"] = "share";
    ToolbarButtons["Subscribe"] = "subscribe";
})(ToolbarButtons = exports.ToolbarButtons || (exports.ToolbarButtons = {}));
var Toolbar;
(function (Toolbar) {
    Toolbar["Top"] = "top";
    Toolbar["Bottom"] = "bottom";
    Toolbar["Hidden"] = "hidden";
})(Toolbar = exports.Toolbar || (exports.Toolbar = {}));
var SheetSizeBehavior;
(function (SheetSizeBehavior) {
    SheetSizeBehavior["Automatic"] = "automatic";
    SheetSizeBehavior["Exactly"] = "exactly";
    SheetSizeBehavior["Range"] = "range";
    SheetSizeBehavior["AtLeast"] = "atleast";
    SheetSizeBehavior["AtMost"] = "atmost";
})(SheetSizeBehavior = exports.SheetSizeBehavior || (exports.SheetSizeBehavior = {}));
/**
 * Be careful when adding new event types. Extensions and embedding follow two different patterns on how events are named.
 * Events should be all lower case and without hyphens or underscores.
 */
/**
 * Represents the type of tableau embedding event that can be listened for.
 */
var TableauEventType;
(function (TableauEventType) {
    /**
     * Raised when a custom view has finished loading. This event is raised after the callback function for {@link FirstInteractive} (if any) has been called.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewLoaded"] = "customviewloaded";
    /**
     * Raised when a custom view has been removed.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewRemoved"] = "customviewremoved";
    /**
     * Raised when a custom view has been saved (newly created or updated).
     *
     * @category Viewing
     */
    TableauEventType["CustomViewSaved"] = "customviewsaved";
    /**
     * Raised when a custom view has been set as the default view for a workbook.
     *
     * @category Viewing
     */
    TableauEventType["CustomViewSetDefault"] = "customviewsetdefault";
    /** Raised when the user clicks on the Edit Button.
     *
     * @category Viewing
     */
    TableauEventType["EditButtonClicked"] = "editbuttonclicked";
    /** Raised when the user clicks on the Edit In Desktop Button.
     *
     * @category Authoring, Viewing
     */
    TableauEventType["EditInDesktopButtonClicked"] = "editindesktopbuttonclicked";
    /** Raised when any filter has changed state. You can use this event type with TableauViz objects.
     *
     * @category Viewing
     */
    TableauEventType["FilterChanged"] = "filterchanged";
    /** Fired when viz size is known
     *
     * @category Authoring, Viewing
     */
    TableauEventType["FirstVizSizeKnown"] = "firstvizsizeknown";
    /** Fired when a viz first becomes interactive
     *
     * @category Authoring, Viewing
     */
    TableauEventType["FirstInteractive"] = "firstinteractive";
    /** Raised when a custom mark context menu is clicked.
     *
     * @category Viewing
     */
    TableauEventType["CustomMarkContextMenuEvent"] = "custommarkcontextmenu";
    /** The selected marks on a visualization have changed. You can use this event type with TableauViz objects.
     *
     * @category Viewing
     */
    TableauEventType["MarkSelectionChanged"] = "markselectionchanged";
    /** A parameter has had its value modified. You can use this event type with [[Parameter]] objects.
     *
     * @category Viewing
     */
    TableauEventType["ParameterChanged"] = "parameterchanged";
    /** Raised when a toolbar button or control becomes available or becomes unavailable.
     *
     * @category Viewing
     */
    TableauEventType["ToolbarStateChanged"] = "toolbarstatechanged";
    /** Raised when the workbook is ready to close. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookReadyToClose"] = "workbookreadytoclose";
    /** Raised when the workbook has been published. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookPublished"] = "workbookpublished";
    /** Raised when "publish as" is successful. This notification is sent when using embedded web authoring functionality.
     *
     * @category Authoring
     */
    TableauEventType["WorkbookPublishedAs"] = "workbookpublishedas";
    /**
     * Raised when a URL action occurs. See the {@link UrlActionEvent} class.
     *
     * @category Viewing
     */
    TableauEventType["UrlAction"] = "urlaction";
    /**
     * Raised after a tab switch occurs (the active sheet has changed). Guarantees the viz object will be interactive after this.
     *
     * @category Viewing
     */
    TableauEventType["TabSwitched"] = "tabswitched";
    /**
     *
     * Raised after a new story point becomes active.
     *
     * @category Viewing
     */
    TableauEventType["StoryPointSwitched"] = "storypointswitched";
    /**
     *
     * Raised when an error occurs while loading the contents of the webcomponent.
     *
     * @category Authoring, Viewing, AskData
     */
    TableauEventType["VizLoadError"] = "vizloaderror";
    /**
     * Raised after the iframe src attribute has been updated
     *
     * @category Authoring, Viewing, AskData
     */
    TableauEventType["IframeSrcUpdated"] = "iframesrcupdated";
})(TableauEventType = exports.TableauEventType || (exports.TableauEventType = {}));
/**
 * Represents the location of a context menu where users can add external menu items.
 */
var ApiMenuType;
(function (ApiMenuType) {
    /** External menu item will be injected in ubertip dialog */
    ApiMenuType["Ubertip"] = "ubertip";
})(ApiMenuType = exports.ApiMenuType || (exports.ApiMenuType = {}));
/** You can use this type with a {@link Viz} object. */
var TableauDialogType;
(function (TableauDialogType) {
    /**
     * Used to display the download PDF dialog.
     */
    TableauDialogType["ExportPDF"] = "export-pdf";
    /**
     * Used to display the download PowerPoint dialog.
     */
    TableauDialogType["ExportPowerPoint"] = "export-powerpoint";
    /**
     * Used to display the download Data dialog.
     */
    TableauDialogType["ExportData"] = "export-data";
    /**
     * Used to display the download CrossTab dialog.
     */
    TableauDialogType["ExportCrossTab"] = "export-cross-tab";
    /**
     * Used to display the download Workbook dialog.
     */
    TableauDialogType["ExportWorkbook"] = "export-workbook";
    /**
     * Used to display the Share dialog.
     */
    TableauDialogType["Share"] = "share";
})(TableauDialogType = exports.TableauDialogType || (exports.TableauDialogType = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/VizInterfaces.js":
/*!***************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/VizInterfaces.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * The shared string constants you can use as HTML attributes for the <tableau-viz> and <tableau-authoring-viz> web component.
 * @ignore
 */
var VizSharedAttributes;
(function (VizSharedAttributes) {
    VizSharedAttributes["TouchOptimize"] = "touch-optimize";
    VizSharedAttributes["HideEditInDesktopButton"] = "hide-edit-in-desktop-button";
    VizSharedAttributes["SuppressDefaultEditBehavior"] = "suppress-default-edit-behavior";
    VizSharedAttributes["DisableVersionCheck"] = "disable-version-check";
    VizSharedAttributes["OnEditInDesktopButtonClicked"] = "onEditInDesktopButtonClicked";
    VizSharedAttributes["OnFirstVizSizeKnown"] = "onFirstVizSizeKnown";
    VizSharedAttributes["OnFirstInteractive"] = "onFirstInteractive";
})(VizSharedAttributes = exports.VizSharedAttributes || (exports.VizSharedAttributes = {}));
/**
 * The names of the string constants you can use as HTML attributes for the <tableau-viz> web component.
 * @ignore
 */
var VizAttributes;
(function (VizAttributes) {
    VizAttributes["DisableUrlActionsPopups"] = "disable-url-actions";
    VizAttributes["HideTabs"] = "hide-tabs";
    VizAttributes["Toolbar"] = "toolbar";
    VizAttributes["InstanceIdToClone"] = "instance-id-to-clone";
    VizAttributes["Device"] = "device";
    VizAttributes["HideEditButton"] = "hide-edit-button";
    VizAttributes["OnEditButtonClicked"] = "onEditButtonClicked";
    VizAttributes["OnFilterChanged"] = "onFilterChanged";
    VizAttributes["OnCustomMarkContextMenuEvent"] = "onCustomMarkContextMenuEvent";
    VizAttributes["OnMarkSelectionChanged"] = "onMarkSelectionChanged";
    VizAttributes["OnParameterChanged"] = "onParameterChanged";
    VizAttributes["OnToolbarStateChanged"] = "onToolbarStateChanged";
    VizAttributes["OnUrlAction"] = "onUrlAction";
    VizAttributes["OnTabSwitched"] = "onTabSwitched";
    VizAttributes["OnCustomViewLoaded"] = "onCustomViewLoaded";
    VizAttributes["OnCustomViewRemoved"] = "onCustomViewRemoved";
    VizAttributes["OnCustomViewSaved"] = "onCustomViewSaved";
    VizAttributes["OnCustomViewSetDefault"] = "onCustomViewSetDefault";
    VizAttributes["OnStoryPointSwitched"] = "onStoryPointSwitched";
})(VizAttributes = exports.VizAttributes || (exports.VizAttributes = {}));
/**
 * The names of the string constants you can use as HTML attributes for the <tableau-authoring-viz> web component.
 * @ignore
 */
var VizAuthoringAttributes;
(function (VizAuthoringAttributes) {
    VizAuthoringAttributes["OnWorkbookPublished"] = "onWorkbookPublished";
    VizAuthoringAttributes["OnWorkbookPublishedAs"] = "onWorkbookPublishedAs";
    VizAuthoringAttributes["OnWorkbookReadyToClose"] = "onWorkbookReadyToClose";
    VizAuthoringAttributes["HideCloseButton"] = "hide-close-button";
})(VizAuthoringAttributes = exports.VizAuthoringAttributes || (exports.VizAuthoringAttributes = {}));
/**
 * The names of the string constants you can use as child tags for TableauViz and TableauAuthoringViz custom elements.
 */
var VizChildElements;
(function (VizChildElements) {
    /**
     * Contains a list of filter parameters. Available only in viewing mode.
     */
    VizChildElements["VizFilter"] = "viz-filter";
    /**
     * Contains a name and value for a parameter. Available only in viewing mode.
     */
    VizChildElements["VizParameter"] = "viz-parameter";
    /**
     * Contains a list of custom parameters.  Available in both viewing and authoring modes.
     */
    VizChildElements["CustomParameter"] = "custom-parameter";
})(VizChildElements = exports.VizChildElements || (exports.VizChildElements = {}));
var VizChildElementAttributes;
(function (VizChildElementAttributes) {
    VizChildElementAttributes["Field"] = "field";
    VizChildElementAttributes["Value"] = "value";
    VizChildElementAttributes["Name"] = "name";
})(VizChildElementAttributes = exports.VizChildElementAttributes || (exports.VizChildElementAttributes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Embedding/WebComponentInterfaces.js":
/*!************************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Embedding/WebComponentInterfaces.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * The names of the common string constants you can use as HTML attributes for the tableau web component.
 * @ignore
 */
var WebComponentAttributes;
(function (WebComponentAttributes) {
    WebComponentAttributes["Src"] = "src";
    WebComponentAttributes["Width"] = "width";
    WebComponentAttributes["Height"] = "height";
    WebComponentAttributes["Token"] = "token";
    WebComponentAttributes["Debug"] = "debug";
    WebComponentAttributes["IframeAuth"] = "iframe-auth";
    WebComponentAttributes["OnVizLoadError"] = "onvizloaderror";
})(WebComponentAttributes = exports.WebComponentAttributes || (exports.WebComponentAttributes = {}));
/**
 * The names of the string constants you can use as child tags for TableauViz, TableauAuthoringViz and TableauAskData custom elements.
 * @ignore
 */
var WebComponentChildElements;
(function (WebComponentChildElements) {
    /**
     * Contains a list of custom parameters.  Available in viz viewing, viz authoring and askdata.
     */
    WebComponentChildElements["CustomParameter"] = "custom-parameter";
})(WebComponentChildElements = exports.WebComponentChildElements || (exports.WebComponentChildElements = {}));
var WebComponentChildElementAttributes;
(function (WebComponentChildElementAttributes) {
    WebComponentChildElementAttributes["Field"] = "field";
    WebComponentChildElementAttributes["Value"] = "value";
    WebComponentChildElementAttributes["Name"] = "name";
})(WebComponentChildElementAttributes = exports.WebComponentChildElementAttributes || (exports.WebComponentChildElementAttributes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Extensions/Namespaces/Tableau.js":
/*!*********************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Extensions/Namespaces/Tableau.js ***!
  \*********************************************************************************************/
/***/ ((module) => {


// All enum values made available to Extensions developers.
// Enums should be kept in alphabetical order.
var Tableau;
(function (Tableau) {
    /**
     * All error codes used by the Extensions API.
     */
    var ErrorCodes;
    (function (ErrorCodes) {
        /**
         * Thrown when caller attempts to execute command before initialization has completed.
         */
        ErrorCodes["APINotInitialized"] = "api-not-initialized";
        /**
         * Thrown when caller attempts to execute command while extension is not visible.
         */
        ErrorCodes["VisibilityError"] = "visibility-error";
        /**
         * Only one dialog can be opened at time with the UI namespace functionality.
         */
        ErrorCodes["DialogAlreadyOpen"] = "dialog-already-open";
        /**
         * The open dialog was closed by the user.
         */
        ErrorCodes["DialogClosedByUser"] = "dialog-closed-by-user";
        /**
         * An error occurred within the Tableau Extensions API. Contact Tableau Support.
         */
        ErrorCodes["InternalError"] = "internal-error";
        /**
         * A dialog must start on the same domain as the parent extenion.
         */
        ErrorCodes["InvalidDomainDialog"] = "invalid-dialog-domain";
        /**
         * A parameter is not the correct data type or format. The name of the parameter is specified in the Error.message field.
         */
        ErrorCodes["InvalidParameter"] = "invalid-parameter";
        /**
         * Can occur if the extension interacts with a filter that has been removed from the worksheet.
         */
        ErrorCodes["MissingFilter"] = "missing-filter";
        /**
         * Can occur if the extension interacts with a parameter that has been removed from the worksheet.
         */
        ErrorCodes["MissingParameter"] = "missing-parameter";
        /**
         * Internal Server Error
         */
        ErrorCodes["ServerError"] = "server-error";
        /**
         * Developer cannot save settings while another save is still in progress.
         */
        ErrorCodes["SettingSaveInProgress"] = "setting-save-in-progress";
        /**
         * An unknown event name was specified in the call to `addEventListener` or `removeEventListener`.
         */
        ErrorCodes["UnsupportedEventName"] = "unsupported-event-name";
        /**
         * A method was used for a type of data source that doesn't support that method (see getActiveTablesAsync for an example)
         */
        ErrorCodes["UnsupportedMethodForDataSourceType"] = "unsupported-method-for-data-source-type";
    })(ErrorCodes = Tableau.ErrorCodes || (Tableau.ErrorCodes = {}));
    /**
     * The context in which the Extensions is currently running.
     */
    var ExtensionContext;
    (function (ExtensionContext) {
        ExtensionContext["Desktop"] = "desktop";
        ExtensionContext["Server"] = "server";
    })(ExtensionContext = Tableau.ExtensionContext || (Tableau.ExtensionContext = {}));
    /**
     * The mode in which the Extensions is currently running.
     */
    var ExtensionMode;
    (function (ExtensionMode) {
        ExtensionMode["Authoring"] = "authoring";
        ExtensionMode["Viewing"] = "viewing";
    })(ExtensionMode = Tableau.ExtensionMode || (Tableau.ExtensionMode = {}));
    /**
     * Represents the type of event that can be listened for.
     */
    var TableauEventType;
    (function (TableauEventType) {
        /** Raised when any filter has changed state. You can use this event type with [Worksheet](../interfaces/worksheet.html) objects.*/
        TableauEventType["FilterChanged"] = "filter-changed";
        /** The selected marks on a visualization has changed.
         * You can use this event type with [Worksheet](../interfaces/worksheet.html) objects. */
        TableauEventType["MarkSelectionChanged"] = "mark-selection-changed";
        /** A parameter has had its value modified. You can use this event type with [[Parameter]] objects. */
        TableauEventType["ParameterChanged"] = "parameter-changed";
        /** Settings have been changed for this extension. You can use this event type with [[Settings]] objects. */
        TableauEventType["SettingsChanged"] = "settings-changed";
        /** The dashboard layout has changed */
        TableauEventType["DashboardLayoutChanged"] = "dashboard-layout-changed";
        /** The workbook formatting has changed */
        TableauEventType["WorkbookFormattingChanged"] = "workbook-formatting-changed";
    })(TableauEventType = Tableau.TableauEventType || (Tableau.TableauEventType = {}));
    /**
     * Enum that represents the data type of encodings for createVizImageAsync.
     * @since 1.6.0
     */
    var VizImageEncodingType;
    (function (VizImageEncodingType) {
        VizImageEncodingType["Discrete"] = "discrete";
        VizImageEncodingType["Continuous"] = "continuous";
    })(VizImageEncodingType = Tableau.VizImageEncodingType || (Tableau.VizImageEncodingType = {}));
    /**
     * Enum that represents the sort direction for createVizImageAsync.
     * @since 1.8.0 and Tableau 2021.4
     */
    var VizImageSortDirectionType;
    (function (VizImageSortDirectionType) {
        VizImageSortDirectionType["Ascending"] = "ascending";
        VizImageSortDirectionType["Descending"] = "descending";
    })(VizImageSortDirectionType = Tableau.VizImageSortDirectionType || (Tableau.VizImageSortDirectionType = {}));
    /**
     * Enum that represents the palette type for createVizImageAsync.
     * @since 1.8.0 and Tableau 2021.4
     */
    var VizImagePaletteType;
    (function (VizImagePaletteType) {
        VizImagePaletteType["CustomDiverging"] = "custom-diverging";
        VizImagePaletteType["CustomSequential"] = "custom-sequential";
    })(VizImagePaletteType = Tableau.VizImagePaletteType || (Tableau.VizImagePaletteType = {}));
    /**
     * Enum that represents the Size Setting type for createVizImageAsync.
     * @since 1.8.0 and Tableau 2021.4
     */
    var VizImageSizeSettingType;
    (function (VizImageSizeSettingType) {
        VizImageSizeSettingType["Fixed"] = "fixed";
        VizImageSizeSettingType["Manual"] = "manual";
    })(VizImageSizeSettingType = Tableau.VizImageSizeSettingType || (Tableau.VizImageSizeSettingType = {}));
    /**
     * Enum that represents the Size Setting alignment type for createVizImageAsync.
     * @since 1.8.0 and Tableau 2021.4
     */
    var VizImageSizeSettingAlignmentType;
    (function (VizImageSizeSettingAlignmentType) {
        VizImageSizeSettingAlignmentType["Right"] = "right";
        VizImageSizeSettingAlignmentType["Left"] = "left";
        VizImageSizeSettingAlignmentType["Center"] = "center";
    })(VizImageSizeSettingAlignmentType = Tableau.VizImageSizeSettingAlignmentType || (Tableau.VizImageSizeSettingAlignmentType = {}));
})(Tableau || (Tableau = {}));
module.exports = Tableau;


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Shared/Enums.js":
/*!****************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Shared/Enums.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var SharedErrorCodes;
(function (SharedErrorCodes) {
    /**
     * A CSV or Excel file failed to be created in Viz.exportCrosstabAsync().
     */
    SharedErrorCodes["CrosstabCreationError"] = "crosstab-creation-error";
    /**
     * A CSV file failed to be created in Viz.exportDataAsync().
     */
    SharedErrorCodes["DataCreationError"] = "data-creation-error";
    /**
     * An invalid aggregation was specified for the filter, such as setting a range filter to "SUM(Sales)" instead of
     * "Sales".
     */
    SharedErrorCodes["InvalidAggregationFieldName"] = "invalid-aggregation-field-name";
    /**
     * A filter operation was attempted on a field that does not exist in the data source.
     */
    SharedErrorCodes["InvalidFilterFieldName"] = "invalid-filter-name";
    /**
     * A filter operation was attempted using a value that is the wrong data type or format.
     */
    SharedErrorCodes["InvalidFilterFieldValue"] = "invalid-filter-fieldValue";
    /**
     * An invalid date value was specified in a Sheet.selectMarksAsync() call for a date field.
     */
    SharedErrorCodes["InvalidSelectionDate"] = "invalid-selection-date";
    /**
     * A field was specified in a Sheet.selectMarksAsync() call that does not exist in the data source.
     */
    SharedErrorCodes["InvalidSelectionFieldName"] = "invalid-selection-fieldName";
    /**
     * An invalid value was specified in a Sheet.selectMarksAsync() call.
     */
    SharedErrorCodes["InvalidSelectionValue"] = "invalid-selection-value";
    /**
     * A parameter did not include a valid sheet selection for exporting.
     */
    SharedErrorCodes["InvalidSelectionSheet"] = "invalid-selection-sheet";
    /**
     * An error occurred within the Tableau API. Contact Tableau Support.
     */
    SharedErrorCodes["InternalError"] = "internal-error";
    /**
     * A parameter is not the correct data type or format. The name of the parameter is specified in the Error.message field.
     */
    SharedErrorCodes["InvalidParameter"] = "invalid-parameter";
    /**
     * A PDF file failed to be created in Viz.exportPDFAsync().
     */
    SharedErrorCodes["PDFCreationError"] = "pdf-creation-error";
    /**
     * A PowerPoint file failed to be created in Viz.exportPowerPointAsync().
     */
    SharedErrorCodes["PowerPointCreationError"] = "powerpoint-creation-error";
    /**
     * An operation was attempted on a sheet that is not active or embedded within the active dashboard.
     */
    SharedErrorCodes["NotActiveSheet"] = "not-active-sheet";
    /**
     * Property or Function is not supported within the Tableau API.
     */
    SharedErrorCodes["ImplementationError"] = "wrong-implementation";
    /**
     * Can occur when two incompatible calls are triggered together.
     */
    SharedErrorCodes["ApiExecutionError"] = "api-execution-error";
    /**
     * A general-purpose server error occurred. Details are contained in the Error object.
     */
    SharedErrorCodes["ServerError"] = "server-error";
    /**
     * Can occur when an api call times out.
     */
    SharedErrorCodes["Timeout"] = "timeout";
})(SharedErrorCodes = exports.SharedErrorCodes || (exports.SharedErrorCodes = {}));


/***/ }),

/***/ "../api-external-contract-js/lib/src/ExternalContract/Shared/Namespaces/Tableau.js":
/*!*****************************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/ExternalContract/Shared/Namespaces/Tableau.js ***!
  \*****************************************************************************************/
/***/ (function(module) {


var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
/**
 * The tableau namespace exists for organization and to avoid polluting
 * the global namespace. It contains no constructs other than sub-namespaces and the Tableau enumerations.
 */
var Tableau;
(function (Tableau) {
    var AnalyticsObjectType;
    (function (AnalyticsObjectType) {
        AnalyticsObjectType["Cluster"] = "cluster";
        AnalyticsObjectType["Forecast"] = "forecast";
        AnalyticsObjectType["TrendLine"] = "trend-line";
    })(AnalyticsObjectType = Tableau.AnalyticsObjectType || (Tableau.AnalyticsObjectType = {}));
    var AnnotationType;
    (function (AnnotationType) {
        AnnotationType["Mark"] = "mark";
        AnnotationType["Point"] = "point";
        AnnotationType["Area"] = "area";
    })(AnnotationType = Tableau.AnnotationType || (Tableau.AnnotationType = {}));
    var ColumnType;
    (function (ColumnType) {
        ColumnType["Discrete"] = "discrete";
        ColumnType["Continuous"] = "continuous";
    })(ColumnType = Tableau.ColumnType || (Tableau.ColumnType = {}));
    var ClassNameKey;
    (function (ClassNameKey) {
        ClassNameKey["WorksheetTitle"] = "tableau-worksheet-title";
        ClassNameKey["Worksheet"] = "tableau-worksheet";
        ClassNameKey["Tooltip"] = "tableau-tooltip";
        ClassNameKey["StoryTitle"] = "tableau-story-title";
        ClassNameKey["DashboardTitle"] = "tableau-dashboard-title";
    })(ClassNameKey = Tableau.ClassNameKey || (Tableau.ClassNameKey = {}));
    /**
     * What the object represents in a dashboard.
     */
    var DashboardObjectType;
    (function (DashboardObjectType) {
        DashboardObjectType["Blank"] = "blank";
        DashboardObjectType["Worksheet"] = "worksheet";
        DashboardObjectType["QuickFilter"] = "quick-filter";
        DashboardObjectType["ParameterControl"] = "parameter-control";
        DashboardObjectType["PageFilter"] = "page-filter";
        DashboardObjectType["Legend"] = "legend";
        DashboardObjectType["Title"] = "title";
        DashboardObjectType["Text"] = "text";
        DashboardObjectType["Image"] = "image";
        DashboardObjectType["WebPage"] = "web-page";
        DashboardObjectType["Extension"] = "extension";
    })(DashboardObjectType = Tableau.DashboardObjectType || (Tableau.DashboardObjectType = {}));
    /**
     * Enum that represents the visibility state of a dashboard object.
     * @since 1.7.0
     */
    var DashboardObjectVisibilityType;
    (function (DashboardObjectVisibilityType) {
        /** Used for turning on the visibility of a dashboard object.*/
        DashboardObjectVisibilityType["Show"] = "show";
        /** Used for turning off the visibility of a dashboard object.*/
        DashboardObjectVisibilityType["Hide"] = "hide";
    })(DashboardObjectVisibilityType = Tableau.DashboardObjectVisibilityType || (Tableau.DashboardObjectVisibilityType = {}));
    /**
     * The different types of data a value can have
     */
    var DataType;
    (function (DataType) {
        DataType["String"] = "string";
        DataType["Int"] = "int";
        DataType["Float"] = "float";
        DataType["Bool"] = "bool";
        DataType["Date"] = "date";
        DataType["DateTime"] = "date-time";
        DataType["Spatial"] = "spatial";
    })(DataType = Tableau.DataType || (Tableau.DataType = {}));
    /**
     * Enum that represents the changes that occur to a dashboard object.
     */
    var DashboardLayoutChange;
    (function (DashboardLayoutChange) {
        /** A dashboard object was added */
        DashboardLayoutChange["Added"] = "added";
        /** A dashboard object was removed */
        DashboardLayoutChange["Removed"] = "removed";
        /** A dashboard object's floating state changed */
        DashboardLayoutChange["IsFloatingChanged"] = "is-floating-changed";
        /** A dashboard object's visibility changed */
        DashboardLayoutChange["IsVisibleChanged"] = "is-visible-changed";
        /** A dashboard object's position changed */
        DashboardLayoutChange["PositionChanged"] = "position-changed";
        /** A dashboard object's size changed */
        DashboardLayoutChange["SizeChanged"] = "size-changed";
        /** A dashboard object was renamed */
        DashboardLayoutChange["NameChanged"] = "name-changed";
    })(DashboardLayoutChange = Tableau.DashboardLayoutChange || (Tableau.DashboardLayoutChange = {}));
    /**
     * Valid date ranges for a relative date filter.
     */
    var DateRangeType;
    (function (DateRangeType) {
        DateRangeType["Last"] = "last";
        DateRangeType["LastN"] = "last-n";
        DateRangeType["Next"] = "next";
        DateRangeType["NextN"] = "next-n";
        DateRangeType["Current"] = "current";
        DateRangeType["ToDate"] = "to-date";
    })(DateRangeType = Tableau.DateRangeType || (Tableau.DateRangeType = {}));
    /**
     * Enum that represents the types of dialog popup styles.
     */
    var DialogStyle;
    (function (DialogStyle) {
        DialogStyle["Window"] = "window";
        DialogStyle["Modal"] = "modal";
        DialogStyle["Modeless"] = "modeless";
    })(DialogStyle = Tableau.DialogStyle || (Tableau.DialogStyle = {}));
    var EncodingType;
    (function (EncodingType) {
        EncodingType["Column"] = "column";
        EncodingType["Row"] = "row";
        EncodingType["Page"] = "page";
        EncodingType["Filter"] = "filter";
        EncodingType["MarksType"] = "marks-type";
        EncodingType["MeasureValues"] = "measure-values";
        EncodingType["Color"] = "color";
        EncodingType["Size"] = "size";
        EncodingType["Label"] = "label";
        EncodingType["Detail"] = "detail";
        EncodingType["Tooltip"] = "tooltip";
        EncodingType["Shape"] = "shape";
        EncodingType["Path"] = "path";
        EncodingType["Angle"] = "angle";
    })(EncodingType = Tableau.EncodingType || (Tableau.EncodingType = {}));
    /**
     *  Type of aggregation on a field.
     */
    var FieldAggregationType;
    (function (FieldAggregationType) {
        FieldAggregationType["Sum"] = "sum";
        FieldAggregationType["Avg"] = "avg";
        FieldAggregationType["Min"] = "min";
        FieldAggregationType["Max"] = "max";
        FieldAggregationType["Stdev"] = "stdev";
        FieldAggregationType["Stdevp"] = "stdevp";
        FieldAggregationType["Var"] = "var";
        FieldAggregationType["Varp"] = "varp";
        FieldAggregationType["Collect"] = "collect";
        FieldAggregationType["Count"] = "count";
        FieldAggregationType["Countd"] = "countd";
        FieldAggregationType["Median"] = "median";
        FieldAggregationType["Attr"] = "attr";
        FieldAggregationType["None"] = "none";
        FieldAggregationType["Year"] = "year";
        FieldAggregationType["Qtr"] = "qtr";
        FieldAggregationType["Month"] = "month";
        FieldAggregationType["Day"] = "day";
        FieldAggregationType["Hour"] = "hour";
        FieldAggregationType["Minute"] = "minute";
        FieldAggregationType["Second"] = "second";
        FieldAggregationType["Week"] = "week";
        FieldAggregationType["Weekday"] = "weekday";
        FieldAggregationType["MonthYear"] = "month-year";
        FieldAggregationType["Mdy"] = "mdy";
        FieldAggregationType["End"] = "end";
        FieldAggregationType["TruncYear"] = "trunc-year";
        FieldAggregationType["TruncQtr"] = "trunc-qtr";
        FieldAggregationType["TruncMonth"] = "trunc-month";
        FieldAggregationType["TruncWeek"] = "trunc-week";
        FieldAggregationType["TruncDay"] = "trunc-day";
        FieldAggregationType["TruncHour"] = "trunc-hour";
        FieldAggregationType["TruncMinute"] = "trunc-minute";
        FieldAggregationType["TruncSecond"] = "trunc-second";
        FieldAggregationType["Quart1"] = "quart1";
        FieldAggregationType["Quart3"] = "quart3";
        FieldAggregationType["Skewness"] = "skewness";
        FieldAggregationType["Kurtosis"] = "kurtosis";
        FieldAggregationType["InOut"] = "in-out";
        FieldAggregationType["User"] = "user";
    })(FieldAggregationType = Tableau.FieldAggregationType || (Tableau.FieldAggregationType = {}));
    /**
     * Role of a field.
     */
    var FieldRoleType;
    (function (FieldRoleType) {
        FieldRoleType["Dimension"] = "dimension";
        FieldRoleType["Measure"] = "measure";
        FieldRoleType["Unknown"] = "unknown";
    })(FieldRoleType = Tableau.FieldRoleType || (Tableau.FieldRoleType = {}));
    /**
     * An enumeration of the valid types of filters that can be applied.
     */
    var FilterType;
    (function (FilterType) {
        FilterType["Categorical"] = "categorical";
        FilterType["Range"] = "range";
        FilterType["Hierarchical"] = "hierarchical";
        FilterType["RelativeDate"] = "relative-date";
    })(FilterType = Tableau.FilterType || (Tableau.FilterType = {}));
    /**
     * The different update types for applying filter
     */
    var FilterUpdateType;
    (function (FilterUpdateType) {
        FilterUpdateType["Add"] = "add";
        FilterUpdateType["All"] = "all";
        FilterUpdateType["Replace"] = "replace";
        FilterUpdateType["Remove"] = "remove";
    })(FilterUpdateType = Tableau.FilterUpdateType || (Tableau.FilterUpdateType = {}));
    /**
     * The domain type for a filter
     */
    var FilterDomainType;
    (function (FilterDomainType) {
        /**
         * The domain values that are relevant to the specified filter
         * i.e. the domain is restricted by a previous filter
         */
        FilterDomainType["Relevant"] = "relevant";
        /**
         * list of all possible domain values from database
         */
        FilterDomainType["Database"] = "database";
    })(FilterDomainType = Tableau.FilterDomainType || (Tableau.FilterDomainType = {}));
    /**
     * The option for specifying which values to include for filtering
     * Indicates what to do with null values for a given filter or mark selection call.
     */
    var FilterNullOption;
    (function (FilterNullOption) {
        FilterNullOption["NullValues"] = "null-values";
        FilterNullOption["NonNullValues"] = "non-null-values";
        FilterNullOption["AllValues"] = "all-values";
    })(FilterNullOption = Tableau.FilterNullOption || (Tableau.FilterNullOption = {}));
    /**
     * Enum that serves as a filter on the DataValues returned from `getSummaryDataReaderAsync`,
     * `getUnderlyingTableDataReaderAsync` and `getLogicalTableDataReaderAsync`.
     * This is an optimization of returned data values only. Tableau versions prior to 2021.2
     * will pass the data across and populate the DataValue properties.
     * Please note that all properties not requested will be `undefined` in the DataValue results.
     * @since 1.5.0
     */
    var IncludeDataValuesOption;
    (function (IncludeDataValuesOption) {
        /** DataValues will include all properties.*/
        IncludeDataValuesOption["AllValues"] = "all-values";
        /** DataValues will only include value and nativeValue properties.*/
        IncludeDataValuesOption["OnlyNativeValues"] = "only-native-values";
        /** DataValues will only include formattedValue properties. */
        IncludeDataValuesOption["OnlyFormattedValues"] = "only-formatted-values";
    })(IncludeDataValuesOption = Tableau.IncludeDataValuesOption || (Tableau.IncludeDataValuesOption = {}));
    /**
     * Type of mark for a given marks card in a viz.
     */
    var MarkType;
    (function (MarkType) {
        MarkType["Bar"] = "bar";
        MarkType["Line"] = "line";
        MarkType["Area"] = "area";
        MarkType["Square"] = "square";
        MarkType["Circle"] = "circle";
        MarkType["Shape"] = "shape";
        MarkType["Text"] = "text";
        MarkType["Map"] = "map";
        MarkType["Pie"] = "pie";
        MarkType["GanttBar"] = "gantt-bar";
        MarkType["Polygon"] = "polygon";
    })(MarkType = Tableau.MarkType || (Tableau.MarkType = {}));
    /**
     * An enumeration describing the different types of allowable values.
     * This is used for restricting the domain of a parameter
     */
    var ParameterValueType;
    (function (ParameterValueType) {
        ParameterValueType["All"] = "all";
        ParameterValueType["List"] = "list";
        ParameterValueType["Range"] = "range";
    })(ParameterValueType = Tableau.ParameterValueType || (Tableau.ParameterValueType = {}));
    /**
     * Date period used in filters and in parameters.
     */
    var PeriodType;
    (function (PeriodType) {
        PeriodType["Years"] = "years";
        PeriodType["Quarters"] = "quarters";
        PeriodType["Months"] = "months";
        PeriodType["Weeks"] = "weeks";
        PeriodType["Days"] = "days";
        PeriodType["Hours"] = "hours";
        PeriodType["Minutes"] = "minutes";
        PeriodType["Seconds"] = "seconds";
    })(PeriodType = Tableau.PeriodType || (Tableau.PeriodType = {}));
    var QuickTableCalcType;
    (function (QuickTableCalcType) {
        QuickTableCalcType["RunningTotal"] = "running-total";
        QuickTableCalcType["Difference"] = "difference";
        QuickTableCalcType["PercentDifference"] = "percent-difference";
        QuickTableCalcType["PercentOfTotal"] = "percent-of-total";
        QuickTableCalcType["Rank"] = "rank";
        QuickTableCalcType["Percentile"] = "percentile";
        QuickTableCalcType["MovingAverage"] = "moving-average";
        QuickTableCalcType["YTDTotal"] = "ytd-total";
        QuickTableCalcType["CompoundGrowthRate"] = "compound-growth-rate";
        QuickTableCalcType["YearOverYearGrowth"] = "year-over-year-growth";
        QuickTableCalcType["YTDGrowth"] = "ytd-growth";
        QuickTableCalcType["Undefined"] = "undefined";
    })(QuickTableCalcType = Tableau.QuickTableCalcType || (Tableau.QuickTableCalcType = {}));
    /**
     * Enum for specifying the selection type for select marks api.
     */
    var SelectionUpdateType;
    (function (SelectionUpdateType) {
        SelectionUpdateType["Replace"] = "select-replace";
        SelectionUpdateType["Add"] = "select-add";
        SelectionUpdateType["Remove"] = "select-remove";
    })(SelectionUpdateType = Tableau.SelectionUpdateType || (Tableau.SelectionUpdateType = {}));
    /**
     * The type of sheet a [[Sheet]] object represents
     */
    var SheetType;
    (function (SheetType) {
        SheetType["Dashboard"] = "dashboard";
        SheetType["Story"] = "story";
        SheetType["Worksheet"] = "worksheet";
    })(SheetType = Tableau.SheetType || (Tableau.SheetType = {}));
    var SortDirection;
    (function (SortDirection) {
        SortDirection["Increasing"] = "increasing";
        SortDirection["Decreasing"] = "decreasing";
    })(SortDirection = Tableau.SortDirection || (Tableau.SortDirection = {}));
    var TrendLineModelType;
    (function (TrendLineModelType) {
        TrendLineModelType["Linear"] = "linear";
        TrendLineModelType["Logarithmic"] = "logarithmic";
        TrendLineModelType["Exponential"] = "exponential";
        TrendLineModelType["Polynomial"] = "polynomial";
    })(TrendLineModelType = Tableau.TrendLineModelType || (Tableau.TrendLineModelType = {}));
    /**
     * Enum that represents the replay speed of an animation.
     * @since 1.7.0
     */
    var ReplaySpeedType;
    (function (ReplaySpeedType) {
        /** Used for setting the replay speed of an animation to 0.5x.*/
        ReplaySpeedType["Slow"] = "slow";
        /** Used for setting the replay speed of an animation to 1.0x.*/
        ReplaySpeedType["Normal"] = "normal";
        /** Used for setting the replay speed of an animation to 2.0x.*/
        ReplaySpeedType["Fast"] = "fast";
    })(ReplaySpeedType = Tableau.ReplaySpeedType || (Tableau.ReplaySpeedType = {}));
    /**
     * Enum that represents the selection state of a level in a hierarchical filter
     * @since Extensions 1.10.0
     */
    var HierarchicalLevelSelectionState;
    (function (HierarchicalLevelSelectionState) {
        HierarchicalLevelSelectionState["AllSelected"] = "all-selected";
        HierarchicalLevelSelectionState["NoneSelected"] = "none-selected";
        HierarchicalLevelSelectionState["SomeSelected"] = "some-selected";
        HierarchicalLevelSelectionState["UnknownSelected"] = "unknown-selected";
    })(HierarchicalLevelSelectionState = Tableau.HierarchicalLevelSelectionState || (Tableau.HierarchicalLevelSelectionState = {}));
    Tableau.ZoneVisibilityType = __assign({}, DashboardObjectVisibilityType);
})(Tableau || (Tableau = {}));
module.exports = Tableau;


/***/ }),

/***/ "../api-external-contract-js/lib/src/SharedApiExternalContract.js":
/*!************************************************************************!*\
  !*** ../api-external-contract-js/lib/src/SharedApiExternalContract.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// This file re-exports everything which is part of the shared api public interface
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
__export(__webpack_require__(/*! ./ExternalContract/Shared/Enums */ "../api-external-contract-js/lib/src/ExternalContract/Shared/Enums.js"));
var Tableau_1 = __webpack_require__(/*! ./ExternalContract/Shared/Namespaces/Tableau */ "../api-external-contract-js/lib/src/ExternalContract/Shared/Namespaces/Tableau.js");
exports.AnalyticsObjectType = Tableau_1.AnalyticsObjectType;
exports.AnnotationType = Tableau_1.AnnotationType;
exports.ClassNameKey = Tableau_1.ClassNameKey;
exports.ColumnType = Tableau_1.ColumnType;
exports.DashboardLayoutChange = Tableau_1.DashboardLayoutChange;
exports.DashboardObjectType = Tableau_1.DashboardObjectType;
exports.DashboardObjectVisibilityType = Tableau_1.DashboardObjectVisibilityType;
exports.DataType = Tableau_1.DataType;
exports.DateRangeType = Tableau_1.DateRangeType;
exports.DialogStyle = Tableau_1.DialogStyle;
exports.EncodingType = Tableau_1.EncodingType;
exports.FieldAggregationType = Tableau_1.FieldAggregationType;
exports.FieldRoleType = Tableau_1.FieldRoleType;
exports.FilterDomainType = Tableau_1.FilterDomainType;
exports.FilterNullOption = Tableau_1.FilterNullOption;
exports.FilterType = Tableau_1.FilterType;
exports.FilterUpdateType = Tableau_1.FilterUpdateType;
exports.HierarchicalLevelSelectionState = Tableau_1.HierarchicalLevelSelectionState;
exports.IncludeDataValuesOption = Tableau_1.IncludeDataValuesOption;
exports.MarkType = Tableau_1.MarkType;
exports.ParameterValueType = Tableau_1.ParameterValueType;
exports.PeriodType = Tableau_1.PeriodType;
exports.QuickTableCalcType = Tableau_1.QuickTableCalcType;
exports.ReplaySpeedType = Tableau_1.ReplaySpeedType;
exports.SelectionUpdateType = Tableau_1.SelectionUpdateType;
exports.SheetType = Tableau_1.SheetType;
exports.SortDirection = Tableau_1.SortDirection;
exports.TrendLineModelType = Tableau_1.TrendLineModelType;
exports.ZoneVisibilityType = Tableau_1.ZoneVisibilityType;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/JsApiInternalContract.js":
/*!********************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/JsApiInternalContract.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


/**
 * This is your main. This is where you re-export everything you want to be publicly available.
 *
 * The build enforces that the file has the same name as the global variable that is exported.
 */
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
// The following polyfills are needed for IE11
__webpack_require__(/*! core-js/es/number/is-integer */ "../../node_modules/core-js/es/number/is-integer.js");
__webpack_require__(/*! core-js/es/number/is-nan */ "../../node_modules/core-js/es/number/is-nan.js");
__webpack_require__(/*! core-js/es/object/assign */ "../../node_modules/core-js/es/object/assign.js");
// Export the version of the internal contract to be available at runtime
//  This file is generated by yarn publish:bump via scripts/publish-check.ts
//  updateInternalContractRuntimeVersion in the monorepo root.
var internalContractVersion = __webpack_require__(/*! ../internal-contract-version.json */ "../api-internal-contract-js/lib/internal-contract-version.json");
exports.INTERNAL_CONTRACT_VERSION = internalContractVersion;
__export(__webpack_require__(/*! ./contract/DataTypeConverter */ "../api-internal-contract-js/lib/src/contract/DataTypeConverter.js"));
__export(__webpack_require__(/*! ./contract/Enums */ "../api-internal-contract-js/lib/src/contract/Enums.js"));
__export(__webpack_require__(/*! ./contract/Notifications */ "../api-internal-contract-js/lib/src/contract/Notifications.js"));
__export(__webpack_require__(/*! ./contract/Parameters */ "../api-internal-contract-js/lib/src/contract/Parameters.js"));
__export(__webpack_require__(/*! ./contract/Verbs */ "../api-internal-contract-js/lib/src/contract/Verbs.js"));
__export(__webpack_require__(/*! ./interface/AskDataInterface */ "../api-internal-contract-js/lib/src/interface/AskDataInterface.js"));
__export(__webpack_require__(/*! ./interface/VqlInterface */ "../api-internal-contract-js/lib/src/interface/VqlInterface.js"));
__export(__webpack_require__(/*! ./messaging/CrossFrameMessenger */ "../api-internal-contract-js/lib/src/messaging/CrossFrameMessenger.js"));
__export(__webpack_require__(/*! ./messaging/interface/MessageTypes */ "../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js"));
__export(__webpack_require__(/*! ./versioning/external/ExternalIdentityVersionConverter */ "../api-internal-contract-js/lib/src/versioning/external/ExternalIdentityVersionConverter.js"));
__export(__webpack_require__(/*! ./versioning/external/ExternalVersionConverterFactory */ "../api-internal-contract-js/lib/src/versioning/external/ExternalVersionConverterFactory.js"));
__export(__webpack_require__(/*! ./versioning/VersionConverterFactory */ "../api-internal-contract-js/lib/src/versioning/VersionConverterFactory.js"));
// Export the version number of messaging for consumers to use.
// Be very careful making any updates to this contract which break version compatibility.
exports.MESSAGING_VERSION = {
    major: 1,
    minor: 0,
    fix: 0,
};


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/DataTypeConverter.js":
/*!*************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/DataTypeConverter.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Enums_1 = __webpack_require__(/*! ./Enums */ "../api-internal-contract-js/lib/src/contract/Enums.js");
var DataTypeConverter = /** @class */ (function () {
    function DataTypeConverter() {
    }
    DataTypeConverter.isSpecial = function (valueAsString) {
        // Prior to ShowDataTablePresModel, special values come to us as
        // '%null%', '%all%', '%wildcard%', '%missing%'...
        // While this function will never return true for ShowDataTablePresModel conversion,
        // it is as cheap as passing around a version and checking that.
        // (See DataValueFormatter.cpp)
        if (valueAsString.length > 2 && valueAsString[0] === '%' && valueAsString[valueAsString.length - 1] === '%') {
            return true;
        }
        return false;
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.parseBoolean = function (booleanString) {
        // boolean values come to us as 'true'|'false'
        var normalizedBoolean = booleanString.toLowerCase();
        return normalizedBoolean !== 'true' && normalizedBoolean !== 'false' ? this.specialValueIndicator : normalizedBoolean === 'true';
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.parseNumber = function (valueAsString) {
        var value = Number(valueAsString);
        return isNaN(value) ? this.specialValueIndicator : value;
    };
    DataTypeConverter.parseDate = function (dateAsString) {
        // Note that without a time, the date is assumed to be UTC
        // Input of 2020-03-25 is printed as: Mar 24 2020 17:00:00 GMT-0700
        // This matches style used in existing convertFilterValuePresModel
        var value = new Date(dateAsString);
        return Number.isNaN(value.getTime()) ? null : value;
    };
    DataTypeConverter.parseDateTime = function (dateAsString) {
        // With a time, the date is assumed to be UTC.
        // Our date format is always: yyyy-mm-dd hh:mm:ss
        // Unfortunately, IE11 can't parse that format so we add a T between the day and time.
        // We also add a Z so that it is UTC. (Without the Z, some browsers assume local, and others UTC)
        var formattedDateString = dateAsString.replace(' ', 'T').concat('Z');
        var value = new Date(formattedDateString);
        return Number.isNaN(value.getTime()) ? null : value;
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.convertValueAsStringToValue = function (valueAsString, type) {
        // This is both DataDictionary and ShowDataTablePresModel compatible.
        // In the DataDictionary, valueAsString can be '%null%' or '%missing%', while in
        // ShowDataTablePresModel, we can get 'null' or 'missing', or '%null%' for string special values.
        // For either of these cases, we return specialValueIndicator (or the original special string).
        // To maintain backwards compatibilty, this converter:
        // 1. returns a string for any special values
        // 2. returns a string for any date
        // Parameter min/max values can be undefined, so result is also undefined
        if (valueAsString === undefined || valueAsString === null) {
            return undefined;
        }
        if (this.isSpecial(valueAsString)) {
            return valueAsString;
        }
        switch (type) {
            case Enums_1.DataType.Bool:
                return this.parseBoolean(valueAsString);
            case Enums_1.DataType.Int:
            case Enums_1.DataType.Float:
                // Return special value '%null%' for any failure in parsing.
                // We need to do that because ShowDataTablePresModel will give us strings like 'null'
                // for special values.
                return this.parseNumber(valueAsString);
            case Enums_1.DataType.Date:
                // For ShowDataTablePresModel, special values will be "null" which will fail to parse.
                // In that case, we return '%null%'.
                return this.parseDate(valueAsString) === null ? this.specialValueIndicator : valueAsString;
            case Enums_1.DataType.DateTime:
                // For ShowDataTablePresModel, special values will be "null" which will fail to parse.
                // In that case, we return '%null%'
                return this.parseDateTime(valueAsString) === null ? this.specialValueIndicator : valueAsString;
            case Enums_1.DataType.Spatial:
            case Enums_1.DataType.String:
            default:
                return valueAsString;
        }
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.convertValueToNativeValue = function (value, type) {
        // This converts from our 1.2 API that returns strings for specials, and dates as strings.
        // It takes the special case of '%null%' and returns a null.
        // For dates, it returns a Date object rather than a string.
        // convertValueToNativeValue should be used to build a DataValue.nativeValue field.
        // Parameter min/max can be undefined. If that is the case, nativeValue is treated like a special
        if (value === undefined || value === null) {
            return null;
        }
        switch (type) {
            case Enums_1.DataType.Bool:
                return typeof value === 'string' ? null : value;
            case Enums_1.DataType.Int:
            case Enums_1.DataType.Float:
                return typeof value === 'string' ? null : value;
            case Enums_1.DataType.Date:
                // Convert the string to Date object (or null if parsing fails ... we assume special)
                return this.parseDate(value);
            case Enums_1.DataType.DateTime:
                // Convert the string to Date object (or null if parsing fails ... we assume special)
                return this.parseDateTime(value);
            case Enums_1.DataType.String:
                return this.isSpecial(value) ? null : value;
            case Enums_1.DataType.Spatial:
            default:
                return value;
        }
    };
    // tslint:disable-next-line:no-any
    DataTypeConverter.convertStringValueToNativeValue = function (value, type) {
        // This handles the conversion from string directly to native value for all types
        return this.convertValueToNativeValue(this.convertValueAsStringToValue(value, type), type);
    };
    DataTypeConverter.specialValueIndicator = '%null%';
    return DataTypeConverter;
}());
exports.DataTypeConverter = DataTypeConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/Enums.js":
/*!*************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/Enums.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var ExtensionContext;
(function (ExtensionContext) {
    ExtensionContext["Desktop"] = "desktop";
    ExtensionContext["Server"] = "server";
    ExtensionContext["Unknown"] = "unknown";
})(ExtensionContext = exports.ExtensionContext || (exports.ExtensionContext = {}));
var ExtensionMode;
(function (ExtensionMode) {
    ExtensionMode["Authoring"] = "authoring";
    ExtensionMode["Viewing"] = "viewing";
    ExtensionMode["Unknown"] = "unknown";
})(ExtensionMode = exports.ExtensionMode || (exports.ExtensionMode = {}));
var AnnotateEnum;
(function (AnnotateEnum) {
    AnnotateEnum["Mark"] = "mark";
    AnnotateEnum["Point"] = "point";
    AnnotateEnum["Area"] = "area";
})(AnnotateEnum = exports.AnnotateEnum || (exports.AnnotateEnum = {}));
var ColumnType;
(function (ColumnType) {
    ColumnType["Discrete"] = "discrete";
    ColumnType["Continuous"] = "continuous";
})(ColumnType = exports.ColumnType || (exports.ColumnType = {}));
var DashboardObjectType;
(function (DashboardObjectType) {
    DashboardObjectType["Blank"] = "blank";
    DashboardObjectType["Worksheet"] = "worksheet";
    DashboardObjectType["QuickFilter"] = "quick-filter";
    DashboardObjectType["ParameterControl"] = "parameter-control";
    DashboardObjectType["PageFilter"] = "page-filter";
    DashboardObjectType["Legend"] = "legend";
    DashboardObjectType["Title"] = "title";
    DashboardObjectType["Text"] = "text";
    DashboardObjectType["Image"] = "image";
    DashboardObjectType["WebPage"] = "web-page";
    DashboardObjectType["Extension"] = "extension";
})(DashboardObjectType = exports.DashboardObjectType || (exports.DashboardObjectType = {}));
var DataType;
(function (DataType) {
    DataType["String"] = "string";
    DataType["Int"] = "int";
    DataType["Float"] = "float";
    DataType["Bool"] = "bool";
    DataType["Date"] = "date";
    DataType["DateTime"] = "date-time";
    DataType["Spatial"] = "spatial";
})(DataType = exports.DataType || (exports.DataType = {}));
var DialogStyle;
(function (DialogStyle) {
    DialogStyle["Window"] = "window";
    DialogStyle["Modal"] = "modal";
    DialogStyle["Modeless"] = "modeless";
})(DialogStyle = exports.DialogStyle || (exports.DialogStyle = {}));
var EncodedDataType;
(function (EncodedDataType) {
    EncodedDataType["Number"] = "number";
    EncodedDataType["String"] = "string";
    EncodedDataType["Date"] = "date";
    EncodedDataType["Boolean"] = "boolean";
})(EncodedDataType = exports.EncodedDataType || (exports.EncodedDataType = {}));
var ErrorCodes;
(function (ErrorCodes) {
    ErrorCodes["INITIALIZATION_ERROR"] = "initialization-error";
    ErrorCodes["INTERNAL_ERROR"] = "internal-error";
    ErrorCodes["MISSING_ENUM_MAPPING"] = "missing-enum-mapping";
    ErrorCodes["MISSING_PARAMETER"] = "missing-parameter";
    ErrorCodes["PERMISSION_DENIED"] = "permission-denied";
    ErrorCodes["PRES_MODEL_PARSING_ERROR"] = "pres-model-parsing-error";
    ErrorCodes["VERSION_NOT_CONFIGURED"] = "version-not-configured";
    ErrorCodes["VISIBILITY_ERROR"] = "visibility-error";
    ErrorCodes["UNKNOWN_VERB_ID"] = "unknown-verb-id";
})(ErrorCodes = exports.ErrorCodes || (exports.ErrorCodes = {}));
var FieldAggregationType;
(function (FieldAggregationType) {
    FieldAggregationType["Sum"] = "sum";
    FieldAggregationType["Avg"] = "avg";
    FieldAggregationType["Min"] = "min";
    FieldAggregationType["Max"] = "max";
    FieldAggregationType["Stdev"] = "stdev";
    FieldAggregationType["Stdevp"] = "stdevp";
    FieldAggregationType["Var"] = "var";
    FieldAggregationType["Varp"] = "varp";
    FieldAggregationType["Collect"] = "collect";
    FieldAggregationType["Count"] = "count";
    FieldAggregationType["Countd"] = "countd";
    FieldAggregationType["Median"] = "median";
    FieldAggregationType["Attr"] = "attr";
    FieldAggregationType["None"] = "none";
    FieldAggregationType["Year"] = "year";
    FieldAggregationType["Qtr"] = "qtr";
    FieldAggregationType["Month"] = "month";
    FieldAggregationType["Day"] = "day";
    FieldAggregationType["Hour"] = "hour";
    FieldAggregationType["Minute"] = "minute";
    FieldAggregationType["Second"] = "second";
    FieldAggregationType["Week"] = "week";
    FieldAggregationType["Weekday"] = "weekday";
    FieldAggregationType["MonthYear"] = "month-year";
    FieldAggregationType["Mdy"] = "mdy";
    FieldAggregationType["End"] = "end";
    FieldAggregationType["TruncYear"] = "trunc-year";
    FieldAggregationType["TruncQtr"] = "trunc-qtr";
    FieldAggregationType["TruncMonth"] = "trunc-month";
    FieldAggregationType["TruncWeek"] = "trunc-week";
    FieldAggregationType["TruncDay"] = "trunc-day";
    FieldAggregationType["TruncHour"] = "trunc-hour";
    FieldAggregationType["TruncMinute"] = "trunc-minute";
    FieldAggregationType["TruncSecond"] = "trunc-second";
    FieldAggregationType["Quart1"] = "quart1";
    FieldAggregationType["Quart3"] = "quart3";
    FieldAggregationType["Skewness"] = "skewness";
    FieldAggregationType["Kurtosis"] = "kurtosis";
    FieldAggregationType["InOut"] = "in-out";
    FieldAggregationType["User"] = "user";
})(FieldAggregationType = exports.FieldAggregationType || (exports.FieldAggregationType = {}));
var FieldRoleType;
(function (FieldRoleType) {
    FieldRoleType["Dimension"] = "dimension";
    FieldRoleType["Measure"] = "measure";
    FieldRoleType["Unknown"] = "unknown";
})(FieldRoleType = exports.FieldRoleType || (exports.FieldRoleType = {}));
/**
 *  The different update types for applying filter.
 */
var FilterUpdateType;
(function (FilterUpdateType) {
    FilterUpdateType["Add"] = "add";
    FilterUpdateType["All"] = "all";
    FilterUpdateType["Replace"] = "replace";
    FilterUpdateType["Remove"] = "remove";
})(FilterUpdateType = exports.FilterUpdateType || (exports.FilterUpdateType = {}));
var SheetType;
(function (SheetType) {
    SheetType["Dashboard"] = "dashboard";
    SheetType["Story"] = "story";
    SheetType["Worksheet"] = "worksheet";
})(SheetType = exports.SheetType || (exports.SheetType = {}));
var DomainRestrictionType;
(function (DomainRestrictionType) {
    DomainRestrictionType["All"] = "all";
    DomainRestrictionType["List"] = "list";
    DomainRestrictionType["Range"] = "range";
})(DomainRestrictionType = exports.DomainRestrictionType || (exports.DomainRestrictionType = {}));
var DateStepPeriod;
(function (DateStepPeriod) {
    DateStepPeriod["Years"] = "years";
    DateStepPeriod["Quarters"] = "quarters";
    DateStepPeriod["Months"] = "months";
    DateStepPeriod["Weeks"] = "weeks";
    DateStepPeriod["Days"] = "days";
    DateStepPeriod["Hours"] = "hours";
    DateStepPeriod["Minutes"] = "minutes";
    DateStepPeriod["Seconds"] = "seconds";
})(DateStepPeriod = exports.DateStepPeriod || (exports.DateStepPeriod = {}));
/**
 * The option for specifying which values to include for filtering.
 */
var FilterNullOption;
(function (FilterNullOption) {
    FilterNullOption["NullValues"] = "nullvalues";
    FilterNullOption["NonNullValues"] = "nonnullvalues";
    FilterNullOption["AllValues"] = "allvalues";
})(FilterNullOption = exports.FilterNullOption || (exports.FilterNullOption = {}));
/**
 * The type of filter domain
 */
var FilterDomainType;
(function (FilterDomainType) {
    FilterDomainType["Relevant"] = "relevant";
    FilterDomainType["Database"] = "database";
})(FilterDomainType = exports.FilterDomainType || (exports.FilterDomainType = {}));
/**
 * Internal enum for specifying the selection type for select marks api.
 */
var SelectionUpdateType;
(function (SelectionUpdateType) {
    SelectionUpdateType["Replace"] = "select-replace";
    SelectionUpdateType["Add"] = "select-add";
    SelectionUpdateType["Remove"] = "select-remove";
})(SelectionUpdateType = exports.SelectionUpdateType || (exports.SelectionUpdateType = {}));
/**
 * Internal enum for specifying the included values type for range selection.
 */
var QuantitativeIncludedValues;
(function (QuantitativeIncludedValues) {
    QuantitativeIncludedValues["IncludeNull"] = "include-null";
    QuantitativeIncludedValues["IncludeNonNull"] = "include-non-null";
    QuantitativeIncludedValues["IncludeAll"] = "include-all";
})(QuantitativeIncludedValues = exports.QuantitativeIncludedValues || (exports.QuantitativeIncludedValues = {}));
/**
 * Internal enum for specifying a hierarchical level selection state.
 */
var HierarchicalLevelSelectionState;
(function (HierarchicalLevelSelectionState) {
    HierarchicalLevelSelectionState["AllSelected"] = "all-selected";
    HierarchicalLevelSelectionState["NoneSelected"] = "none-selected";
    HierarchicalLevelSelectionState["SomeSelected"] = "some-selected";
    HierarchicalLevelSelectionState["UnknownSelected"] = "unknown-selected";
})(HierarchicalLevelSelectionState = exports.HierarchicalLevelSelectionState || (exports.HierarchicalLevelSelectionState = {}));
/**
 * Type of mark for a given marks card in a viz.
 */
var MarkType;
(function (MarkType) {
    MarkType["Bar"] = "bar";
    MarkType["Line"] = "line";
    MarkType["Area"] = "area";
    MarkType["Square"] = "square";
    MarkType["Circle"] = "circle";
    MarkType["Shape"] = "shape";
    MarkType["Text"] = "text";
    MarkType["Map"] = "map";
    MarkType["Pie"] = "pie";
    MarkType["GanttBar"] = "gantt-bar";
    MarkType["Polygon"] = "polygon";
})(MarkType = exports.MarkType || (exports.MarkType = {}));
/**
 * Internal enum for specifying the type of filter
 */
var FilterType;
(function (FilterType) {
    FilterType["Categorical"] = "categorical";
    FilterType["Range"] = "range";
    FilterType["RelativeDate"] = "relativeDate";
    FilterType["Hierarchical"] = "hierarchical";
})(FilterType = exports.FilterType || (exports.FilterType = {}));
/**
 * Internal enum for specifying the DateRangeType of a relative date filter
 */
var DateRangeType;
(function (DateRangeType) {
    /**
     * Refers to the last day, week, month, etc. of the date period.
     */
    DateRangeType["Last"] = "last";
    /**
     * Refers to the last N days, weeks, months, etc. of the date period.
     */
    DateRangeType["LastN"] = "lastN";
    /**
     * Refers to the next day, week, month, etc. of the date period.
     */
    DateRangeType["Next"] = "next";
    /**
     * Refers to the next N days, weeks, months, etc. of the date period.
     */
    DateRangeType["NextN"] = "nextN";
    /**
     * Refers to the current day, week, month, etc. of the date period.
     */
    DateRangeType["Current"] = "current";
    /**
     * Refers to everything up to and including the current day, week, month, etc. of the date period.
     */
    DateRangeType["ToDate"] = "toDate";
})(DateRangeType = exports.DateRangeType || (exports.DateRangeType = {}));
/**
 * Used to determine if the launching of an extension dialog succeeded or failed.
 */
var ExtensionDialogResult;
(function (ExtensionDialogResult) {
    ExtensionDialogResult["DialogAlreadyOpen"] = "dialog-already-open";
    ExtensionDialogResult["InvalidDomain"] = "invalid-domain";
    ExtensionDialogResult["Success"] = "success";
})(ExtensionDialogResult = exports.ExtensionDialogResult || (exports.ExtensionDialogResult = {}));
// Enumeration for ApiShowData table id sentinels.
var ApiShowDataTableSentinel;
(function (ApiShowDataTableSentinel) {
    // find the one logical table - used in version compatibility check for getUnderlyingDataTable and getLogicalDataTable commands
    ApiShowDataTableSentinel["SingleTableId"] = "single-table-id-sentinel";
    ApiShowDataTableSentinel["SingleTableCaption"] = "Single table id sentinel";
})(ApiShowDataTableSentinel = exports.ApiShowDataTableSentinel || (exports.ApiShowDataTableSentinel = {}));
/**
 * Used to optimize the getSummaryData/getUnderlyingTableData results
 * Mapped from external IncludeDataValuesOption
 */
var ApiShowDataTableFormat;
(function (ApiShowDataTableFormat) {
    ApiShowDataTableFormat["NativeValuesOnly"] = "native-values-only";
    ApiShowDataTableFormat["FormattedValuesOnly"] = "formatted-values-only";
    ApiShowDataTableFormat["NativeAndFormattedValues"] = "native-and-formatted-values";
})(ApiShowDataTableFormat = exports.ApiShowDataTableFormat || (exports.ApiShowDataTableFormat = {}));
/**
 * Used to set page size for export layout options.
 */
var PageSizeOption;
(function (PageSizeOption) {
    PageSizeOption["Letter"] = "letter";
    PageSizeOption["Legal"] = "legal";
    PageSizeOption["Note"] = "note";
    PageSizeOption["Folio"] = "folio";
    PageSizeOption["Tabloid"] = "tabloid";
    PageSizeOption["Ledger"] = "ledger";
    PageSizeOption["Statement"] = "statement";
    PageSizeOption["Executive"] = "executive";
    PageSizeOption["A3"] = "a3";
    PageSizeOption["A4"] = "a4";
    PageSizeOption["A5"] = "a5";
    PageSizeOption["B4"] = "b4";
    PageSizeOption["B5"] = "b5";
    PageSizeOption["Quarto"] = "quarto";
    PageSizeOption["Unspecified"] = "unspecified";
})(PageSizeOption = exports.PageSizeOption || (exports.PageSizeOption = {}));
/**
 * Used to set the page orientation mode for export layout options.
 */
var PageOrientation;
(function (PageOrientation) {
    PageOrientation["Printer"] = "printer";
    PageOrientation["Portrait"] = "portrait";
    PageOrientation["Landscape"] = "landscape";
})(PageOrientation = exports.PageOrientation || (exports.PageOrientation = {}));
/**
 * Used to set scale mode for export layout options.
 */
var ScaleMode;
(function (ScaleMode) {
    ScaleMode["ScaleAuto"] = "auto";
    ScaleMode["ScalePercentage"] = "percent";
    ScaleMode["ScaleFitPages"] = "fit-pages";
})(ScaleMode = exports.ScaleMode || (exports.ScaleMode = {}));
/**
 * Used by setFitAndScaleValues to scale percent values
 */
var PageScalingOption;
(function (PageScalingOption) {
    PageScalingOption["ScalePctAuto"] = "auto";
    PageScalingOption["ScalePct400"] = "pct400";
    PageScalingOption["ScalePct200"] = "pct200";
    PageScalingOption["ScalePct100"] = "pct100";
    PageScalingOption["ScalePct90"] = "pct90";
    PageScalingOption["ScalePct80"] = "pct80";
    PageScalingOption["ScalePct75"] = "pct75";
    PageScalingOption["ScalePct60"] = "pct60";
    PageScalingOption["ScalePct50"] = "pct50";
    PageScalingOption["ScalePct25"] = "pct25";
})(PageScalingOption = exports.PageScalingOption || (exports.PageScalingOption = {}));
/**
 * Used by setFitAndScaleValues to scale fit page values
 */
var FitPages;
(function (FitPages) {
    FitPages["FitOneHigh"] = "fit0x1";
    FitPages["FitTwoHigh"] = "fit0x2";
    FitPages["FitOneWide"] = "fit1x0";
    FitPages["FitTwoWide"] = "fit2x0";
})(FitPages = exports.FitPages || (exports.FitPages = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/Notifications.js":
/*!*********************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/Notifications.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var NotificationId;
(function (NotificationId) {
    NotificationId["CustomMarkContextMenuClicked"] = "custom-mark-context-menu-clicked";
    NotificationId["ContextMenuClick"] = "context-menu-click";
    NotificationId["CustomViewRemoved"] = "custom-view-removed";
    NotificationId["CustomViewSaved"] = "custom-view-saved";
    NotificationId["CustomViewSetDefault"] = "custom-view-set-default";
    NotificationId["CustomViewsLoaded"] = "custom-views-loaded";
    NotificationId["DashboardLayoutChanged"] = "dashboard-layout-changed";
    NotificationId["EditButtonClicked"] = "edit-button-clicked";
    NotificationId["EditInDesktopButtonClicked"] = "edit-in-desktop-button-clicked";
    NotificationId["ExtensionDialogUpdate"] = "extension-dialog-update";
    NotificationId["FilterChanged"] = "filter-changed";
    NotificationId["FirstVizSizeKnown"] = "first-viz-size-known";
    NotificationId["ParameterChanged"] = "parameter-changed";
    NotificationId["SelectedMarksChanged"] = "selected-marks-changed";
    NotificationId["SettingsChanged"] = "settings-changed";
    NotificationId["TestConversionNotification"] = "test-conversion-notification";
    NotificationId["ToolbarStateChanged"] = "toolbar-state-changed";
    NotificationId["VizInteractive"] = "viz-interactive";
    NotificationId["AskDataInteractive"] = "ask-data-interactive";
    NotificationId["WorkbookReadyToClose"] = "workbook-ready-to-close";
    NotificationId["WorkbookFormattingChanged"] = "workbook-formatting-changed";
    NotificationId["WorkbookPublished"] = "workbook-published";
    NotificationId["WorkbookPublishedAs"] = "workbook-published-as";
    NotificationId["UrlAction"] = "url-action";
    NotificationId["TabSwitched"] = "tab-switched";
    NotificationId["StoryPointSwitched"] = "story-point-switched";
})(NotificationId = exports.NotificationId || (exports.NotificationId = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/Parameters.js":
/*!******************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/Parameters.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// PLEASE KEEP IN ALPHABETICAL ORDER. This helps with visually finding entries, knowing where to put
// new ones, and merge conflicts.
var ParameterId;
(function (ParameterId) {
    ParameterId["ActiveTablesInfo"] = "active-tables-info";
    ParameterId["AnchorDate"] = "anchor-date";
    ParameterId["AnnotateEnum"] = "annotate-enum";
    ParameterId["AnnotationList"] = "annotation-list";
    ParameterId["CategoricalDomain"] = "categorical-domain";
    ParameterId["ClickThroughEnabled"] = "click-through-enabled";
    ParameterId["ColumnsToInclude"] = "columns-to-include";
    ParameterId["ColumnsToIncludeById"] = "columns-to-include-by-id";
    ParameterId["ConnectionDescriptionSummaries"] = "connection-description-summaries";
    ParameterId["CurrentSheetType"] = "current-sheet-type";
    ParameterId["CustomView"] = "custom-view";
    ParameterId["CustomViewIsDefault"] = "custom-view-is-default";
    ParameterId["CustomViewIsPublic"] = "custom-view-is-public";
    ParameterId["CustomViewLuid"] = "custom-view-luid";
    ParameterId["CustomViewName"] = "custom-view-name";
    ParameterId["CustomViews"] = "custom-views";
    ParameterId["Dashboard"] = "dashboard";
    ParameterId["DashboardFilters"] = "dashboard-filters";
    ParameterId["DashboardName"] = "dashboard";
    ParameterId["DashboardObjectPositionAndSizeUpdate"] = "dashboard-object-position-and-size-update";
    ParameterId["DashboardObjectPositionAndSizeUpdateList"] = "dashboard-object-position-and-size-update-list";
    ParameterId["DataRowIndex"] = "data-row-index";
    ParameterId["DataSchema"] = "data-schema";
    ParameterId["DataSource"] = "data-source";
    ParameterId["DataSourceDataTable"] = "data-source-data-table";
    ParameterId["DataSourceId"] = "data-source-id";
    ParameterId["DataSourceName"] = "data-source-name";
    ParameterId["DataTable"] = "data-table";
    ParameterId["DataTableReader"] = "data-table-reader";
    ParameterId["DateRangeType"] = "date-range-type";
    ParameterId["DeltaTimeMs"] = "delta-time-ms";
    ParameterId["DimValSelectionModels"] = "dimensionValueSelectionModels";
    ParameterId["DomainType"] = "domain-type";
    ParameterId["EmbeddingBootstrapInfo"] = "embedding-bootstrap-info";
    ParameterId["ExportCrosstabSheetMap"] = "export-crosstab-sheet-map";
    ParameterId["ExportFile"] = "export-file";
    ParameterId["ExportOriginUrl"] = "export-origin-url";
    ParameterId["ExportPdfOptions"] = "export-pdf-options";
    ParameterId["ExtensionBootstrapInfo"] = "extension-bootstrap-info";
    ParameterId["ExtensionContextMenuIds"] = "extension-context-menu-ids";
    ParameterId["ExtensionDialogH"] = "extension-dialog-height";
    ParameterId["ExtensionDialogPayload"] = "extension-dialog-payload";
    ParameterId["ExtensionDialogResult"] = "extension-dialog-result";
    ParameterId["ExtensionDialogStyle"] = "extension-dialog-style";
    ParameterId["ExtensionDialogUrl"] = "extension-dialog-url";
    ParameterId["ExtensionDialogW"] = "extension-dialog-width";
    ParameterId["ExtensionLocator"] = "extension-locator";
    ParameterId["ExtensionSettingsInfo"] = "extension-settings-info";
    ParameterId["ExtensionZoneId"] = "extension-zone-id";
    ParameterId["ExternalMenuDescription"] = "external-menu-description";
    ParameterId["ExternalMenuHeader"] = "external-menu-header";
    ParameterId["ExternalMenuItemDisplayName"] = "external-menu-item-display-name";
    ParameterId["ExternalMenuItemId"] = "external-menu-item-id";
    ParameterId["Field"] = "field";
    ParameterId["FieldId"] = "field-id";
    ParameterId["FieldName"] = "field-name";
    ParameterId["FilterLevels"] = "filter-levels";
    ParameterId["FilterRangeMax"] = "filter-range-max";
    ParameterId["FilterRangeMin"] = "filter-range-min";
    ParameterId["FilterRangeNullOption"] = "filter-range-null-option";
    ParameterId["FilterUpdateType"] = "filter-update-type";
    ParameterId["FilterValues"] = "filter-values";
    ParameterId["FontNameListItems"] = "font-name-list-items";
    ParameterId["FormattedText"] = "formatted-text";
    ParameterId["FunctionName"] = "function-name";
    ParameterId["HierValSelectionModels"] = "hierarchicalValueSelectionModels";
    ParameterId["HighlightedData"] = "highlighted-data";
    ParameterId["IgnoreAliases"] = "ignore-aliases";
    ParameterId["IgnoreSelection"] = "ignore-selection";
    ParameterId["IncludeAllColumns"] = "include-all-columns";
    ParameterId["InvalidAggFieldName"] = "invalid-agg-field-name";
    ParameterId["InvalidDates"] = "invalid-dates";
    ParameterId["InvalidFieldCaption"] = "invalid-field-caption";
    ParameterId["InvalidFields"] = "invalid-fields";
    ParameterId["InvalidValues"] = "invalid-values";
    ParameterId["IsExcludeMode"] = "is-exclude";
    ParameterId["IsExtensionDialog"] = "is-extension-dialog";
    ParameterId["JoinDescription"] = "join-description";
    ParameterId["LogicalTableId"] = "logical-table-id";
    ParameterId["LogicalTableInfoList"] = "logical-table-info-list";
    ParameterId["MaxHeight"] = "max-height";
    ParameterId["MaxRows"] = "max-rows";
    ParameterId["MaxWidth"] = "max-width";
    ParameterId["MinHeight"] = "min-height";
    ParameterId["MinWidth"] = "min-width";
    ParameterId["PageRowCount"] = "page-row-count";
    ParameterId["ParameterCaption"] = "paremeter-caption";
    ParameterId["ParameterError"] = "parameter-error";
    ParameterId["ParameterFieldName"] = "parameter-field-name";
    ParameterId["ParameterInfo"] = "parameter-info";
    ParameterId["ParameterInfos"] = "parameter-infos";
    ParameterId["ParameterValue"] = "parameter-value";
    ParameterId["PeriodType"] = "period-type";
    ParameterId["QuantitativeDomain"] = "quantitative-dmain";
    ParameterId["QuantRangeSelectionModels"] = "quantativeRangeSelectionModels";
    ParameterId["RangeN"] = "range-n";
    ParameterId["ReplaySpeed"] = "replay-speed";
    ParameterId["SelectedData"] = "selected-data";
    ParameterId["SelectedSheetNames"] = "selected-sheet-names";
    ParameterId["Selection"] = "selection";
    ParameterId["SelectionList"] = "selection-list";
    ParameterId["SelectionUpdateType"] = "selectionUpdateType";
    ParameterId["SendNotifications"] = "send-notifications";
    ParameterId["SettingsValues"] = "settings-values";
    ParameterId["SharedFilterSheets"] = "shared-filter-sheets";
    ParameterId["SharedFiltersInfo"] = "shared-filters-info";
    ParameterId["SheetIdentifier"] = "sheet-identifier";
    ParameterId["SheetName"] = "sheet-name";
    ParameterId["SheetPath"] = "sheet-path";
    ParameterId["ShouldRefreshDS"] = "should-refresh-ds";
    ParameterId["ShowDataTableFormat"] = "show-data-table-format";
    ParameterId["State"] = "state";
    ParameterId["StoryPointIndex"] = "story-point-index";
    ParameterId["StoryPointInfo"] = "story-point-info";
    ParameterId["SwitchToSheetName"] = "switch-to-sheet-name";
    ParameterId["TargetPoint"] = "target-point";
    ParameterId["TestConversionParameter"] = "test-conversion-parameter";
    ParameterId["Text"] = "formatted-text";
    ParameterId["UnderlyingDataTable"] = "underlying-data-table";
    ParameterId["UnderlyingSummaryDataTable"] = "underlying-summary-data-table";
    ParameterId["Url"] = "url";
    ParameterId["UseTabDelimiters"] = "use-tab-delimiters";
    ParameterId["ViewDataTableCacheId"] = "view-data-table-cache-id";
    ParameterId["ViewDataTableId"] = "view-data-table-id";
    ParameterId["VisualId"] = "visual-id";
    ParameterId["VizAPIInputJson"] = "vizapi-input-json";
    ParameterId["VizAPISVG"] = "vizapi-svg";
    ParameterId["WorksheetName"] = "worksheet-name";
    ParameterId["WorksheetFilters"] = "worksheet-filters";
    ParameterId["ZoneIdsVisibilityMap"] = "zone-ids-visibility-map";
})(ParameterId = exports.ParameterId || (exports.ParameterId = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/contract/Verbs.js":
/*!*************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/contract/Verbs.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// Declare this key type and export the NotificationId to make this behave like a string enum.
//
// PLEASE KEEP IN ALPHABETICAL ORDER. This helps with visually finding entries, knowing where to put
// new ones, and merge conflicts.
var VerbId;
(function (VerbId) {
    VerbId["ActivateNextStoryPoint"] = "activate-next-story-point";
    VerbId["ActivatePreviousStoryPoint"] = "activate-previous-story-point";
    VerbId["ActivateSheet"] = "activateSheet";
    VerbId["ActivateStoryPoint"] = "activate-story-point";
    VerbId["AppendExternalMenuItem"] = "append-external-menu-item";
    VerbId["ApplyCategoricalFilter"] = "categorical-filter";
    VerbId["ApplyRangeFilter"] = "range-filter";
    VerbId["ApplyRelativeDateFilter"] = "apply-relative-date-Filter";
    VerbId["BlockExtension"] = "block-extension";
    VerbId["ChangeParameterValue"] = "change-parameter-value";
    VerbId["ChangeSharedFilter"] = "change-shared-filter";
    VerbId["ClearFilter"] = "clear-filter";
    VerbId["ClearSelectedMarks"] = "clear-selected-marks";
    VerbId["CloseDialog"] = "close-dialog";
    VerbId["CreateAnnotation"] = "create-annotation";
    VerbId["DashboardCategoricalFilter"] = "dashboard-categorical-filter";
    VerbId["DisplayDialog"] = "display-dialog";
    VerbId["DownloadWorkbook"] = "download-workbook";
    VerbId["ExecuteExternalMenuItem"] = "execute-external-menu-item";
    VerbId["ExportCrosstab"] = "export-crosstab";
    VerbId["ExportCrosstabCsvDownload"] = "export-crosstab-csv-download";
    VerbId["ExportCrosstabExcelDownload"] = "export-crosstab-excel-download";
    VerbId["ExportData"] = "export-data";
    VerbId["ExportDataDownload"] = "export-data-download";
    VerbId["ExportImage"] = "export-image";
    VerbId["ExportPdf"] = "export-pdf";
    VerbId["ExportPdfDownload"] = "export-pdf-download";
    VerbId["ExportPowerpoint"] = "export-powerpoint";
    VerbId["ExportPowerpointDownload"] = "export-powerpoint-download";
    VerbId["FindParameter"] = "find-parameter";
    VerbId["GetActiveTables"] = "get-active-tables";
    VerbId["GetAllDataSources"] = "get-all-data-sources";
    VerbId["GetAnnotations"] = "get-annotations";
    VerbId["GetCategoricalDomain"] = "get-categorical-domain";
    VerbId["GetConnectionDescriptionSummaries"] = "get-connection-description-summaries";
    VerbId["GetCurrentSrc"] = "get-current-src";
    VerbId["GetCustomViews"] = "get-custom-views";
    VerbId["GetDashboardFilters"] = "get-dashboard-filters";
    VerbId["GetDataSource"] = "get-datasource";
    VerbId["GetDataSourceData"] = "get-datasource-data";
    VerbId["GetDataSources"] = "get-data-sources";
    VerbId["GetDataSummaryData"] = "get-summary-data";
    VerbId["GetDataSummaryDataReader"] = "get-summary-data-reader";
    VerbId["GetDataTableReaderPage"] = "get-data-table-reader-page";
    VerbId["GetEmbeddingClientInfo"] = "get-embedding-client-info";
    VerbId["GetExportCrosstabSheetMap"] = "get-export-crosstab-sheet-map";
    VerbId["GetExportPdfOptions"] = "get-export-pdf-options";
    VerbId["GetField"] = "get-field";
    VerbId["GetFieldAndDataSource"] = "get-field-and-datasource";
    VerbId["GetFilters"] = "get-filters";
    VerbId["GetFonts"] = "get-fonts";
    VerbId["GetHighlightedMarks"] = "get-highlighted-marks";
    VerbId["GetJoinDescription"] = "get-join-description";
    VerbId["GetLogicalTableData"] = "get-logical-table-data";
    VerbId["GetLogicalTableDataReader"] = "get-logical-table-data-reader";
    VerbId["GetLogicalTables"] = "get-logical-tables";
    VerbId["GetParametersForSheet"] = "get-parameters-for-sheet";
    VerbId["GetRangeDomain"] = "get-range-domain";
    VerbId["GetSelectedMarks"] = "get-selected-marks";
    VerbId["GetSharedFilter"] = "get-shared-filter";
    VerbId["GetUnderlyingData"] = "get-underlying-data";
    VerbId["GetUnderlyingTableData"] = "get-underlying-table-data";
    VerbId["GetUnderlyingTableDataReader"] = "get-underlying-table-data-reader";
    VerbId["GetUnderlyingTables"] = "get-underlying-tables";
    VerbId["HierarchicalFilter"] = "hierachical-filter";
    VerbId["InitializeExtension"] = "initialize-extension";
    VerbId["MoveAndResizeZones"] = "move-and-resize-zones";
    VerbId["Redo"] = "redo";
    VerbId["RefreshDataSource"] = "refresh-data-source";
    VerbId["ReleaseDataTableReader"] = "release-data-table-reader";
    VerbId["RemoveAnnotation"] = "remove-annotation";
    VerbId["RemoveCustomView"] = "remove-custom-view";
    VerbId["RemoveExternalMenuItem"] = "remove-external-menu-item";
    VerbId["RenameExternalMenu"] = "rename-external-menu";
    VerbId["ReplayAnimation"] = "replay-animation";
    VerbId["RevertStoryPoint"] = "revert-story-point";
    VerbId["RevertWorkbook"] = "revert-workbook";
    VerbId["SaveExtensionSettings"] = "save-extension-settings";
    VerbId["SaveWorkbookAsCustomView"] = "save-workbook-as-custom-view";
    VerbId["SelectByValue"] = "select-by-value";
    VerbId["SetActiveCustomViewAsDefault"] = "set-active-custom-view-as-default";
    VerbId["SetAutoUpdate"] = "set-auto-update";
    VerbId["SetClickThrough"] = "set-click-through";
    VerbId["SetSheetSize"] = "set-sheet-size";
    VerbId["SetZoneVisibility"] = "set-zone-visibility";
    VerbId["Share"] = "share";
    VerbId["ShowCustomView"] = "show-custom-view";
    VerbId["TestConversionVerb"] = "test-conversion-verb";
    VerbId["Undo"] = "undo";
    VerbId["UpdateCustomView"] = "update-custom-view";
    VerbId["VizAPI"] = "viz-api";
})(VerbId = exports.VerbId || (exports.VerbId = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/interface/AskDataInterface.js":
/*!*************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/interface/AskDataInterface.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var AskDataOptionNames;
(function (AskDataOptionNames) {
    AskDataOptionNames["token"] = "token";
    AskDataOptionNames["origin"] = "origin";
    AskDataOptionNames["showEmbed"] = "showEmbed";
    AskDataOptionNames["showPin"] = "showPin";
    AskDataOptionNames["showSave"] = "showSave";
    AskDataOptionNames["showShare"] = "showShare";
    AskDataOptionNames["debug"] = ":jsdebug";
    AskDataOptionNames["ApiID"] = ":apiID";
    AskDataOptionNames["ApiExternalVersion"] = ":apiExternalVersion";
    AskDataOptionNames["ApiInternalVersion"] = ":apiInternalVersion";
    AskDataOptionNames["AskDataWebComponent"] = ":askDataWebComponent";
})(AskDataOptionNames = exports.AskDataOptionNames || (exports.AskDataOptionNames = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/interface/VqlInterface.js":
/*!*********************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/interface/VqlInterface.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * These strings were *manually copied* from the server,
 * workgroup/src/silos/tableau-server/libraries/tab-controller-vizql/src/com/tableausoftware/
 * controller/vizql/constants/ParameterKeys.java#L9
 * should be exported instead
 * parameters that vizql will accept in an embedding URL
 **/
var VqlParameterNames;
(function (VqlParameterNames) {
    VqlParameterNames["ONE"] = "1";
    VqlParameterNames["ALERTS"] = ":alerts";
    VqlParameterNames["ALIAS"] = "alias";
    VqlParameterNames["ALLOW_DEFERRED_BOOTSTRAP"] = ":allowDeferredBootstrap";
    VqlParameterNames["ALLOW_AUTOGEN_WORKSHEET_PHONE_LAYOUTS"] = "allowAutogenWorksheetPhoneLayouts";
    VqlParameterNames["API_ID"] = ":apiID";
    VqlParameterNames["APP"] = ":app";
    VqlParameterNames["ATTACHMENT"] = "attachment";
    VqlParameterNames["IS_IPAD_APP"] = "app";
    VqlParameterNames["ANIMATE_TRANSITION"] = ":animate_transition";
    VqlParameterNames["ASCENDING"] = "ascending";
    VqlParameterNames["AUTHENTICATION"] = "authentication";
    VqlParameterNames["ATTRIBUTES"] = "attributes";
    VqlParameterNames["AUTHORING_SHEET"] = ":authSheet";
    VqlParameterNames["AXIS"] = "axis";
    VqlParameterNames["BOOTSTRAP_WHEN_NOTIFIED"] = ":bootstrapWhenNotified";
    VqlParameterNames["BROWSER_BACK_BUTTON_UNDO"] = ":browserBackButtonUndo";
    VqlParameterNames["BROWSER_RENDERING_ON"] = "isBrowserRendering";
    VqlParameterNames["BROWSER_RENDERING_THRESHOLD"] = "browserRenderingThreshold";
    VqlParameterNames["CHARSET"] = "charset";
    VqlParameterNames["CLIENT_DIMENSION"] = "clientDimension";
    VqlParameterNames["CLIENT_IP"] = "client_ip";
    VqlParameterNames["CLIENT_NUM"] = "clientNum";
    VqlParameterNames["COLON_EMBEDDED"] = ":embedded";
    VqlParameterNames["COLON_MOBILE"] = ":mobile";
    VqlParameterNames["COLON_DEEP_LINKING_DISABLED"] = ":deepLinkingDisabled";
    VqlParameterNames["COLON_WATERMARK"] = ":watermark";
    VqlParameterNames["COMMENTS"] = ":comments";
    VqlParameterNames["COMMENTING_ENABLED"] = ":commentingEnabled";
    VqlParameterNames["COMMENTING_MENTIONS_ENABLED"] = ":commentingMentions";
    VqlParameterNames["CONNECTION"] = "connection";
    VqlParameterNames["CREATED_BY_FEATURE"] = "createdByFeature";
    VqlParameterNames["CRYPTED_PASSWORD"] = "crypted";
    VqlParameterNames["CSSDEBUG"] = ":cssdebug";
    VqlParameterNames["CSV"] = "csv";
    VqlParameterNames["CUSTOM_VIEWS"] = ":customViews";
    VqlParameterNames["CV"] = ":cv";
    VqlParameterNames["CV_ID"] = "cvId";
    VqlParameterNames["DASHBOARD_PORT_SIZE"] = "dashboardPortSize";
    VqlParameterNames["DATA_DETAILS"] = ":dataDetails";
    VqlParameterNames["DATASOURCE"] = "datasource";
    VqlParameterNames["DEBUG"] = ":debug";
    VqlParameterNames["DELAY"] = ":delay";
    VqlParameterNames["DEPTH"] = "depth";
    VqlParameterNames["DEVICE_TYPE"] = ":device";
    VqlParameterNames["DEVICE_PIXEL_RATIO"] = "devicePixelRatio";
    VqlParameterNames["DEVICE_PREVIEW_MODE"] = ":devicepreviewmode";
    VqlParameterNames["DIMENSIONS"] = ":dimensions";
    VqlParameterNames["DISABLE_SHARED_SESSIONS"] = ":disable_shared_sessions";
    VqlParameterNames["DISABLE_URL_ACTIONS_POPUPS"] = ":disableUrlActionsPopups";
    VqlParameterNames["DIRECTION"] = "direction";
    VqlParameterNames["DISPLAY_OVERLAY"] = ":display_overlay";
    VqlParameterNames["DISPLAY_SHARE"] = ":display_share";
    VqlParameterNames["DISPLAY_SPINNER"] = ":display_spinner";
    VqlParameterNames["DISPLAY_STATIC_IMAGE"] = ":display_static_image";
    VqlParameterNames["DISPLAY_TABS"] = "display_tabs";
    VqlParameterNames["DISPLAY_VIEW_COUNT"] = ":display_count";
    VqlParameterNames["IGNORE_STICKY_SESSION"] = ":ignore_sticky_session";
    VqlParameterNames["INCREMENT_VIEW_COUNT"] = ":increment_view_count";
    VqlParameterNames["DOCMODE"] = "docmode";
    VqlParameterNames["DOMAIN"] = "domain";
    VqlParameterNames["DO_WORK"] = "do_work";
    VqlParameterNames["DX"] = "dx";
    VqlParameterNames["DY"] = "dy";
    VqlParameterNames["EDIT_DATA_ALERT"] = ":editDataAlert";
    VqlParameterNames["EMBED"] = ":embed";
    VqlParameterNames["EMBEDDED"] = "embedded";
    VqlParameterNames["ENCRYPTED"] = "encrypted";
    VqlParameterNames["API_EXTERNAL_VERSION"] = ":apiExternalVersion";
    VqlParameterNames["API_INTERNAL_VERSION"] = ":apiInternalVersion";
    VqlParameterNames["EXCLUDE"] = "exclude";
    VqlParameterNames["EXPORT_FORMAT"] = ":export_format";
    VqlParameterNames["FIELDNAME"] = "fieldname";
    VqlParameterNames["FIELD_NAME"] = "field_name";
    VqlParameterNames["FIELD_SEP"] = "field_sep";
    VqlParameterNames["FILE"] = "file";
    VqlParameterNames["FILTER_TILE_SIZE"] = "filterTileSize";
    VqlParameterNames["FN"] = "fn";
    VqlParameterNames["FOCUS"] = "focus";
    VqlParameterNames["FORCE_CACHE"] = "force_cache";
    VqlParameterNames["FORMAT"] = "format";
    VqlParameterNames["FORMAT_DATA_VALUE_LOCALLY"] = "formatDataValueLocally";
    VqlParameterNames["FROM_WG"] = ":from_wg";
    VqlParameterNames["GRAPHQL_DATABASE_ID"] = ":graphQLDatabaseId";
    VqlParameterNames["GRAPHQL_TABLE_ID"] = ":graphQLTableId";
    VqlParameterNames["GUID"] = ":guid";
    VqlParameterNames["H"] = "h";
    VqlParameterNames["HIDDEN"] = "hidden";
    VqlParameterNames["HIDE_CLOSE_BUTTON"] = ":hideCloseButton";
    VqlParameterNames["HIDE_EDIT_BUTTON"] = ":hideEditButton";
    VqlParameterNames["HIDE_EDIT_IN_DESKTOP_BUTTON"] = ":hideEditInDesktopButton";
    VqlParameterNames["HIGH_DPI"] = ":highdpi";
    VqlParameterNames["IMAGE_SIZE_LIMIT"] = "imageSizeLimit";
    VqlParameterNames["TRANSPARENT_LINE_MARKS_LIMIT"] = "transparentLineMarkLimit";
    VqlParameterNames["CLIENT_RENDER_PIXEL_LIMIT"] = "clientRenderPixelLimit";
    VqlParameterNames["IN"] = "in";
    VqlParameterNames["INSTANCE_ID"] = ":iid";
    VqlParameterNames["IS_GUEST_REDIRECT_FROM_VIZPORTAL"] = ":isGuestRedirectFromVizportal";
    VqlParameterNames["IS_MARK_ANIMATION_ENABLED"] = "isMarkAnimationEnabled";
    VqlParameterNames["IS_VIZPORTAL"] = ":isVizPortal";
    VqlParameterNames["INPUT_"] = "input_string";
    VqlParameterNames["JSDEBUG"] = ":jsdebug";
    VqlParameterNames["JSON"] = "json";
    VqlParameterNames["JSON_ONLY"] = ":jsonOnly";
    VqlParameterNames["KEEPFILE"] = "keepfile";
    VqlParameterNames["KEY"] = "key";
    VqlParameterNames["LANGUAGE"] = "language";
    VqlParameterNames["LANGUAGE_REQUESTED"] = ":language";
    VqlParameterNames["LINKTARGET"] = ":linktarget";
    VqlParameterNames["LOAD_ORDER_ID"] = ":loadOrderID";
    VqlParameterNames["LOAD_NEWEST_REVISION"] = ":loadNewestRevision";
    VqlParameterNames["LOCAL_PATHS"] = ":localPaths";
    VqlParameterNames["LOCALE"] = "locale";
    VqlParameterNames["LOCATION_ID"] = "locationid";
    VqlParameterNames["LOCATION_TYPE"] = "locationtype";
    VqlParameterNames["WORKBOOK_LOCALE"] = "workbookLocale";
    VqlParameterNames["MAXROWS"] = "maxrows";
    VqlParameterNames["MAX_AGE"] = "maxAge";
    VqlParameterNames["MAX_ROWS"] = "maxRows";
    VqlParameterNames["METHOD"] = "method";
    VqlParameterNames["MOBILE"] = "mobile";
    VqlParameterNames["MODIFIER"] = "modifier";
    VqlParameterNames["NAME"] = "name";
    VqlParameterNames["NAV_TYPE"] = "navType";
    VqlParameterNames["NAV_SRC"] = "navSrc";
    VqlParameterNames["NOATTACHMENT"] = "no-attachment";
    VqlParameterNames["NO_OVERWRITE"] = "no_overwrite";
    VqlParameterNames["OPEN_AUTHORING_IN_TOP_WINDOW"] = ":openAuthoringInTopWindow";
    VqlParameterNames["OPENID_HD"] = ":openid_hd";
    VqlParameterNames["OPENID_LOGIN_HINT"] = ":openid_login_hint";
    VqlParameterNames["OAUTHREQUEST"] = "oauthrequest";
    VqlParameterNames["OAUTH_CREDENTIAL_IDS"] = "oauth_credential_ids";
    VqlParameterNames["OFFLINE_MODE"] = ":offlinemode";
    VqlParameterNames["ORIGIN"] = ":origin";
    VqlParameterNames["OVERLAY"] = ":overlay";
    VqlParameterNames["P"] = "p";
    VqlParameterNames["PATH"] = "path";
    VqlParameterNames["PANE_RESOLVER_X"] = "paneResolverX";
    VqlParameterNames["PANE_RESOLVER_Y"] = "paneResolverY";
    VqlParameterNames["PARAM"] = "param";
    VqlParameterNames["PARENT_ID"] = "parent_id";
    VqlParameterNames["PASSWORD"] = "password";
    VqlParameterNames["PATTERN"] = "pattern";
    VqlParameterNames["PIXEL_RATIO"] = ":pixelratio";
    VqlParameterNames["PREFIX"] = ":prefix";
    VqlParameterNames["PREVIEW"] = ":preview";
    VqlParameterNames["PRIMARY_CONTENT_URL"] = "primary_content_url";
    VqlParameterNames["PROJECT"] = "project";
    VqlParameterNames["PROTOCOL"] = "protocol";
    VqlParameterNames["PSEUDO"] = ":pseudo";
    VqlParameterNames["QUERY"] = "query";
    VqlParameterNames["R"] = "r";
    VqlParameterNames["RANGE_TYPE"] = "range_type";
    VqlParameterNames["RECORD_SEP"] = "record_sep";
    VqlParameterNames["RECORD_CLIENT_PERFORMANCE"] = ":record_client_performance";
    VqlParameterNames["RECORD_PERFORMANCE"] = ":record_performance";
    VqlParameterNames["RECOVER_OLD_SESSION_ID"] = ":recover_old_session_id";
    VqlParameterNames["RECOVER_SESSION_STATE_TICKETS"] = ":recover_session_state_tickets";
    VqlParameterNames["REFRESH"] = ":refresh";
    VqlParameterNames["REFRESHUNMODIFIED"] = ":refreshunmodified";
    VqlParameterNames["REGION"] = "region";
    VqlParameterNames["RELOAD_ON_CUSTOM_VIEW_SAVE"] = ":reloadOnCustomViewSave";
    VqlParameterNames["RENDER"] = ":render";
    VqlParameterNames["RENDER_MAPS_CLIENT_SIDE"] = "renderMapsClientSide";
    VqlParameterNames["RETRY"] = ":retry";
    VqlParameterNames["REUSE"] = "reuse";
    VqlParameterNames["REUSE_FOREVER"] = "reuse_forever";
    VqlParameterNames["REVERT"] = ":revert";
    VqlParameterNames["SAVE_DB_PASSWORDS"] = "save_db_passwords";
    VqlParameterNames["SELECT_X"] = "select_x";
    VqlParameterNames["SELECT_Y"] = "select_y";
    VqlParameterNames["SESSION_FEATURE_PREFIX"] = ":ff_";
    VqlParameterNames["SESSION_FLAGS"] = ":session_feature_flags";
    VqlParameterNames["SHARE_BUTTON"] = "share_button";
    VqlParameterNames["SHEET_ID"] = "sheet_id";
    VqlParameterNames["SHARED"] = "shared";
    VqlParameterNames["SHOWALL"] = "showall";
    VqlParameterNames["SHOW_APP_BANNER"] = ":showAppBanner";
    VqlParameterNames["SHOW_ASK_DATA"] = ":showAskData";
    VqlParameterNames["SHOW_PARAMS"] = "showParams";
    VqlParameterNames["SHOW_SHARE_OPTIONS"] = ":showShareOptions";
    VqlParameterNames["SIZE"] = ":size";
    VqlParameterNames["SOURCE"] = "source";
    VqlParameterNames["STATE"] = "state";
    VqlParameterNames["STICKY_SESSION_KEY"] = "stickySessionKey";
    VqlParameterNames["SUBSCRIPTIONS"] = ":subscriptions";
    VqlParameterNames["SUMMARY"] = "summary";
    VqlParameterNames["SUPPRESS_DEFAULT_EDIT_BEHAVIOR"] = ":suppressDefaultEditBehavior";
    VqlParameterNames["SYNC_SESSION"] = ":sync_session";
    VqlParameterNames["SYNC_SESSION_STATE"] = "sync_session_state";
    VqlParameterNames["TABS"] = ":tabs";
    VqlParameterNames["TARGET"] = "target";
    VqlParameterNames["TARGET_SITE"] = "target_site";
    VqlParameterNames["TOOLBAR"] = ":toolbar";
    VqlParameterNames["TOOLTIP"] = ":tooltip";
    VqlParameterNames["TS"] = "ts";
    VqlParameterNames["UNDERLYING_TABLE_ID"] = "underlying_table_id";
    VqlParameterNames["UNDERLYING_TABLE_CAPTION"] = "underlying_table_caption";
    VqlParameterNames["UPDATE_TYPE"] = "update_type";
    VqlParameterNames["USE_GUEST"] = ":useGuest";
    VqlParameterNames["USE_INLINE_IMAGES"] = "use_inline_images";
    VqlParameterNames["USERAGENT"] = "useragent";
    VqlParameterNames["USERNAME"] = "username";
    VqlParameterNames["VALUE"] = "value";
    VqlParameterNames["VERBOSE_MODE"] = "verboseMode";
    VqlParameterNames["VIEW_ID"] = "views_id";
    VqlParameterNames["VIZ_SNAPSHOT_ID"] = "viz_snapshot_id";
    VqlParameterNames["VW"] = ":vw";
    VqlParameterNames["W"] = "w";
    VqlParameterNames["WORKSHEET_PORT_SIZE"] = "worksheetPortSize";
    VqlParameterNames["WATERMARK"] = "watermark";
    VqlParameterNames["WATERMARK_MARGIN"] = ":watermark_margin";
    VqlParameterNames["WB"] = ":wb";
    VqlParameterNames["WHICH"] = "which";
    VqlParameterNames["X"] = "x";
    VqlParameterNames["Y"] = "y";
    VqlParameterNames["ZID"] = "zid";
    VqlParameterNames["ZONE_ID"] = "zone_id";
    VqlParameterNames["KEYCHAIN_VERSION"] = "keychain_version";
    VqlParameterNames["DATASOURCE_ID"] = "datasource_id";
    VqlParameterNames["DATASOURCE_NAME"] = "datasource_name";
    VqlParameterNames["LENS_ID"] = "lens_id";
    VqlParameterNames["WIDTH"] = "width";
    VqlParameterNames["HEIGHT"] = "height";
    // Default Layout params
    VqlParameterNames["LAYOUT_VIEWS"] = "views";
    VqlParameterNames["LAYOUT_MENUS"] = "menus";
    VqlParameterNames["LAYOUT_GEOMETRY"] = "geometry";
    VqlParameterNames["LAYOUT_PAGES"] = "pages";
    VqlParameterNames["LAYOUT_CACHEURL"] = "cacheurl";
    VqlParameterNames["LAYOUT_SHEET"] = "sheet";
    VqlParameterNames["LAYOUT_DEPTH"] = "depth";
})(VqlParameterNames || (VqlParameterNames = {}));
/**
 * parameters that are only relevant when working with Tableau Public
 * maybe not really necessry to split them out
 */
var PublicParameterNames;
(function (PublicParameterNames) {
    PublicParameterNames["SHOW_VIZ_HOME"] = ":showVizHome";
    // display view count
})(PublicParameterNames || (PublicParameterNames = {}));
/**
 * Map the parameter names as used in the url to what we call them publicly in the embedding library.
 * The only parameters listed here should be the ones that get sent to vizql
 *  - this should match the interface at external-contract:VizInterfaces:VizSettings
 */
var VizOptionNames;
(function (VizOptionNames) {
    // publicName = internalStringValue
    VizOptionNames["Size"] = ":size";
    VizOptionNames["Embed"] = ":embed";
    VizOptionNames["ApiInternalVersion"] = ":apiInternalVersion";
    VizOptionNames["ApiExternalVersion"] = ":apiExternalVersion";
    VizOptionNames["ShowVizHome"] = ":showVizHome";
    VizOptionNames["Jsdebug"] = ":jsdebug";
    VizOptionNames["BootstrapWhenNotified"] = ":bootstrapWhenNotified";
    VizOptionNames["NavType"] = "navType";
    VizOptionNames["NavSrc"] = "navSrc";
    VizOptionNames["debug"] = ":jsdebug";
    VizOptionNames["ApiID"] = ":apiID";
    VizOptionNames["disableUrlActionsPopups"] = ":disableUrlActionsPopups";
    VizOptionNames["hideTabs"] = ":tabs";
    VizOptionNames["toolbar"] = ":toolbar";
    VizOptionNames["device"] = ":device";
    VizOptionNames["instanceIdToClone"] = ":iid";
    VizOptionNames["touchOptimize"] = "mobile";
    VizOptionNames["hideEditButton"] = ":hideEditButton";
    VizOptionNames["hideEditInDesktopButton"] = ":hideEditInDesktopButton";
    VizOptionNames["suppressDefaultEditBehavior"] = ":suppressDefaultEditBehavior";
    VizOptionNames["hideCloseButton"] = ":hideCloseButton";
})(VizOptionNames = exports.VizOptionNames || (exports.VizOptionNames = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/messaging/CrossFrameMessenger.js":
/*!****************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/messaging/CrossFrameMessenger.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var guid = __webpack_require__(/*! guid */ "../../node_modules/guid/guid.js");
var JsApiInternalContract_1 = __webpack_require__(/*! ../JsApiInternalContract */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var CrossFramePreparedMessage_1 = __webpack_require__(/*! ./CrossFramePreparedMessage */ "../api-internal-contract-js/lib/src/messaging/CrossFramePreparedMessage.js");
var MessageTypeChecks_1 = __webpack_require__(/*! ./MessageTypeChecks */ "../api-internal-contract-js/lib/src/messaging/MessageTypeChecks.js");
var MessageTypes_1 = __webpack_require__(/*! ./interface/MessageTypes */ "../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js");
/**
 * The CrossFrameMessenger is the primary export from the api-messaging module. An instance of
 * this class can be instantiated on both sides of a frame boundary to facilitate communication
 * in both directions between the frames. This class implements both the dispatcher and the listener
 * portions, but doesn't require callers to care about both.
 */
var CrossFrameMessenger = /** @class */ (function () {
    /**
     * Creates an instance of CrossFrameMessenger. If you would like to use the CrossFrameMessenger as a MessageListener,
     * be sure to call StartListening and register message handlers.
     * @param thisWindow The window object which the CrossFrameMessenger lives. An onMessage listener will be added here.
     * @param [otherWindow] Optional otherWindow which messages will be posted to.
     *                      If defined, incoming messages must originate from otherWindow to be passed on
     * @param [otherWindowOrigin] The target origin which otherWindow must have in order to receive dispatched messages.
     *                            This value will be sent as the targetOrigin of a postMessage
     *                            (https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage)
     */
    function CrossFrameMessenger(thisWindow, otherWindow, otherWindowOrigin) {
        this.thisWindow = thisWindow;
        this.otherWindow = otherWindow;
        this.otherWindowOrigin = otherWindowOrigin;
        // Make sure to call StartListening
    }
    ///// MessageListener Implementation
    CrossFrameMessenger.prototype.startListening = function () {
        var _this = this;
        // Check if we already are listening, if not, hook up a message listener
        if (!this.unregisterFunction) {
            var boundHandler_1 = this.onMessageReceived.bind(this);
            this.thisWindow.addEventListener('message', boundHandler_1, true);
            this.unregisterFunction = function () { return _this.thisWindow.removeEventListener('message', boundHandler_1, true); };
        }
    };
    CrossFrameMessenger.prototype.stopListening = function () {
        // Stop listening if we have started listening
        if (this.unregisterFunction) {
            this.unregisterFunction();
            this.unregisterFunction = undefined;
        }
    };
    CrossFrameMessenger.prototype.setInitializeMessageHandler = function (handler) {
        this.initializeMessageHandler = handler;
    };
    CrossFrameMessenger.prototype.setCommandResponseMessageHandler = function (handler) {
        this.commandResponseMessageHandler = handler;
    };
    CrossFrameMessenger.prototype.setCommandMessageHandler = function (handler) {
        this.commandMessageHandler = handler;
    };
    CrossFrameMessenger.prototype.setNotificationMessageHandler = function (handler) {
        this.notificationMessageHandler = handler;
    };
    CrossFrameMessenger.prototype.setHandshakeMessageHandler = function (handler) {
        this.handshakeMessageHandler = handler;
    };
    ///// MessageDispatcher Implementation
    /**
     * @param apiVersion api-internal-contract-js version (exported in JsApiInternalConntract)
     * @param crossFrameVersion crossframe messaging version (exported in JsApiInternalConntract)
     * @param options additional options that can be passed at initialization (information about the version of
     *                external being used for example)
     */
    CrossFrameMessenger.prototype.prepareInitializationMessage = function (apiVersion, crossFrameVersion, options) {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.Initialize,
            crossFrameVersion: crossFrameVersion,
            apiVersion: apiVersion,
            options: options,
        };
        return this.prepareMessage(message);
    };
    CrossFrameMessenger.prototype.prepareCommandMessage = function (verbId, parameters) {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.Command,
            verbId: verbId,
            parameters: parameters,
        };
        return this.prepareMessage(message);
    };
    CrossFrameMessenger.prototype.prepareCommandResponseMessage = function (commandGuid, data, error) {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.CommandResponse,
            commandGuid: commandGuid,
            data: data,
            error: error,
        };
        if (error) {
            // stringify error object to remove unserializable fields like functions and prevent serialization errors
            message.error = JSON.parse(JSON.stringify(error));
        }
        return this.prepareMessage(message);
    };
    CrossFrameMessenger.prototype.prepareNotificationMessage = function (notificationId, data) {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.Notification,
            notificationId: notificationId,
            data: data,
        };
        return this.prepareMessage(message);
    };
    CrossFrameMessenger.prototype.prepareAckMessage = function () {
        var message = {
            msgGuid: guid.raw(),
            msgType: MessageTypes_1.MessageType.Ack,
            platformVersion: JsApiInternalContract_1.INTERNAL_CONTRACT_VERSION,
        };
        return this.prepareMessage(message);
    };
    /**
     * Prepares a pending message for sending and returns the prepared message
     *
     * @param msg The message to be sent to this.otherWindow
     * @returns The prepared message
     */
    CrossFrameMessenger.prototype.prepareMessage = function (msg) {
        if (!this.otherWindow || !this.otherWindowOrigin) {
            throw 'Other window not initialized, cannot dispatch messages';
        }
        var preparedMessage = new CrossFramePreparedMessage_1.CrossFramePreparedMessage(msg, this.otherWindow, this.otherWindowOrigin);
        return preparedMessage;
    };
    /**
     * Called when a message is received. Does some validation of the message, and then
     * calls an appropriate message handler if one is defined
     *
     * @param event The incoming MessageEvent
     */
    CrossFrameMessenger.prototype.onMessageReceived = function (event) {
        // If we have an otherWindow defined, make sure the message is coming from there
        if (this.otherWindow && event.source !== this.otherWindow) {
            return;
        }
        // Do some validation on event.data to make sure that we have received a real message
        if (!event.data) {
            return;
        }
        var message = event.data;
        if (!MessageTypeChecks_1.isMessage(message)) {
            return;
        }
        // Check the declared message type, validate the message, and call an appropriate hander if one exists
        switch (message.msgType) {
            case MessageTypes_1.MessageType.Initialize: {
                if (!MessageTypeChecks_1.isInitMessage(message) || !this.initializeMessageHandler) {
                    return;
                }
                this.initializeMessageHandler(message, event.source);
                break;
            }
            case MessageTypes_1.MessageType.CommandResponse: {
                if (!MessageTypeChecks_1.isCommandResponseMessage(message) || !this.commandResponseMessageHandler) {
                    return;
                }
                this.commandResponseMessageHandler(message, event.source);
                break;
            }
            case MessageTypes_1.MessageType.Command: {
                if (!MessageTypeChecks_1.isCommandMessage(message) || !this.commandMessageHandler) {
                    return;
                }
                this.commandMessageHandler(message, event.source);
                break;
            }
            case MessageTypes_1.MessageType.Notification: {
                if (!MessageTypeChecks_1.isNotificationMessage(message) || !this.notificationMessageHandler) {
                    return;
                }
                this.notificationMessageHandler(message, event.source);
                break;
            }
            case MessageTypes_1.MessageType.Handshake: {
                if (!MessageTypeChecks_1.isHandshakeMessage(message) || !this.handshakeMessageHandler) {
                    return;
                }
                this.handshakeMessageHandler(message, event.source);
                break;
            }
            default:
            // Just ignore this since we don't know how to handle the message type
        }
    };
    CrossFrameMessenger.prototype.setOtherWindow = function (otherWindow) {
        this.otherWindow = otherWindow;
    };
    CrossFrameMessenger.prototype.setOtherWindowOrigin = function (origin) {
        this.otherWindowOrigin = origin;
    };
    return CrossFrameMessenger;
}());
exports.CrossFrameMessenger = CrossFrameMessenger;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/messaging/CrossFramePreparedMessage.js":
/*!**********************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/messaging/CrossFramePreparedMessage.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the PreparedMessage interface used to post messages between
 * two frames using window.postMessage
 */
var CrossFramePreparedMessage = /** @class */ (function () {
    /**
     * Creates an instance of CrossFramePreparedMessage.
     * @param _message The message to be sent
     * @param _target The target window where the message will be sent
     * @param _origin The targetOrigin where this message can be received
     */
    function CrossFramePreparedMessage(_message, _target, _origin) {
        this._message = _message;
        this._target = _target;
        this._origin = _origin;
    }
    Object.defineProperty(CrossFramePreparedMessage.prototype, "messageGuid", {
        get: function () {
            return this._message.msgGuid;
        },
        enumerable: true,
        configurable: true
    });
    CrossFramePreparedMessage.prototype.send = function () {
        this._target.postMessage(this._message, this._origin);
        return this;
    };
    return CrossFramePreparedMessage;
}());
exports.CrossFramePreparedMessage = CrossFramePreparedMessage;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/messaging/MessageTypeChecks.js":
/*!**************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/messaging/MessageTypeChecks.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var guid = __webpack_require__(/*! guid */ "../../node_modules/guid/guid.js");
var Notifications_1 = __webpack_require__(/*! ../contract/Notifications */ "../api-internal-contract-js/lib/src/contract/Notifications.js");
var MessageTypes_1 = __webpack_require__(/*! ./interface/MessageTypes */ "../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js");
var expectedEmptyNotifications = new Set([
    Notifications_1.NotificationId.EditButtonClicked,
    Notifications_1.NotificationId.EditInDesktopButtonClicked,
    Notifications_1.NotificationId.WorkbookPublished,
    Notifications_1.NotificationId.WorkbookReadyToClose,
]);
/* tslint:disable no-any */
function isMessage(data) {
    if (!data) {
        return false;
    }
    var message = data;
    if (!message || !message.msgGuid || !message.msgType) {
        return false;
    }
    if (!guid.isGuid(message.msgGuid)) {
        return false;
    }
    if (typeof message.msgType !== 'string') {
        return false;
    }
    var messageTypes = [
        MessageTypes_1.MessageType.Command,
        MessageTypes_1.MessageType.CommandResponse,
        MessageTypes_1.MessageType.Initialize,
        MessageTypes_1.MessageType.Notification,
        MessageTypes_1.MessageType.Handshake,
    ];
    if (messageTypes.indexOf(message.msgType) < 0) {
        return false;
    }
    return true;
}
exports.isMessage = isMessage;
function isVersion(versionNumber) {
    if (!versionNumber) {
        return false;
    }
    var v = versionNumber;
    if (typeof v !== 'object') {
        return false;
    }
    if (typeof v.fix !== 'number' || typeof v.minor !== 'number' || typeof v.major !== 'number') {
        return false;
    }
    return true;
}
exports.isVersion = isVersion;
function isInitMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var initMessage = message;
    if (initMessage.msgType !== MessageTypes_1.MessageType.Initialize) {
        return false;
    }
    if (!initMessage.apiVersion || !isVersion(initMessage.apiVersion)) {
        return false;
    }
    if (!initMessage.crossFrameVersion || !isVersion(initMessage.crossFrameVersion)) {
        return false;
    }
    return true;
}
exports.isInitMessage = isInitMessage;
function isCommandResponseMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var crMessage = message;
    if (crMessage.msgType !== MessageTypes_1.MessageType.CommandResponse) {
        return false;
    }
    if (!guid.isGuid(crMessage.commandGuid)) {
        return false;
    }
    if (!crMessage.data && !crMessage.error) {
        return false;
    }
    return true;
}
exports.isCommandResponseMessage = isCommandResponseMessage;
function isCommandMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var commandMessage = message;
    if (commandMessage.msgType !== MessageTypes_1.MessageType.Command) {
        return false;
    }
    if (!commandMessage.parameters || typeof commandMessage.parameters !== 'object') {
        return false;
    }
    if (!commandMessage.verbId || typeof commandMessage.verbId !== 'string') {
        return false;
    }
    return true;
}
exports.isCommandMessage = isCommandMessage;
function isNotificationMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var notificationMessage = message;
    if (notificationMessage.msgType !== MessageTypes_1.MessageType.Notification) {
        return false;
    }
    if (!notificationMessage.data && !expectedEmptyNotifications.has(notificationMessage.notificationId)) {
        return false;
    }
    if (!notificationMessage.notificationId || typeof notificationMessage.notificationId !== 'string') {
        return false;
    }
    return true;
}
exports.isNotificationMessage = isNotificationMessage;
function isHandshakeMessage(message) {
    if (!isMessage(message)) {
        return false;
    }
    var handshakeMessage = message;
    if (handshakeMessage.msgType !== MessageTypes_1.MessageType.Handshake) {
        return false;
    }
    return true;
}
exports.isHandshakeMessage = isHandshakeMessage;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js":
/*!*******************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/messaging/interface/MessageTypes.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Enum defining the 4 different types of messages we have defined
 */
var MessageType;
(function (MessageType) {
    MessageType["Initialize"] = "initialize";
    MessageType["Notification"] = "notification";
    MessageType["Command"] = "command";
    MessageType["CommandResponse"] = "command-response";
    MessageType["Handshake"] = "v-handshake";
    MessageType["Ack"] = "v-ack";
})(MessageType = exports.MessageType || (exports.MessageType = {}));


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/IdentityVersionConverter.js":
/*!**********************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/IdentityVersionConverter.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// tslint:disable:no-any
/**
 * This version converter doesn't actually do anything but is useful for testing or when we have
 * a matching platform and internal version number
 */
var IdentityVersionConverter = /** @class */ (function () {
    function IdentityVersionConverter() {
    }
    IdentityVersionConverter.prototype.upgradeExecuteCall = function (verb, parameters) {
        return {
            verb: verb,
            parameters: parameters,
        };
    };
    IdentityVersionConverter.prototype.downgradeExecuteReturn = function (executeResponse) {
        return executeResponse;
    };
    IdentityVersionConverter.prototype.downgradeNotification = function (notification) {
        return notification;
    };
    return IdentityVersionConverter;
}());
exports.IdentityVersionConverter = IdentityVersionConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/StackingVersionConverter.js":
/*!**********************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/StackingVersionConverter.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// tslint:disable:no-any
/**
 * The version converter is designed to allow the platform and external modules
 * to seemlessly communicate over two different versions of the internal API. The only
 * mode it supports is external's version <= platform's version. When executing
 * commands, it is used to upgrade the external representation to what platform knows on the way in
 * and downgrade the representations on the way out. Similarly for notifications, it can
 * downgrade those on the way from platform to external.
 */
var StackingVersionConverter = /** @class */ (function () {
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalMajorVersion The major version of the internal contract api-external-js is using
     * @param _platformMajorVersion The major version of the internal contract the api-platform-js is using
     * @param _upgradeExecuteTranslations Ordered list of the translations to perform when upgrading cmd parameters
     * @param _downgradeExecuteTranslations Ordered list of downgrade translations to perform after a cmd
     * @param _downgradeNotificationTranslations Ordered list of downgrade translations to perform on a notification
     */
    function StackingVersionConverter(_externalMajorVersion, _platformMajorVersion, _upgradeExecuteTranslations, _downgradeExecuteTranslations, _downgradeNotificationTranslations) {
        this._externalMajorVersion = _externalMajorVersion;
        this._platformMajorVersion = _platformMajorVersion;
        this._upgradeExecuteTranslations = _upgradeExecuteTranslations;
        this._downgradeExecuteTranslations = _downgradeExecuteTranslations;
        this._downgradeNotificationTranslations = _downgradeNotificationTranslations;
        if (this._externalMajorVersion > this._platformMajorVersion) {
            throw new Error("Cannot convert between external version " + this._externalMajorVersion + " and " + this._platformMajorVersion);
        }
    }
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalVersion The version of the internal contract api-external-js is using
     * @param _platformVersion The version of the internal contract the api-platform-js is using
     * @param _upgradeExecuteTranslations Ordered list of the translations to perform when upgrading cmd parameters
     * @param _downgradeExecuteTranslations Ordered list of downgrade translations to perform after a cmd
     * @param _downgradeNotificationTranslations Ordered list of downgrade translations to perform on a notification
     */
    StackingVersionConverter.fromData = function (externalVersion, platformVersion, upgradeExecuteTranslations, downgradeExecuteTranslations, downgradeNotificationTranslations) {
        return new this(externalVersion.major, platformVersion.major, upgradeExecuteTranslations, downgradeExecuteTranslations, downgradeNotificationTranslations);
    };
    StackingVersionConverter.prototype.upgradeExecuteCall = function (verb, parameters) {
        // Perform the upgrade of the verb and parameters to the level that platform is using
        var upgraded = { verb: verb, parameters: parameters };
        for (var _i = 0, _a = this._upgradeExecuteTranslations; _i < _a.length; _i++) {
            var upgradeTranslation = _a[_i];
            upgraded = upgradeTranslation(upgraded.verb, upgraded.parameters);
        }
        return upgraded;
    };
    StackingVersionConverter.prototype.downgradeExecuteReturn = function (executeResponse) {
        // Downgrade the response to what the external module is expecting
        var downgraded = executeResponse;
        for (var _i = 0, _a = this._downgradeExecuteTranslations; _i < _a.length; _i++) {
            var downgradeTranslation = _a[_i];
            downgraded = downgradeTranslation(downgraded);
        }
        return downgraded;
    };
    StackingVersionConverter.prototype.downgradeNotification = function (notification) {
        // Downgrade the notification to what the external module is expecting
        var downgraded = notification;
        for (var _i = 0, _a = this._downgradeNotificationTranslations; _i < _a.length; _i++) {
            var downgradeTranslation = _a[_i];
            downgraded = downgradeTranslation(downgraded);
        }
        return downgraded;
    };
    return StackingVersionConverter;
}());
exports.StackingVersionConverter = StackingVersionConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/VersionConverterFactory.js":
/*!*********************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/VersionConverterFactory.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var IdentityVersionConverter_1 = __webpack_require__(/*! ./IdentityVersionConverter */ "../api-internal-contract-js/lib/src/versioning/IdentityVersionConverter.js");
var StackingVersionConverter_1 = __webpack_require__(/*! ./StackingVersionConverter */ "../api-internal-contract-js/lib/src/versioning/StackingVersionConverter.js");
var VersionTranslations_1 = __webpack_require__(/*! ./VersionTranslations */ "../api-internal-contract-js/lib/src/versioning/VersionTranslations.js");
/**
 * @returns true if lhs < rhs (ignoring fix number)
 * @param lhs
 * @param rhs
 */
function VersionLessThan(lhs, rhs) {
    if (lhs.major > rhs.major) {
        return false;
    }
    if (lhs.major < rhs.major) {
        return true;
    }
    return lhs.minor < rhs.minor;
}
exports.VersionLessThan = VersionLessThan;
/**
 * @returns true if lhs == rhs (ignoring fix number)
 * @param lhs
 * @param rhs
 */
function VersionEqualTo(lhs, rhs) {
    return lhs.major === rhs.major && lhs.minor === rhs.minor;
}
exports.VersionEqualTo = VersionEqualTo;
// A mapping from an older client version of internal-contract to the current platform version of this contract.
// Each version bump can have an array of translations to perform in order. Notice that this is
// different than the major upgrades/downgrades above because it handles both major and minor version changes.
// Also please note: downgradeExecuteCall is handled on the client/external side rather than platform side.
// When updating the major or minor version of our internal-contract, you will need to update these data structures.
// * If there are translations to add, add them to the version to "upgrade from" or "downgrade to".
exports.ExecuteMinorUpgrades = {
    1: {
        9: [],
    },
};
exports.ExecuteMinorDowngrades = {
    1: {
        5: [VersionTranslations_1.DowngradeWorksheetNames],
        9: [],
    },
};
exports.NotificationMinorDowngrades = {
    1: {
        9: [],
        10: [VersionTranslations_1.DowngradeFlipboardZoneID],
    },
};
/**
 * Creates a new InternalContractVersionConverter which has the ability to upgrade and downgrade the contract
 * between the two versions, which are specified. If externalMajorVersion is greater than platformMajorVersion,
 * an error will be thrown because we won't know how to do those conversions.
 * This converter can handle both major and minor updates when the platform version is greater than external version.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 */
function CreateVersionConverter(externalVersion, platformVersion) {
    return CreateVersionConverterWithTranslators(externalVersion, platformVersion, exports.ExecuteMinorUpgrades, exports.ExecuteMinorDowngrades, exports.NotificationMinorDowngrades);
}
exports.CreateVersionConverter = CreateVersionConverter;
/**
 * Implementation of CreateVersionConverter. This function takes the upgrade, downgrade, and
 * notification arrays so that all the logic can be tested.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 * @param upgrades MajorMinorTranslators for upgrades
 * @param downgrades MajorMinorTranslators for downgrades
 * @param notificationDowngrades MajorMinorTranslators for notification downgrades
 */
function CreateVersionConverterWithTranslators(externalVersion, platformVersion, upgrades, downgrades, notificationDowngrades) {
    var externalMajorVersion = externalVersion.major;
    var externalMinorVersion = externalVersion.minor;
    var platformMajorVersion = platformVersion.major;
    if (externalMajorVersion > platformMajorVersion) {
        throw new Error("External version must be less than or equal to platform version.\n    externalMajorVersion=" + externalMajorVersion + " platformMajorVersion=" + platformMajorVersion);
    }
    // If we are using the exact same versions (major.minor), just use the identity converter
    if (VersionEqualTo(externalVersion, platformVersion)) {
        return new IdentityVersionConverter_1.IdentityVersionConverter();
    }
    // Walk the span between the versions we have here and collect the upgrade and downgrades necessary
    var neededExecuteUpgrades = GetNeededTranslations(externalMajorVersion, platformMajorVersion, externalMinorVersion, upgrades);
    var neededExecuteDowngrades = GetNeededTranslations(externalMajorVersion, platformMajorVersion, externalMinorVersion, downgrades);
    var neededNotificationDowngrades = GetNeededTranslations(externalMajorVersion, platformMajorVersion, externalMinorVersion, notificationDowngrades);
    // We want to apply the downgrades in reverse order in case of dependencies between them
    neededExecuteDowngrades.reverse();
    neededNotificationDowngrades.reverse();
    return StackingVersionConverter_1.StackingVersionConverter.fromData(externalVersion, platformVersion, neededExecuteUpgrades, neededExecuteDowngrades, neededNotificationDowngrades);
}
exports.CreateVersionConverterWithTranslators = CreateVersionConverterWithTranslators;
function GetNeededTranslations(externalMajorVersion, platformMajorVersion, externalMinorVersion, majorMinorTranslators) {
    var neededTranslations = [];
    for (var major = externalMajorVersion; major <= platformMajorVersion; major++) {
        if (major in majorMinorTranslators) {
            var start = major === externalMajorVersion ? externalMinorVersion : 0;
            var maximumMinorVersion = GetMaximumMinorIndex(Object.keys(majorMinorTranslators[major]));
            for (var minor = start; minor <= maximumMinorVersion; minor++) {
                if (minor in majorMinorTranslators[major]) {
                    neededTranslations.push.apply(neededTranslations, majorMinorTranslators[major][minor]);
                }
            }
        }
    }
    return neededTranslations;
}
function GetMaximumMinorIndex(minorVersions) {
    return minorVersions.map(function (a) { return Number(a); }).reduce(function (a, b) { return (a > b ? a : b); });
}
exports.GetMaximumMinorIndex = GetMaximumMinorIndex;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/VersionTranslations.js":
/*!*****************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/VersionTranslations.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Notifications_1 = __webpack_require__(/*! ../contract/Notifications */ "../api-internal-contract-js/lib/src/contract/Notifications.js");
// This is where we will start to define some of these translations.
// When modifying existing models, add the requisite conversion functions here, then use them
// in the VersionConverterFactory implementation. Import old versions as you would any other module
// 0 <-> Translations
// Uncomment this line to import from the V0 definition of the API
// import * as V0 from '@tableau-api-internal-contract-js_v0';
// 1 <-> 2 Translations
// Uncomment this line to import from the V1 definition of the API
// import * as V1 from '@tableau-api-internal-contract-js_v1';
function DowngradeWorksheetNames(executeResponse) {
    // Fix the dashboard friendly name issue. The structures are compatible,
    // so we still return the original reply, but we copy the SheetInfo.name
    // into the DashboardZone.name, where v1 wants to find it.
    var bootstrapInfo = executeResponse.result;
    if (bootstrapInfo.extensionDashboardInfo !== undefined) {
        bootstrapInfo.extensionDashboardInfo.zones.forEach(function (zone) {
            if (zone.sheetInfo) {
                zone.name = zone.sheetInfo.name;
            }
        });
    }
    return executeResponse;
}
exports.DowngradeWorksheetNames = DowngradeWorksheetNames;
function DowngradeFlipboardZoneID(notification) {
    // Fix the FlipboardZoneId issue. Older external versions still check for flipboardZoneIDs.
    // When running against a newer server, if flipboardZoneId is absent, set it to default(0).
    if (notification.notificationId === Notifications_1.NotificationId.SelectedMarksChanged) {
        var visualModel = notification.data;
        if (visualModel.flipboardZoneID === undefined) {
            visualModel.flipboardZoneID = 0;
        }
    }
    return notification;
}
exports.DowngradeFlipboardZoneID = DowngradeFlipboardZoneID;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/external/ExternalIdentityVersionConverter.js":
/*!***************************************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/external/ExternalIdentityVersionConverter.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// tslint:disable:no-any
/**
 * This version converter doesn't actually do anything but is useful for testing or when we have
 * a matching platform and external version number
 */
var ExternalIdentityVersionConverter = /** @class */ (function () {
    function ExternalIdentityVersionConverter() {
    }
    ExternalIdentityVersionConverter.prototype.downgradeExecuteCall = function (verb, parameters) {
        return {
            verb: verb,
            parameters: parameters,
        };
    };
    ExternalIdentityVersionConverter.prototype.upgradeExecuteReturn = function (executeResponse, verb, parameters) {
        return executeResponse;
    };
    ExternalIdentityVersionConverter.prototype.upgradeNotification = function (notification) {
        return notification;
    };
    return ExternalIdentityVersionConverter;
}());
exports.ExternalIdentityVersionConverter = ExternalIdentityVersionConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/external/ExternalStackingVersionConverter.js":
/*!***************************************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/external/ExternalStackingVersionConverter.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
// tslint:disable:no-any
/**
 * The version converter is designed to allow the platform and external modules
 * to seemlessly communicate over two different versions of the internal API. This converter
 * supports external's version(minor) >= platform's version(minor). When executing
 * commands, it is used to downgrade the external representation to what platform knows on the way in
 * and upgrade the representations on the way out.
 */
var ExternalStackingVersionConverter = /** @class */ (function () {
    /**
     * Creates a new instance of the StackingVersionConverter
     *
     * @param _externalVersion The version of the internal contract api-external-js is using
     * @param _platformVersion The version of the internal contract the api-platform-js is using
     * @param _downgradeExecuteCallTranslations Ordered list of the translations to perform when downgrading cmd parameters
     * @param _upgradeExecuteReturnTranslations Ordered list of upgrade translations to perform after a cmd is executed
     * @param _upgradeNotificationTranslations Ordered list of upgrade notfications to perform on events
     */
    function ExternalStackingVersionConverter(_externalVersion, _platformVersion, _downgradeExecuteCallTranslations, _upgradeExecuteReturnTranslations, _upgradeNotificationTranslations) {
        this._externalVersion = _externalVersion;
        this._platformVersion = _platformVersion;
        this._downgradeExecuteCallTranslations = _downgradeExecuteCallTranslations;
        this._upgradeExecuteReturnTranslations = _upgradeExecuteReturnTranslations;
        this._upgradeNotificationTranslations = _upgradeNotificationTranslations;
        if (this._externalVersion.major > this._platformVersion.major) {
            throw new Error("Cannot convert between external version " + this._externalVersion.major + "\n      and " + this._platformVersion.major);
        }
    }
    ExternalStackingVersionConverter.prototype.downgradeExecuteCall = function (verb, parameters) {
        // Perform the downgrade of the verb and parameters to the level that platform is using
        var downgraded = { verb: verb, parameters: parameters };
        for (var _i = 0, _a = this._downgradeExecuteCallTranslations; _i < _a.length; _i++) {
            var downgradeTranslation = _a[_i];
            downgraded = downgradeTranslation(downgraded.verb, downgraded.parameters);
        }
        return downgraded;
    };
    ExternalStackingVersionConverter.prototype.upgradeExecuteReturn = function (executeResponse, verb, parameters) {
        // Perform the upgrade of the response to what the external module is expecting
        var upgraded = executeResponse;
        for (var _i = 0, _a = this._upgradeExecuteReturnTranslations; _i < _a.length; _i++) {
            var upgradeTranslation = _a[_i];
            upgraded = upgradeTranslation(upgraded, verb, parameters);
        }
        return upgraded;
    };
    ExternalStackingVersionConverter.prototype.upgradeNotification = function (notification) {
        // Perform the upgrade of notification to what the external module is expecting
        var upgraded = notification;
        for (var _i = 0, _a = this._upgradeNotificationTranslations; _i < _a.length; _i++) {
            var upgradeNotification = _a[_i];
            upgraded = upgradeNotification(upgraded);
        }
        return upgraded;
    };
    return ExternalStackingVersionConverter;
}());
exports.ExternalStackingVersionConverter = ExternalStackingVersionConverter;


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/external/ExternalVersionConverterFactory.js":
/*!**************************************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/external/ExternalVersionConverterFactory.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var VersionConverterFactory_1 = __webpack_require__(/*! ../VersionConverterFactory */ "../api-internal-contract-js/lib/src/versioning/VersionConverterFactory.js");
var ExternalIdentityVersionConverter_1 = __webpack_require__(/*! ./ExternalIdentityVersionConverter */ "../api-internal-contract-js/lib/src/versioning/external/ExternalIdentityVersionConverter.js");
var ExternalStackingVersionConverter_1 = __webpack_require__(/*! ./ExternalStackingVersionConverter */ "../api-internal-contract-js/lib/src/versioning/external/ExternalStackingVersionConverter.js");
var ExternalVersionTranslations_1 = __webpack_require__(/*! ./ExternalVersionTranslations */ "../api-internal-contract-js/lib/src/versioning/external/ExternalVersionTranslations.js");
// A mapping from the current client version of internal-contract to an older platform version of the contract.
// Each version bump can have an array of translations to perform in order.
// These translations handle downgradeExecuteCall and upgradeExecuteReturn and are meant to be called on the
// client/external side.
// When updating the major or minor version of our internal-contract, you will need to update these data structures.
// * If there are translations to add, add them to the version to 'upgrade from' or 'downgrade to'.
exports.ExecuteMinorDowngradeCallExternal = {
    1: {
        9: [],
        13: [ExternalVersionTranslations_1.DowngradeUnderlyingTableDataAsync, ExternalVersionTranslations_1.DowngradeLogicalTableDataAsync],
    },
};
exports.ExecuteMinorUpgradeReturnExternal = {
    1: {
        9: [ExternalVersionTranslations_1.UpgradeDataTableTypes],
        29: [ExternalVersionTranslations_1.UpgradeDataTableRowsAndColumns],
    },
};
exports.ExecuteMinorUpgradeNotification = {
    1: {
        9: [],
    },
};
/**
 * Creates a new ExternalContractVersionConverter which has the ability to upgrade and downgrade
 * the contract between the two versions which are specified. If externalMajorVersion is less than
 * platformMajorVersion, an ExternalIdentityVersionConverter will be returned.
 * Handles upgrade/downgrade for both major and minor updates.
 *
 * @param externalVersion VersionNumber of the internal api which the external module is using
 * @param platformVersion VersionNumber of the internal api which the platform is using
 */
function CreateExternalCompatibleVersionConverter(externalVersion, platformVersion) {
    return CreateExternalCompatibleVersionConverterWithTranslators(externalVersion, platformVersion, exports.ExecuteMinorDowngradeCallExternal, exports.ExecuteMinorUpgradeReturnExternal, exports.ExecuteMinorUpgradeNotification);
}
exports.CreateExternalCompatibleVersionConverter = CreateExternalCompatibleVersionConverter;
/**
 * Implementation of CreateExternalCompatibleVersionConverterWithTranslators.
 * This function takes the upgrade, downgrade arrays so that all the logic can be tested.
 *
 * @param externalVersion VersionNumber of the internal contract which the external module is using
 * @param platformVersion VersionNumber of the internal contract which the platform is using
 * @param upgrades MajorMinorTranslators for response upgrades
 * @param downgrades MajorMinorTranslators for execute call downgrades
 */
function CreateExternalCompatibleVersionConverterWithTranslators(externalVersion, platformVersion, downgrades, upgrades, upgradeNotifications) {
    var externalMajorVersion = externalVersion.major;
    var platformMajorVersion = platformVersion.major;
    var platformMinorVersion = platformVersion.minor;
    // This check is present in VersionConverterFactory. We throw the same error here as well.
    // Hence we only need to check the minor versions for translations.
    if (externalMajorVersion > platformMajorVersion) {
        throw new Error("External version must be less than or equal to platform version.\n    externalMajorVersion=" + externalMajorVersion + " platformMajorVersion=" + platformMajorVersion);
    }
    if (externalMajorVersion < platformMajorVersion || VersionConverterFactory_1.VersionEqualTo(externalVersion, platformVersion)) {
        return new ExternalIdentityVersionConverter_1.ExternalIdentityVersionConverter();
    }
    // Walk the span between the versions we have here and collect the upgrade and downgrades necessary
    var neededExecuteCallDowngrade = GetNeededExternalTranslations(platformMajorVersion, platformMinorVersion, downgrades);
    var neededExecuteReturnUpgrades = GetNeededExternalTranslations(platformMajorVersion, platformMinorVersion, upgrades);
    var neededNotificationUpgrades = GetNeededExternalTranslations(platformMajorVersion, platformMinorVersion, upgradeNotifications);
    // Reverse the downgrade calls, so that we start the downgrade from the external version to the platform version
    neededExecuteCallDowngrade.reverse();
    return new ExternalStackingVersionConverter_1.ExternalStackingVersionConverter(externalVersion, platformVersion, neededExecuteCallDowngrade, neededExecuteReturnUpgrades, neededNotificationUpgrades);
}
exports.CreateExternalCompatibleVersionConverterWithTranslators = CreateExternalCompatibleVersionConverterWithTranslators;
function GetNeededExternalTranslations(platformMajorVersion, platformMinorVersion, majorMinorTranslators) {
    var neededTranslations = [];
    if (platformMajorVersion in majorMinorTranslators) {
        var start = platformMinorVersion;
        var maximumMinorVersion = VersionConverterFactory_1.GetMaximumMinorIndex(Object.keys(majorMinorTranslators[platformMajorVersion]));
        for (var minor = start; minor <= maximumMinorVersion; minor++) {
            if (minor in majorMinorTranslators[platformMajorVersion]) {
                neededTranslations.push.apply(neededTranslations, majorMinorTranslators[platformMajorVersion][minor]);
            }
        }
    }
    return neededTranslations;
}


/***/ }),

/***/ "../api-internal-contract-js/lib/src/versioning/external/ExternalVersionTranslations.js":
/*!**********************************************************************************************!*\
  !*** ../api-internal-contract-js/lib/src/versioning/external/ExternalVersionTranslations.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var JsApiInternalContract_1 = __webpack_require__(/*! ../../JsApiInternalContract */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
// 1.2 -> 1.0 Translations
// Uncomment this line to import from the V1 definition of the API
// import * as V1 from '@tableau-api-internal-contract-js_v1';
/**
 * Prior to 2019.2 (internal-contract v1.9), DataValue.value were all strings.
 * Go through all DataValue objects. If we have a string, but the type should not be a string,
 * convert it to the correct type. The type of DataValue.value is 'any' in the contract, so
 * this change doesn't need any updates to classes or types.
 */
function UpgradeDataTableTypes(executeResponse, verb, parameters) {
    if (!executeResponse) {
        return executeResponse;
    }
    var oldUnderlyingDataTable = executeResponse.result;
    if (oldUnderlyingDataTable.data !== undefined && oldUnderlyingDataTable.isSummary !== undefined) {
        convertDataValues(oldUnderlyingDataTable.data);
        return executeResponse;
    }
    var oldSelectedMarksTable = executeResponse.result;
    if (oldSelectedMarksTable.data !== undefined && Array.isArray(oldSelectedMarksTable.data)) {
        oldSelectedMarksTable.data.forEach(function (marksTable) {
            convertDataValues(marksTable);
        });
        return executeResponse;
    }
    return executeResponse;
}
exports.UpgradeDataTableTypes = UpgradeDataTableTypes;
/**
 * Prior to 2020.2 (internal-contract v1.13 and older), worksheet.getUnderlyingTableDataAsync doesn't exist.
 * Map it to the older GetUnderlyingData verb and validate the the logical table Id.
 **/
function DowngradeUnderlyingTableDataAsync(verb, parameters) {
    if (verb === JsApiInternalContract_1.VerbId.GetUnderlyingTableData) {
        validateParametersForObjectModel(verb, parameters);
        verb = JsApiInternalContract_1.VerbId.GetUnderlyingData;
    }
    return {
        verb: verb,
        parameters: parameters,
    };
}
exports.DowngradeUnderlyingTableDataAsync = DowngradeUnderlyingTableDataAsync;
/**
 * Prior to 2020.2 (internal-contract v1.13 and older), datasource.getLogicalTableDataAsync doesn't exist.
 * Map it to the older GetDataSourceData verb and validate the the logical table Id.
 **/
function DowngradeLogicalTableDataAsync(verb, parameters) {
    if (verb === JsApiInternalContract_1.VerbId.GetLogicalTableData) {
        validateParametersForObjectModel(verb, parameters);
        verb = JsApiInternalContract_1.VerbId.GetDataSourceData;
    }
    return {
        verb: verb,
        parameters: parameters,
    };
}
exports.DowngradeLogicalTableDataAsync = DowngradeLogicalTableDataAsync;
function convertDataValues(table) {
    // dataTable is a two-dimensional array of data. First index is the row, second is the column.
    if (table === undefined || table.dataTable === undefined || !Array.isArray(table.dataTable)) {
        return;
    }
    table.dataTable.forEach(function (row) {
        row.forEach(function (dataValue, columnIndex) {
            var value = dataValue.value;
            if (value !== null) {
                dataValue.value = JsApiInternalContract_1.DataTypeConverter.convertValueAsStringToValue(value, table.headers[columnIndex].dataType);
            }
        });
    });
}
// ToDo: TFS1069027 Refactor input verbs & parameters in api-internal-contract Upgrade/Downgrade framework
function validateParametersForObjectModel(verb, parameters) {
    if (parameters[JsApiInternalContract_1.ParameterId.LogicalTableId] !== JsApiInternalContract_1.ApiShowDataTableSentinel.SingleTableId) {
        throw new Error("Invalid logical table id passed to " + verb + ".");
    }
}
/**
 * Prior to 2021.2 (internal-contract v1.29 and below), getSummaryDataAsync did not support maxRows,
 * and any get...DataAsync did not support columnsToIncludeById.
 * Trim result to maxRows if it is included in the parameters for getSummaryDataAsync
 * Trim columns to columnsToInclude if included in the parameters for any get...DataAsync
 */
function UpgradeDataTableRowsAndColumns(executeResponse, verb, parameters) {
    if (isGetSummaryDataVerb(verb) && parameters[JsApiInternalContract_1.ParameterId.MaxRows]) {
        executeResponse = adjustDataRowLength(executeResponse, parameters[JsApiInternalContract_1.ParameterId.MaxRows]);
    }
    if (isGetTableDataVerb(verb) && parameters[JsApiInternalContract_1.ParameterId.ColumnsToIncludeById]) {
        executeResponse = adjustDataColumns(executeResponse, parameters[JsApiInternalContract_1.ParameterId.ColumnsToIncludeById]);
    }
    return executeResponse;
}
exports.UpgradeDataTableRowsAndColumns = UpgradeDataTableRowsAndColumns;
function isGetSummaryDataVerb(verb) {
    return verb === JsApiInternalContract_1.VerbId.GetDataSummaryData;
}
function isGetTableDataVerb(verb) {
    return (verb === JsApiInternalContract_1.VerbId.GetDataSummaryData ||
        verb === JsApiInternalContract_1.VerbId.GetUnderlyingTableData ||
        verb === JsApiInternalContract_1.VerbId.GetLogicalTableData ||
        verb === JsApiInternalContract_1.VerbId.GetDataSourceData ||
        verb === JsApiInternalContract_1.VerbId.GetUnderlyingData);
}
function adjustDataRowLength(executeResponse, maxRows) {
    var underlyingDataTable = executeResponse.result;
    if (!underlyingDataTable.data || !Array.isArray(underlyingDataTable.data.dataTable)) {
        return executeResponse;
    }
    if (maxRows > 0 && maxRows < underlyingDataTable.data.dataTable.length) {
        underlyingDataTable.data.dataTable.length = maxRows;
    }
    return executeResponse;
}
function adjustDataColumns(executeResponse, columnsToInclude) {
    if (columnsToInclude.length === 0) {
        return executeResponse;
    }
    // verify that we have a valid UnderlyingDataTable
    var underlyingDataTable = executeResponse.result;
    if (!underlyingDataTable.data || !Array.isArray(underlyingDataTable.data.dataTable) || !Array.isArray(underlyingDataTable.data.headers)) {
        return executeResponse;
    }
    // 1. filter the headers to only columnsToInclude
    // 2. use the new headers to filter all rows
    // 3. update the indices in our new headers
    var newHeaders = underlyingDataTable.data.headers.filter(function (header, index) {
        return columnsToInclude.find(function (name) { return name === header.fieldName; });
    });
    underlyingDataTable.data.dataTable.forEach(function (row, index) {
        underlyingDataTable.data.dataTable[index] = row.filter(function (value, valueIndex) { return newHeaders.findIndex(function (header) { return header.index === valueIndex; }) !== -1; });
    });
    var newIndex = 0;
    underlyingDataTable.data.headers = newHeaders.map(function (header) {
        header.index = newIndex++;
        return header;
    });
    return executeResponse;
}


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared.js":
/*!*********************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


// Export everything which had been previously in the api-shared module
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ApiVersion_1 = __webpack_require__(/*! ./ApiShared/ApiVersion */ "../api-shared-js/lib/src/ApiShared/ApiVersion.js");
exports.ApiVersion = ApiVersion_1.ApiVersion;
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ./ApiShared/EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
exports.ExternalToInternalEnumMappings = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings;
__export(__webpack_require__(/*! ./ApiShared/CrossFrame/CrossFrameBootstrap */ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameBootstrap.js"));
var CrossFrameDispatcher_1 = __webpack_require__(/*! ./ApiShared/CrossFrame/CrossFrameDispatcher */ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameDispatcher.js");
exports.CrossFrameDispatcher = CrossFrameDispatcher_1.CrossFrameDispatcher;
var DataSource_1 = __webpack_require__(/*! ./ApiShared/DataSource */ "../api-shared-js/lib/src/ApiShared/DataSource.js");
exports.DataSource = DataSource_1.DataSource;
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ./ApiShared/EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
exports.InternalToExternalEnumMappings = InternalToExternalEnumMappings_1.InternalToExternalEnumMappings;
var EventListenerManager_1 = __webpack_require__(/*! ./ApiShared/EventListenerManager */ "../api-shared-js/lib/src/ApiShared/EventListenerManager.js");
exports.EventListenerManager = EventListenerManager_1.EventListenerManager;
var Field_1 = __webpack_require__(/*! ./ApiShared/Field */ "../api-shared-js/lib/src/ApiShared/Field.js");
exports.Field = Field_1.Field;
var CustomViewImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/CustomViewImpl */ "../api-shared-js/lib/src/ApiShared/Impl/CustomViewImpl.js");
exports.CustomViewImpl = CustomViewImpl_1.CustomViewImpl;
var DashboardImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/DashboardImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DashboardImpl.js");
exports.DashboardImpl = DashboardImpl_1.DashboardImpl;
var DashboardObjectImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/DashboardObjectImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DashboardObjectImpl.js");
exports.DashboardObjectImpl = DashboardObjectImpl_1.DashboardObjectImpl;
var DataSourceImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/DataSourceImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js");
exports.DataSourceImpl = DataSourceImpl_1.DataSourceImpl;
var ParameterImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/ParameterImpl */ "../api-shared-js/lib/src/ApiShared/Impl/ParameterImpl.js");
exports.ParameterImpl = ParameterImpl_1.ParameterImpl;
var SheetImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/SheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js");
exports.SheetImpl = SheetImpl_1.SheetImpl;
var SheetInfoImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/SheetInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js");
exports.SheetInfoImpl = SheetInfoImpl_1.SheetInfoImpl;
var SingleEventManagerImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/SingleEventManagerImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SingleEventManagerImpl.js");
exports.SingleEventManagerImpl = SingleEventManagerImpl_1.SingleEventManagerImpl;
var StoryImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/StoryImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryImpl.js");
exports.StoryImpl = StoryImpl_1.StoryImpl;
var StoryPointImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/StoryPointImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointImpl.js");
exports.StoryPointImpl = StoryPointImpl_1.StoryPointImpl;
var StoryPointInfoImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/StoryPointInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointInfoImpl.js");
exports.StoryPointInfoImpl = StoryPointInfoImpl_1.StoryPointInfoImpl;
var WorkbookImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/WorkbookImpl */ "../api-shared-js/lib/src/ApiShared/Impl/WorkbookImpl.js");
exports.WorkbookImpl = WorkbookImpl_1.WorkbookImpl;
var WorksheetImpl_1 = __webpack_require__(/*! ./ApiShared/Impl/WorksheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js");
exports.WorksheetImpl = WorksheetImpl_1.WorksheetImpl;
var Point_1 = __webpack_require__(/*! ./ApiShared/Point */ "../api-shared-js/lib/src/ApiShared/Point.js");
exports.Point = Point_1.Point;
var ClientInfoServiceImpl_1 = __webpack_require__(/*! ./ApiShared/Services/impl/ClientInfoServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ClientInfoServiceImpl.js");
exports.ClientInfoServiceImpl = ClientInfoServiceImpl_1.ClientInfoServiceImpl;
var NotificationServiceImpl_1 = __webpack_require__(/*! ./ApiShared/Services/impl/NotificationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImpl.js");
exports.NotificationServiceImpl = NotificationServiceImpl_1.NotificationServiceImpl;
var NotificationServiceImplBase_1 = __webpack_require__(/*! ./ApiShared/Services/impl/NotificationServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImplBase.js");
exports.NotificationServiceImplBase = NotificationServiceImplBase_1.NotificationServiceImplBase;
exports.Registration = NotificationServiceImplBase_1.Registration;
var ServiceImplBase_1 = __webpack_require__(/*! ./ApiShared/Services/impl/ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
exports.ServiceImplBase = ServiceImplBase_1.ServiceImplBase;
var SizeServiceImpl_1 = __webpack_require__(/*! ./ApiShared/Services/impl/SizeServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/SizeServiceImpl.js");
exports.SizeServiceImpl = SizeServiceImpl_1.SizeServiceImpl;
var StoryActivationServiceImpl_1 = __webpack_require__(/*! ./ApiShared/Services/impl/StoryActivationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/StoryActivationServiceImpl.js");
exports.StoryActivationServiceImpl = StoryActivationServiceImpl_1.StoryActivationServiceImpl;
__export(__webpack_require__(/*! ./ApiShared/Services/RegisterAllSharedServices */ "../api-shared-js/lib/src/ApiShared/Services/RegisterAllSharedServices.js"));
__export(__webpack_require__(/*! ./ApiShared/Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js"));
var TableauError_1 = __webpack_require__(/*! ./ApiShared/TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
exports.TableauError = TableauError_1.TableauError;
var Deferred_1 = __webpack_require__(/*! ./ApiShared/Utils/Deferred */ "../api-shared-js/lib/src/ApiShared/Utils/Deferred.js");
exports.Deferred = Deferred_1.Deferred;
var ErrorHelpers_1 = __webpack_require__(/*! ./ApiShared/Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
exports.ErrorHelpers = ErrorHelpers_1.ErrorHelpers;
var ExportHelpers_1 = __webpack_require__(/*! ./ApiShared/Utils/ExportHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ExportHelpers.js");
exports.ExportHelpers = ExportHelpers_1.ExportHelpers;
var SheetUtils_1 = __webpack_require__(/*! ./ApiShared/Utils/SheetUtils */ "../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js");
exports.SheetUtils = SheetUtils_1.SheetUtils;
var VersionNumber_1 = __webpack_require__(/*! ./ApiShared/VersionNumber */ "../api-shared-js/lib/src/ApiShared/VersionNumber.js");
exports.VersionNumber = VersionNumber_1.VersionNumber;
var VersionedExternalApiDispatcher_1 = __webpack_require__(/*! ./VersionedExternalApiDispatcher */ "../api-shared-js/lib/src/VersionedExternalApiDispatcher.js");
exports.VersionedExternalApiDispatcher = VersionedExternalApiDispatcher_1.VersionedExternalApiDispatcher;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/ApiVersion.js":
/*!********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/ApiVersion.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var VersionNumber_1 = __webpack_require__(/*! ./VersionNumber */ "../api-shared-js/lib/src/ApiShared/VersionNumber.js");
/**
 * This is the singleton wrapper of VersionNumber
 */
var ApiVersion = /** @class */ (function () {
    function ApiVersion() {
    }
    Object.defineProperty(ApiVersion, "Instance", {
        /**
         * Gets the singleton instance of the version number.
         */
        get: function () {
            return ApiVersion._instance;
        },
        enumerable: true,
        configurable: true
    });
    ApiVersion.SetVersionNumber = function (numString, isAlpha) {
        ApiVersion._instance = new VersionNumber_1.VersionNumber(numString, isAlpha);
    };
    return ApiVersion;
}());
exports.ApiVersion = ApiVersion;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/ConnectionSummary.js":
/*!***************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/ConnectionSummary.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of a connection summary.
 * This does not follow the Impl pattern as it is just a property bag.
 */
var ConnectionSummary = /** @class */ (function () {
    function ConnectionSummary(_connectionInfo) {
        this._connectionInfo = _connectionInfo;
    }
    Object.defineProperty(ConnectionSummary.prototype, "name", {
        get: function () {
            return this._connectionInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionSummary.prototype, "id", {
        get: function () {
            return this._connectionInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionSummary.prototype, "serverURI", {
        get: function () {
            return this._connectionInfo.serverURI;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConnectionSummary.prototype, "type", {
        get: function () {
            return this._connectionInfo.type;
        },
        enumerable: true,
        configurable: true
    });
    return ConnectionSummary;
}());
exports.ConnectionSummary = ConnectionSummary;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameBootstrap.js":
/*!****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameBootstrap.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var CrossFrameDispatcher_1 = __webpack_require__(/*! ./CrossFrameDispatcher */ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameDispatcher.js");
// Checks to see if we are running in an iframe currently: https://stackoverflow.com/a/326076/8821153
function inIframe(thisWindow) {
    try {
        return thisWindow.self !== thisWindow.parent;
    }
    catch (e) {
        return true;
    }
}
/**
 * Attempts to bootstrap the extension with a cross-frame parent where Tableau is running
 *
 * @param thisWindow The window which we are running in (injected for unit testing purposes)
 * @param internalContractVersion The version number of the internal contract we are using
 * @returns A promise which is doing the actual bootstrapping
 */
function doCrossFrameBootstrap(thisWindow, internalContractVersion, options) {
    return new Promise(function (resolve, reject) {
        var parent;
        // Normally, we are running inside an iframe.  The exception to this is
        // when we are running as an extension inside a dialog as part of the UINamespace
        // functionality.  In that case, we want the opener of this window rather than the parent.
        if (!inIframe(thisWindow)) {
            parent = thisWindow.opener;
        }
        else {
            parent = thisWindow.parent;
        }
        if (!parent) {
            reject('This extension is not running inside an iframe, desktop, or popup window. Initialization failed.');
        }
        // Create the messenger which will do he communication between this window and our parent
        // Since we don't know where we are running yet, we have to make this initial origin '*'. Once
        // we have successfully initialized our extension, we will limit where we send messages
        var messenger = new api_internal_contract_js_1.CrossFrameMessenger(thisWindow, parent, '*');
        // Prepare to send an initialization message to the parent frame
        var initializationMessage = messenger.prepareInitializationMessage(internalContractVersion, api_internal_contract_js_1.MESSAGING_VERSION, options);
        // When we receive a response back from the parent, we check to make sure the guids match and then we know
        // that the parent is aware of us and we can start communicating
        messenger.setCommandResponseMessageHandler(function (msg) {
            // Verify we are getting a response from our initialize message
            if (msg.commandGuid === initializationMessage.messageGuid) {
                // The versioning of the dispatcher happens on the other side of our frame, and
                // in a wrapper on this side. This one doesn't have any version knowledge.
                var dispatcherFactory = function () { return new CrossFrameDispatcher_1.CrossFrameDispatcher(messenger); };
                resolve(dispatcherFactory);
            }
        });
        // Now that our handlers are ready, start listening and send our initialization message
        messenger.startListening();
        initializationMessage.send();
    });
}
exports.doCrossFrameBootstrap = doCrossFrameBootstrap;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameDispatcher.js":
/*!*****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/CrossFrame/CrossFrameDispatcher.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
/**
 * This is an implementation of the InternalApiDispatcher interface which functions by passing messages
 * across a frame boundary. This is usually between the code where our javscript library has been included
 * by a 3rd party dev and another frame where Tableau server has content.
 */
var CrossFrameDispatcher = /** @class */ (function () {
    /**
     * Creates an instance of CrossFrameDispatcher which will use the given messenger to communicate
     * @param _messenger an instantiated and listening messenger object
     */
    function CrossFrameDispatcher(_messenger) {
        this._messenger = _messenger;
        // Collection of pending promises which are waiting to be resolved. When we receive a response back from the other frame,
        // these promises can be either resolved or rejected
        this._pendingPromises = {};
        // The collection of notification handlers which have been registered with this dispatcher
        this._notificationHandlers = [];
        if (!this._messenger) {
            throw 'Missing messenger object';
        }
        // Set up our message handlers. We only care about incoming notifications and command responses
        this._messenger.setCommandResponseMessageHandler(this.onCommandResponse.bind(this));
        this._messenger.setNotificationMessageHandler(this.onNotification.bind(this));
    }
    ////// Start InternalApiDispatcher implementation
    CrossFrameDispatcher.prototype.execute = function (verb, parameters) {
        var _this = this;
        // To execute a verb, we first prepare a command message and then define a promise.
        var preparedMessage = this._messenger.prepareCommandMessage(verb, parameters);
        var promise = new Promise(function (resolve, reject) {
            // Save off the pending promise by the messageGuid we are about to send. When a response is
            // received, we'll be able to resolve this promise with the result
            _this._pendingPromises[preparedMessage.messageGuid] = { resolve: resolve, reject: reject };
        });
        // Actually send the message and return the promise
        preparedMessage.send();
        return promise;
    };
    CrossFrameDispatcher.prototype.registerNotificationHandler = function (handler) {
        this._notificationHandlers.push(handler);
    };
    CrossFrameDispatcher.prototype.unregisterNotificationHandler = function (handler) {
        this._notificationHandlers = this._notificationHandlers.filter(function (h) { return h !== handler; });
    };
    ////// End InternalApiDispatcher implementation
    CrossFrameDispatcher.prototype.onCommandResponse = function (response) {
        // We got a command response, look through the pending promises and resolve
        if (Object.keys(this._pendingPromises).indexOf(response.commandGuid) < 0) {
            return; // We don't have any reference to this command, just return
        }
        var pendingPromise = this._pendingPromises[response.commandGuid];
        // If we have an error defined, reject the promise
        if (response.error) {
            pendingPromise.reject(response.error);
        }
        // If we have data defined, resolve the promise
        if (response.data) {
            pendingPromise.resolve({ result: response.data });
        }
        // Clean up our pending promises object
        delete this._pendingPromises[response.commandGuid];
    };
    CrossFrameDispatcher.prototype.onNotification = function (notificationMessage) {
        // Go through each notification handler we have registered and let them know a notification came in
        for (var _i = 0, _a = this._notificationHandlers; _i < _a.length; _i++) {
            var handler = _a[_i];
            try {
                handler({ notificationId: notificationMessage.notificationId, data: notificationMessage.data });
            }
            catch (e) {
                // Incase of a IncompatibleVersionError, re-throw the error.
                if (e.errorCode === api_external_contract_js_1.EmbeddingErrorCodes.IncompatibleVersionError) {
                    throw e;
                }
                // Else Ignore  so if one handler errors, the other still get the message.
            }
        }
    };
    return CrossFrameDispatcher;
}());
exports.CrossFrameDispatcher = CrossFrameDispatcher;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/DataSource.js":
/*!********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/DataSource.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var DataSource = /** @class */ (function () {
    function DataSource(_dataSourceImpl) {
        this._dataSourceImpl = _dataSourceImpl;
    }
    Object.defineProperty(DataSource.prototype, "name", {
        get: function () {
            return this._dataSourceImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "id", {
        get: function () {
            return this._dataSourceImpl.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "fields", {
        get: function () {
            return this._dataSourceImpl.fields;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "extractUpdateTime", {
        get: function () {
            return this._dataSourceImpl.extractUpdateTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "isExtract", {
        get: function () {
            return this._dataSourceImpl.isExtract;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSource.prototype, "isPublished", {
        get: function () {
            return this._dataSourceImpl.isPublished;
        },
        enumerable: true,
        configurable: true
    });
    DataSource.prototype.publishedUrl = function () {
        return this._dataSourceImpl.publishedUrl();
    };
    DataSource.prototype.refreshAsync = function () {
        return this._dataSourceImpl.refreshAsync();
    };
    DataSource.prototype.getActiveTablesAsync = function () {
        console.warn('DataSource.getActiveTablesAsync is deprecated. Please use DataSource.getLogicalTablesAsync.');
        return this._dataSourceImpl.getActiveTablesAsync();
    };
    DataSource.prototype.getConnectionSummariesAsync = function () {
        return this._dataSourceImpl.getConnectionSummariesAsync();
    };
    DataSource.prototype.getUnderlyingDataAsync = function (options) {
        console.warn('DataSource.getUnderlyingDataAsync is deprecated. Please use ' +
            'DataSource.getLogicalTablesAsync and DataSource.getLogicalTableDataAsync.');
        return this._dataSourceImpl.getUnderlyingDataAsync(options);
    };
    DataSource.prototype.getLogicalTablesAsync = function () {
        return this._dataSourceImpl.getLogicalTablesAsync();
    };
    DataSource.prototype.getLogicalTableDataAsync = function (logicalTableId, options) {
        return this._dataSourceImpl.getLogicalTableDataAsync(logicalTableId, options);
    };
    DataSource.prototype.getLogicalTableDataReaderAsync = function (logicalTableId, pageRowCount, options) {
        return this._dataSourceImpl.getLogicalTableDataReaderAsync(logicalTableId, pageRowCount, options);
    };
    return DataSource;
}());
exports.DataSource = DataSource;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js":
/*!*****************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var EnumConverter_1 = __webpack_require__(/*! ../Utils/EnumConverter */ "../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js");
/* tslint:disable:typedef - Disable this to make declaring these classes a bit easier */
/**
 * Maps enums used by the external-api-contract to the enums used
 * in the internal-api-contract, which developers code against.
 */
var ExternalToInternalEnumMappings = /** @class */ (function () {
    function ExternalToInternalEnumMappings() {
    }
    ExternalToInternalEnumMappings.filterDomainType = new EnumConverter_1.EnumConverter((_a = {},
        _a[api_external_contract_js_1.FilterDomainType.Relevant] = api_internal_contract_js_1.FilterDomainType.Relevant,
        _a[api_external_contract_js_1.FilterDomainType.Database] = api_internal_contract_js_1.FilterDomainType.Database,
        _a));
    ExternalToInternalEnumMappings.nullOptions = new EnumConverter_1.EnumConverter((_b = {},
        _b[api_external_contract_js_1.FilterNullOption.AllValues] = api_internal_contract_js_1.FilterNullOption.AllValues,
        _b[api_external_contract_js_1.FilterNullOption.NonNullValues] = api_internal_contract_js_1.FilterNullOption.NonNullValues,
        _b[api_external_contract_js_1.FilterNullOption.NullValues] = api_internal_contract_js_1.FilterNullOption.NullValues,
        _b));
    ExternalToInternalEnumMappings.filterUpdateType = new EnumConverter_1.EnumConverter((_c = {},
        _c[api_external_contract_js_1.FilterUpdateType.Add] = api_internal_contract_js_1.FilterUpdateType.Add,
        _c[api_external_contract_js_1.FilterUpdateType.All] = api_internal_contract_js_1.FilterUpdateType.All,
        _c[api_external_contract_js_1.FilterUpdateType.Remove] = api_internal_contract_js_1.FilterUpdateType.Remove,
        _c[api_external_contract_js_1.FilterUpdateType.Replace] = api_internal_contract_js_1.FilterUpdateType.Replace,
        _c));
    ExternalToInternalEnumMappings.setVisibilityType = new EnumConverter_1.EnumConverter((_d = {},
        _d[api_external_contract_js_1.ZoneVisibilityType.Show] = true,
        _d[api_external_contract_js_1.ZoneVisibilityType.Hide] = false,
        _d));
    ExternalToInternalEnumMappings.setReplaySpeedType = new EnumConverter_1.EnumConverter((_e = {},
        // these numbers are duration multipliers
        // 2.0, for example, doubles the duration of the replay, slowing it down to 0.5x speed
        _e[api_external_contract_js_1.ReplaySpeedType.Slow] = 2.0,
        _e[api_external_contract_js_1.ReplaySpeedType.Normal] = 1.0,
        _e[api_external_contract_js_1.ReplaySpeedType.Fast] = 0.5,
        _e));
    ExternalToInternalEnumMappings.sheetType = new EnumConverter_1.EnumConverter((_f = {},
        _f[api_external_contract_js_1.SheetType.Dashboard] = api_internal_contract_js_1.SheetType.Dashboard,
        _f[api_external_contract_js_1.SheetType.Worksheet] = api_internal_contract_js_1.SheetType.Worksheet,
        _f[api_external_contract_js_1.SheetType.Story] = api_internal_contract_js_1.SheetType.Story,
        _f));
    ExternalToInternalEnumMappings.showDataTableFormatType = new EnumConverter_1.EnumConverter((_g = {},
        _g[api_external_contract_js_1.IncludeDataValuesOption.AllValues] = api_internal_contract_js_1.ApiShowDataTableFormat.NativeAndFormattedValues,
        _g[api_external_contract_js_1.IncludeDataValuesOption.OnlyNativeValues] = api_internal_contract_js_1.ApiShowDataTableFormat.NativeValuesOnly,
        _g[api_external_contract_js_1.IncludeDataValuesOption.OnlyFormattedValues] = api_internal_contract_js_1.ApiShowDataTableFormat.FormattedValuesOnly,
        _g));
    ExternalToInternalEnumMappings.periodType = new EnumConverter_1.EnumConverter((_h = {},
        _h[api_external_contract_js_1.PeriodType.Years] = api_internal_contract_js_1.DateStepPeriod.Years,
        _h[api_external_contract_js_1.PeriodType.Quarters] = api_internal_contract_js_1.DateStepPeriod.Quarters,
        _h[api_external_contract_js_1.PeriodType.Months] = api_internal_contract_js_1.DateStepPeriod.Months,
        _h[api_external_contract_js_1.PeriodType.Weeks] = api_internal_contract_js_1.DateStepPeriod.Weeks,
        _h[api_external_contract_js_1.PeriodType.Days] = api_internal_contract_js_1.DateStepPeriod.Days,
        _h[api_external_contract_js_1.PeriodType.Hours] = api_internal_contract_js_1.DateStepPeriod.Hours,
        _h[api_external_contract_js_1.PeriodType.Minutes] = api_internal_contract_js_1.DateStepPeriod.Minutes,
        _h[api_external_contract_js_1.PeriodType.Seconds] = api_internal_contract_js_1.DateStepPeriod.Seconds,
        _h));
    ExternalToInternalEnumMappings.dateRangeType = new EnumConverter_1.EnumConverter((_j = {},
        _j[api_external_contract_js_1.DateRangeType.Last] = api_internal_contract_js_1.DateRangeType.Last,
        _j[api_external_contract_js_1.DateRangeType.LastN] = api_internal_contract_js_1.DateRangeType.LastN,
        _j[api_external_contract_js_1.DateRangeType.Next] = api_internal_contract_js_1.DateRangeType.Next,
        _j[api_external_contract_js_1.DateRangeType.NextN] = api_internal_contract_js_1.DateRangeType.NextN,
        _j[api_external_contract_js_1.DateRangeType.Current] = api_internal_contract_js_1.DateRangeType.Current,
        _j[api_external_contract_js_1.DateRangeType.ToDate] = api_internal_contract_js_1.DateRangeType.ToDate,
        _j));
    ExternalToInternalEnumMappings.dialogStyles = new EnumConverter_1.EnumConverter((_k = {},
        _k[api_external_contract_js_1.DialogStyle.Window] = api_internal_contract_js_1.DialogStyle.Window,
        _k[api_external_contract_js_1.DialogStyle.Modal] = api_internal_contract_js_1.DialogStyle.Modal,
        _k[api_external_contract_js_1.DialogStyle.Modeless] = api_internal_contract_js_1.DialogStyle.Modeless,
        _k));
    return ExternalToInternalEnumMappings;
}());
exports.ExternalToInternalEnumMappings = ExternalToInternalEnumMappings;
/* tslint:enable:typedef */


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js":
/*!*****************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s;
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var EnumConverter_1 = __webpack_require__(/*! ../Utils/EnumConverter */ "../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js");
/* tslint:disable:typedef - Disable this to make declaring these classes a bit easier */
/**
 * Maps enums used by the internal-api-contract to the enums used
 * in the external-api-contract, which developers code against.
 */
var InternalToExternalEnumMappings = /** @class */ (function () {
    function InternalToExternalEnumMappings() {
    }
    InternalToExternalEnumMappings.extensionContext = new EnumConverter_1.EnumConverter((_a = {},
        _a[api_internal_contract_js_1.ExtensionContext.Desktop] = api_external_contract_js_1.ExtensionContext.Desktop,
        _a[api_internal_contract_js_1.ExtensionContext.Server] = api_external_contract_js_1.ExtensionContext.Server,
        _a));
    InternalToExternalEnumMappings.extensionMode = new EnumConverter_1.EnumConverter((_b = {},
        _b[api_internal_contract_js_1.ExtensionMode.Authoring] = api_external_contract_js_1.ExtensionMode.Authoring,
        _b[api_internal_contract_js_1.ExtensionMode.Viewing] = api_external_contract_js_1.ExtensionMode.Viewing,
        _b));
    InternalToExternalEnumMappings.columnType = new EnumConverter_1.EnumConverter((_c = {},
        _c[api_internal_contract_js_1.ColumnType.Continuous] = api_external_contract_js_1.ColumnType.Continuous,
        _c[api_internal_contract_js_1.ColumnType.Discrete] = api_external_contract_js_1.ColumnType.Discrete,
        _c));
    InternalToExternalEnumMappings.fieldAggregationType = new EnumConverter_1.EnumConverter((_d = {},
        _d[api_internal_contract_js_1.FieldAggregationType.Attr] = api_external_contract_js_1.FieldAggregationType.Attr,
        _d[api_internal_contract_js_1.FieldAggregationType.Avg] = api_external_contract_js_1.FieldAggregationType.Avg,
        _d[api_internal_contract_js_1.FieldAggregationType.Collect] = api_external_contract_js_1.FieldAggregationType.Collect,
        _d[api_internal_contract_js_1.FieldAggregationType.Count] = api_external_contract_js_1.FieldAggregationType.Count,
        _d[api_internal_contract_js_1.FieldAggregationType.Countd] = api_external_contract_js_1.FieldAggregationType.Countd,
        _d[api_internal_contract_js_1.FieldAggregationType.Day] = api_external_contract_js_1.FieldAggregationType.Day,
        _d[api_internal_contract_js_1.FieldAggregationType.End] = api_external_contract_js_1.FieldAggregationType.End,
        _d[api_internal_contract_js_1.FieldAggregationType.Hour] = api_external_contract_js_1.FieldAggregationType.Hour,
        _d[api_internal_contract_js_1.FieldAggregationType.InOut] = api_external_contract_js_1.FieldAggregationType.InOut,
        _d[api_internal_contract_js_1.FieldAggregationType.Kurtosis] = api_external_contract_js_1.FieldAggregationType.Kurtosis,
        _d[api_internal_contract_js_1.FieldAggregationType.Max] = api_external_contract_js_1.FieldAggregationType.Max,
        _d[api_internal_contract_js_1.FieldAggregationType.Mdy] = api_external_contract_js_1.FieldAggregationType.Mdy,
        _d[api_internal_contract_js_1.FieldAggregationType.Median] = api_external_contract_js_1.FieldAggregationType.Median,
        _d[api_internal_contract_js_1.FieldAggregationType.Min] = api_external_contract_js_1.FieldAggregationType.Min,
        _d[api_internal_contract_js_1.FieldAggregationType.Minute] = api_external_contract_js_1.FieldAggregationType.Minute,
        _d[api_internal_contract_js_1.FieldAggregationType.MonthYear] = api_external_contract_js_1.FieldAggregationType.MonthYear,
        _d[api_internal_contract_js_1.FieldAggregationType.None] = api_external_contract_js_1.FieldAggregationType.None,
        _d[api_internal_contract_js_1.FieldAggregationType.Qtr] = api_external_contract_js_1.FieldAggregationType.Qtr,
        _d[api_internal_contract_js_1.FieldAggregationType.Quart1] = api_external_contract_js_1.FieldAggregationType.Quart1,
        _d[api_internal_contract_js_1.FieldAggregationType.Quart3] = api_external_contract_js_1.FieldAggregationType.Quart3,
        _d[api_internal_contract_js_1.FieldAggregationType.Second] = api_external_contract_js_1.FieldAggregationType.Second,
        _d[api_internal_contract_js_1.FieldAggregationType.Skewness] = api_external_contract_js_1.FieldAggregationType.Skewness,
        _d[api_internal_contract_js_1.FieldAggregationType.Stdev] = api_external_contract_js_1.FieldAggregationType.Stdev,
        _d[api_internal_contract_js_1.FieldAggregationType.Stdevp] = api_external_contract_js_1.FieldAggregationType.Stdevp,
        _d[api_internal_contract_js_1.FieldAggregationType.Sum] = api_external_contract_js_1.FieldAggregationType.Sum,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncDay] = api_external_contract_js_1.FieldAggregationType.TruncDay,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncHour] = api_external_contract_js_1.FieldAggregationType.TruncHour,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncMinute] = api_external_contract_js_1.FieldAggregationType.TruncMinute,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncMonth] = api_external_contract_js_1.FieldAggregationType.TruncMonth,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncQtr] = api_external_contract_js_1.FieldAggregationType.TruncQtr,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncSecond] = api_external_contract_js_1.FieldAggregationType.TruncSecond,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncWeek] = api_external_contract_js_1.FieldAggregationType.TruncWeek,
        _d[api_internal_contract_js_1.FieldAggregationType.TruncYear] = api_external_contract_js_1.FieldAggregationType.TruncYear,
        _d[api_internal_contract_js_1.FieldAggregationType.User] = api_external_contract_js_1.FieldAggregationType.User,
        _d[api_internal_contract_js_1.FieldAggregationType.Var] = api_external_contract_js_1.FieldAggregationType.Var,
        _d[api_internal_contract_js_1.FieldAggregationType.Varp] = api_external_contract_js_1.FieldAggregationType.Varp,
        _d[api_internal_contract_js_1.FieldAggregationType.Week] = api_external_contract_js_1.FieldAggregationType.Week,
        _d[api_internal_contract_js_1.FieldAggregationType.Weekday] = api_external_contract_js_1.FieldAggregationType.Weekday,
        _d[api_internal_contract_js_1.FieldAggregationType.Year] = api_external_contract_js_1.FieldAggregationType.Year,
        _d));
    InternalToExternalEnumMappings.fieldRoleType = new EnumConverter_1.EnumConverter((_e = {},
        _e[api_internal_contract_js_1.FieldRoleType.Dimension] = api_external_contract_js_1.FieldRoleType.Dimension,
        _e[api_internal_contract_js_1.FieldRoleType.Measure] = api_external_contract_js_1.FieldRoleType.Measure,
        _e[api_internal_contract_js_1.FieldRoleType.Unknown] = api_external_contract_js_1.FieldRoleType.Unknown,
        _e));
    InternalToExternalEnumMappings.sheetType = new EnumConverter_1.EnumConverter((_f = {},
        _f[api_internal_contract_js_1.SheetType.Dashboard] = api_external_contract_js_1.SheetType.Dashboard,
        _f[api_internal_contract_js_1.SheetType.Story] = api_external_contract_js_1.SheetType.Story,
        _f[api_internal_contract_js_1.SheetType.Worksheet] = api_external_contract_js_1.SheetType.Worksheet,
        _f));
    InternalToExternalEnumMappings.dashboardObjectType = new EnumConverter_1.EnumConverter((_g = {},
        _g[api_internal_contract_js_1.DashboardObjectType.Extension] = api_external_contract_js_1.DashboardObjectType.Extension,
        _g[api_internal_contract_js_1.DashboardObjectType.Blank] = api_external_contract_js_1.DashboardObjectType.Blank,
        _g[api_internal_contract_js_1.DashboardObjectType.Image] = api_external_contract_js_1.DashboardObjectType.Image,
        _g[api_internal_contract_js_1.DashboardObjectType.Legend] = api_external_contract_js_1.DashboardObjectType.Legend,
        _g[api_internal_contract_js_1.DashboardObjectType.PageFilter] = api_external_contract_js_1.DashboardObjectType.PageFilter,
        _g[api_internal_contract_js_1.DashboardObjectType.ParameterControl] = api_external_contract_js_1.DashboardObjectType.ParameterControl,
        _g[api_internal_contract_js_1.DashboardObjectType.QuickFilter] = api_external_contract_js_1.DashboardObjectType.QuickFilter,
        _g[api_internal_contract_js_1.DashboardObjectType.Text] = api_external_contract_js_1.DashboardObjectType.Text,
        _g[api_internal_contract_js_1.DashboardObjectType.Title] = api_external_contract_js_1.DashboardObjectType.Title,
        _g[api_internal_contract_js_1.DashboardObjectType.WebPage] = api_external_contract_js_1.DashboardObjectType.WebPage,
        _g[api_internal_contract_js_1.DashboardObjectType.Worksheet] = api_external_contract_js_1.DashboardObjectType.Worksheet,
        _g));
    InternalToExternalEnumMappings.dataType = new EnumConverter_1.EnumConverter((_h = {},
        _h[api_internal_contract_js_1.DataType.Bool] = api_external_contract_js_1.DataType.Bool,
        _h[api_internal_contract_js_1.DataType.Date] = api_external_contract_js_1.DataType.Date,
        _h[api_internal_contract_js_1.DataType.DateTime] = api_external_contract_js_1.DataType.DateTime,
        _h[api_internal_contract_js_1.DataType.Float] = api_external_contract_js_1.DataType.Float,
        _h[api_internal_contract_js_1.DataType.Int] = api_external_contract_js_1.DataType.Int,
        _h[api_internal_contract_js_1.DataType.String] = api_external_contract_js_1.DataType.String,
        _h));
    InternalToExternalEnumMappings.filterUpdateType = new EnumConverter_1.EnumConverter((_j = {},
        _j[api_internal_contract_js_1.FilterUpdateType.Add] = api_external_contract_js_1.FilterUpdateType.Add,
        _j[api_internal_contract_js_1.FilterUpdateType.All] = api_external_contract_js_1.FilterUpdateType.All,
        _j[api_internal_contract_js_1.FilterUpdateType.Remove] = api_external_contract_js_1.FilterUpdateType.Remove,
        _j[api_internal_contract_js_1.FilterUpdateType.Replace] = api_external_contract_js_1.FilterUpdateType.Replace,
        _j));
    InternalToExternalEnumMappings.allowableValues = new EnumConverter_1.EnumConverter((_k = {},
        _k[api_internal_contract_js_1.DomainRestrictionType.All] = api_external_contract_js_1.ParameterValueType.All,
        _k[api_internal_contract_js_1.DomainRestrictionType.List] = api_external_contract_js_1.ParameterValueType.List,
        _k[api_internal_contract_js_1.DomainRestrictionType.Range] = api_external_contract_js_1.ParameterValueType.Range,
        _k));
    InternalToExternalEnumMappings.dateStepPeriod = new EnumConverter_1.EnumConverter((_l = {},
        _l[api_internal_contract_js_1.DateStepPeriod.Years] = api_external_contract_js_1.PeriodType.Years,
        _l[api_internal_contract_js_1.DateStepPeriod.Quarters] = api_external_contract_js_1.PeriodType.Quarters,
        _l[api_internal_contract_js_1.DateStepPeriod.Months] = api_external_contract_js_1.PeriodType.Months,
        _l[api_internal_contract_js_1.DateStepPeriod.Weeks] = api_external_contract_js_1.PeriodType.Weeks,
        _l[api_internal_contract_js_1.DateStepPeriod.Days] = api_external_contract_js_1.PeriodType.Days,
        _l[api_internal_contract_js_1.DateStepPeriod.Hours] = api_external_contract_js_1.PeriodType.Hours,
        _l[api_internal_contract_js_1.DateStepPeriod.Minutes] = api_external_contract_js_1.PeriodType.Minutes,
        _l[api_internal_contract_js_1.DateStepPeriod.Seconds] = api_external_contract_js_1.PeriodType.Seconds,
        _l));
    InternalToExternalEnumMappings.dateRangeType = new EnumConverter_1.EnumConverter((_m = {},
        _m[api_internal_contract_js_1.DateRangeType.Current] = api_external_contract_js_1.DateRangeType.Current,
        _m[api_internal_contract_js_1.DateRangeType.Last] = api_external_contract_js_1.DateRangeType.Last,
        _m[api_internal_contract_js_1.DateRangeType.LastN] = api_external_contract_js_1.DateRangeType.LastN,
        _m[api_internal_contract_js_1.DateRangeType.Next] = api_external_contract_js_1.DateRangeType.Next,
        _m[api_internal_contract_js_1.DateRangeType.NextN] = api_external_contract_js_1.DateRangeType.NextN,
        _m[api_internal_contract_js_1.DateRangeType.ToDate] = api_external_contract_js_1.DateRangeType.ToDate,
        _m));
    InternalToExternalEnumMappings.errorCode = new EnumConverter_1.EnumConverter((_o = {},
        _o[api_internal_contract_js_1.ErrorCodes.INITIALIZATION_ERROR] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.INTERNAL_ERROR] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.MISSING_ENUM_MAPPING] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.MISSING_PARAMETER] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.PERMISSION_DENIED] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.PRES_MODEL_PARSING_ERROR] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.UNKNOWN_VERB_ID] = api_external_contract_js_1.ErrorCodes.InternalError,
        _o[api_internal_contract_js_1.ErrorCodes.VERSION_NOT_CONFIGURED] = api_external_contract_js_1.ErrorCodes.APINotInitialized,
        _o[api_internal_contract_js_1.ErrorCodes.VISIBILITY_ERROR] = api_external_contract_js_1.ErrorCodes.VisibilityError,
        _o), api_external_contract_js_1.ErrorCodes.InternalError);
    InternalToExternalEnumMappings.filterType = new EnumConverter_1.EnumConverter((_p = {},
        _p[api_internal_contract_js_1.FilterType.Categorical] = api_external_contract_js_1.FilterType.Categorical,
        _p[api_internal_contract_js_1.FilterType.Range] = api_external_contract_js_1.FilterType.Range,
        _p[api_internal_contract_js_1.FilterType.RelativeDate] = api_external_contract_js_1.FilterType.RelativeDate,
        _p[api_internal_contract_js_1.FilterType.Hierarchical] = api_external_contract_js_1.FilterType.Hierarchical,
        _p));
    InternalToExternalEnumMappings.classNameKey = new EnumConverter_1.EnumConverter((_q = {},
        _q["tableau-dashboard-title" /* DashboardTitle */] = api_external_contract_js_1.ClassNameKey.DashboardTitle,
        _q["tableau-story-title" /* StoryTitle */] = api_external_contract_js_1.ClassNameKey.StoryTitle,
        _q["tableau-tooltip" /* Tooltip */] = api_external_contract_js_1.ClassNameKey.Tooltip,
        _q["tableau-worksheet" /* Worksheet */] = api_external_contract_js_1.ClassNameKey.Worksheet,
        _q["tableau-worksheet-title" /* WorksheetTitle */] = api_external_contract_js_1.ClassNameKey.WorksheetTitle,
        // Temporary until we fix 1317266 - Platform hasn't been updated currently because near branch is closed
        _q['dashboard-title'] = api_external_contract_js_1.ClassNameKey.DashboardTitle,
        _q['story-title'] = api_external_contract_js_1.ClassNameKey.StoryTitle,
        _q['tooltip'] = api_external_contract_js_1.ClassNameKey.Tooltip,
        _q['worksheet'] = api_external_contract_js_1.ClassNameKey.Worksheet,
        _q['worksheet-title'] = api_external_contract_js_1.ClassNameKey.WorksheetTitle,
        _q));
    InternalToExternalEnumMappings.hierarchicalLevelSelectionState = new EnumConverter_1.EnumConverter((_r = {},
        _r[api_internal_contract_js_1.HierarchicalLevelSelectionState.AllSelected] = api_external_contract_js_1.HierarchicalLevelSelectionState.AllSelected,
        _r[api_internal_contract_js_1.HierarchicalLevelSelectionState.NoneSelected] = api_external_contract_js_1.HierarchicalLevelSelectionState.NoneSelected,
        _r[api_internal_contract_js_1.HierarchicalLevelSelectionState.SomeSelected] = api_external_contract_js_1.HierarchicalLevelSelectionState.SomeSelected,
        _r[api_internal_contract_js_1.HierarchicalLevelSelectionState.UnknownSelected] = api_external_contract_js_1.HierarchicalLevelSelectionState.UnknownSelected,
        _r));
    InternalToExternalEnumMappings.annotationType = new EnumConverter_1.EnumConverter((_s = {},
        _s[api_internal_contract_js_1.AnnotateEnum.Area] = api_external_contract_js_1.AnnotationType.Area,
        _s[api_internal_contract_js_1.AnnotateEnum.Mark] = api_external_contract_js_1.AnnotationType.Mark,
        _s[api_internal_contract_js_1.AnnotateEnum.Point] = api_external_contract_js_1.AnnotationType.Point,
        _s));
    return InternalToExternalEnumMappings;
}());
exports.InternalToExternalEnumMappings = InternalToExternalEnumMappings;
/* tslint:enable:typedef */


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/EventListenerManager.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/EventListenerManager.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ./TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
/**
 * Class designed to register and unregister handlers from a user. Only those events
 * which are added via AddNewEventType will be supported by this instance
 */
var EventListenerManager = /** @class */ (function () {
    function EventListenerManager() {
        this._eventListenerManagers = {};
    }
    EventListenerManager.prototype.addEventListener = function (eventType, handler) {
        if (!this._eventListenerManagers.hasOwnProperty(eventType)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.UnsupportedEventName, "Cannot add event, unsupported event type: " + eventType);
        }
        return this._eventListenerManagers[eventType].addEventListener(handler);
    };
    EventListenerManager.prototype.removeEventListener = function (eventType, handler) {
        if (!this._eventListenerManagers.hasOwnProperty(eventType)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.UnsupportedEventName, "Cannot remove event, unsupported event type: " + eventType);
        }
        return this._eventListenerManagers[eventType].removeEventListener(handler);
    };
    EventListenerManager.prototype.addNewEventType = function (eventManager) {
        this._eventListenerManagers[eventManager.eventType] = eventManager;
    };
    return EventListenerManager;
}());
exports.EventListenerManager = EventListenerManager;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Field.js":
/*!***************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Field.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var ErrorHelpers_1 = __webpack_require__(/*! ./Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Field = /** @class */ (function () {
    function Field(_fieldImpl) {
        this._fieldImpl = _fieldImpl;
    }
    Object.defineProperty(Field.prototype, "name", {
        get: function () {
            return this._fieldImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "id", {
        get: function () {
            return this._fieldImpl.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "description", {
        get: function () {
            return this._fieldImpl.description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "aggregation", {
        get: function () {
            return this._fieldImpl.aggregation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "dataSource", {
        get: function () {
            return this._fieldImpl.dataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "role", {
        get: function () {
            return this._fieldImpl.role;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isHidden", {
        get: function () {
            return this._fieldImpl.isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isGenerated", {
        get: function () {
            return this._fieldImpl.isGenerated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isCalculatedField", {
        get: function () {
            return this._fieldImpl.isCalculatedField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "columnType", {
        get: function () {
            throw ErrorHelpers_1.ErrorHelpers.apiNotImplemented('Field.columnType');
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Field.prototype, "isCombinedField", {
        get: function () {
            return this._fieldImpl.isCombinedField;
        },
        enumerable: true,
        configurable: true
    });
    return Field;
}());
exports.Field = Field;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/CustomViewImpl.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/CustomViewImpl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var ApiShared_1 = __webpack_require__(/*! ../../ApiShared */ "../api-shared-js/lib/src/ApiShared.js");
var CustomViewImpl = /** @class */ (function () {
    function CustomViewImpl(customViewModel, _registryId) {
        this._registryId = _registryId;
        this._luid = customViewModel.luid;
        this._name = customViewModel.name;
        this._shared = customViewModel.shared;
        this._isDefault = customViewModel.isDefault;
        this._ownerName = customViewModel.owner.userFriendlyName;
        this._url = customViewModel.url;
    }
    Object.defineProperty(CustomViewImpl.prototype, "luid", {
        get: function () {
            return this._luid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "name", {
        get: function () {
            return this._name;
        },
        set: function (name) {
            this._name = name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "shared", {
        get: function () {
            return this._shared;
        },
        set: function (shared) {
            this._shared = shared;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "isDefault", {
        get: function () {
            return this._isDefault;
        },
        set: function (isDefault) {
            this._isDefault = isDefault;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "ownerName", {
        get: function () {
            return this._ownerName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CustomViewImpl.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    CustomViewImpl.prototype.saveAsync = function () {
        var service = ApiShared_1.ApiServiceRegistry.get(this._registryId).getService("viz-service" /* Viz */);
        return service.saveAsync(this);
    };
    return CustomViewImpl;
}());
exports.CustomViewImpl = CustomViewImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/DashboardImpl.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/DashboardImpl.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var Point_1 = __webpack_require__(/*! ../Point */ "../api-shared-js/lib/src/ApiShared/Point.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var DashboardObjectImpl_1 = __webpack_require__(/*! ./DashboardObjectImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DashboardObjectImpl.js");
var SheetImpl_1 = __webpack_require__(/*! ./SheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js");
var SheetInfoImpl_1 = __webpack_require__(/*! ./SheetInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js");
var WorksheetImpl_1 = __webpack_require__(/*! ./WorksheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js");
var DashboardImpl = /** @class */ (function (_super) {
    __extends(DashboardImpl, _super);
    function DashboardImpl(_sheetInfo, _zones, _sheetPath, _registryId, _parentStoryPointImpl) {
        var _this = _super.call(this, _sheetInfo, _registryId) || this;
        _this._zones = _zones;
        _this._sheetPath = _sheetPath;
        _this._parentStoryPointImpl = _parentStoryPointImpl;
        return _this;
    }
    Object.defineProperty(DashboardImpl.prototype, "worksheetsImpl", {
        get: function () {
            return this._worksheetsImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "objects", {
        get: function () {
            return this._objects;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardImpl.prototype, "parentStoryPoint", {
        get: function () {
            return this._parentStoryPointImpl;
        },
        enumerable: true,
        configurable: true
    });
    DashboardImpl.prototype.initializeWithPublicInterfaces = function () {
        this._worksheetsImpl = new Array();
        this._objects = new Array();
        this.zoneMap = new Map();
        // Process all the zones which are contained in this dashboard
        for (var _i = 0, _a = this._zones; _i < _a.length; _i++) {
            var zone = _a[_i];
            var worksheetImpl = undefined;
            var zoneSize = { width: zone.width, height: zone.height };
            // As the dashboard is active, all other zones in the dashboard are inactive.
            var isActive = false;
            if (zone.zoneType === api_internal_contract_js_1.DashboardObjectType.Worksheet) {
                var worksheetName = '';
                var worksheetUrl = '';
                var isHidden = false;
                if (zone.sheetInfo) {
                    // zone.sheetInfo was not initialized prior to internal-contract 1.6.0
                    worksheetName = zone.sheetInfo.name;
                    // worksheetUrl & isHidden is for Embedding only
                    worksheetUrl = zone.sheetInfo.url || '';
                    // If there's a url, then it's not hidden
                    isHidden = worksheetUrl === '';
                }
                else {
                    worksheetName = zone.name;
                }
                // Indexes, isActive and some more properties in sheetInfoImpl are embedding specific.
                // But we init them for both extensions and embedding as the Models will only use what is relevant.
                var sheetInfoImpl = new SheetInfoImpl_1.SheetInfoImpl(worksheetName, api_external_contract_js_1.SheetType.Worksheet, zoneSize, this._worksheetsImpl.length, isActive, isHidden, worksheetUrl);
                var vizId = {
                    worksheet: worksheetName,
                    dashboard: this._sheetInfoImpl.name,
                    storyboard: this._sheetPath.storyboard,
                    flipboardZoneID: this._sheetPath.flipboardZoneID,
                    storyPointID: this._sheetPath.storyPointID,
                };
                worksheetImpl = new WorksheetImpl_1.WorksheetImpl(sheetInfoImpl, this._registryId, vizId, this, this._parentStoryPointImpl);
                this._worksheetsImpl.push(worksheetImpl);
            }
            var zonePoint = new Point_1.Point(zone.x, zone.y);
            var dashboardObjectImpl = new DashboardObjectImpl_1.DashboardObjectImpl(this, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dashboardObjectType.convert(zone.zoneType), zonePoint, zoneSize, worksheetImpl, zone.name, zone.isFloating !== undefined ? zone.isFloating : false, // before 1.6.0 we didn't have isFloating, so we assume false
            zone.isVisible !== undefined ? zone.isVisible : true, // before 1.6.0 we didn't have isVisible, so we assume true
            zone.zoneId);
            this._objects.push(dashboardObjectImpl);
            this.zoneMap.set(zone.zoneId, dashboardObjectImpl);
        }
    };
    DashboardImpl.prototype.setDashboardObjectVisibilityAsync = function (dashboardObjectVisibilityMap) {
        var zoneService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("zone-service" /* Zone */);
        return zoneService.setVisibilityAsync(/*Dashboard Name*/ this.name, this.zoneMap, dashboardObjectVisibilityMap);
    };
    DashboardImpl.prototype.getDashboardObjectById = function (dashboardObjectId) {
        return this.zoneMap.get(dashboardObjectId);
    };
    DashboardImpl.prototype.updateZones = function (newZones) {
        var _this = this;
        // getting previous dashboard objects
        var oldDashboardObjects = this._objects;
        var oldZoneMap = this.zoneMap;
        // updating zones, and reinitializing instance variables
        this._zones = newZones;
        this.initializeWithPublicInterfaces();
        // getting new dashboard objects
        var newDashboardObjects = this._objects;
        var newZoneMap = this.zoneMap;
        // initializing map for changes
        var zoneChanges = new Map();
        // comparing old dashboard objects with new ones
        oldDashboardObjects.forEach(function (oldObject) {
            var oldId = oldObject.id;
            // checking if zone was removed
            if (!newZoneMap.has(oldId)) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Removed);
                return;
            }
            var newObject = newZoneMap.get(oldId);
            if (oldObject.isFloating !== newObject.isFloating) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.IsFloatingChanged);
            }
            if (oldObject.isVisible !== newObject.isVisible) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.IsVisibleChanged);
            }
            if (oldObject.name !== newObject.name) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.NameChanged);
            }
            if (oldObject.position.x !== newObject.position.x || oldObject.position.y !== newObject.position.y) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.PositionChanged);
            }
            if (oldObject.size.width !== newObject.size.width || oldObject.size.height !== newObject.size.height) {
                _this.addChange(oldId, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.SizeChanged);
            }
        });
        // Checking for any added zones
        newDashboardObjects.forEach(function (newObject) {
            if (!oldZoneMap.has(newObject.id)) {
                _this.addChange(newObject.id, zoneChanges, api_external_contract_js_1.DashboardLayoutChange.Added);
            }
        });
        return zoneChanges;
    };
    DashboardImpl.prototype.addChange = function (zoneId, zoneChanges, change) {
        if (!zoneChanges.has(zoneId)) {
            zoneChanges.set(zoneId, []);
        }
        zoneChanges.get(zoneId).push(change);
    };
    DashboardImpl.prototype.moveAndResizeDashboardObjectsAsync = function (dashboardObjectPositionAndSizeUpdateArray) {
        var zoneService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("zone-service" /* Zone */);
        return zoneService.moveAndResizeAsync(/*Dashboard Name*/ this.name, this.zoneMap, dashboardObjectPositionAndSizeUpdateArray);
    };
    DashboardImpl.prototype.replayAnimationAsync = function (replaySpeed) {
        var animationService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("animation-service" /* Animation */);
        return animationService.replayAsync(replaySpeed);
    };
    DashboardImpl.prototype.getFiltersAsync = function () {
        this.verifyActiveSheetOrEmbeddedInActiveStoryPoint();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getDashboardFiltersAsync();
    };
    DashboardImpl.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(updateType, Contract.FilterUpdateType, 'FilterUpdateType');
        ErrorHelpers_1.ErrorHelpers.verifyStringParameter(fieldName, 'fieldName');
        if (!Array.isArray(values)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'values parameter for applyDashboardFilterAsync must be an array');
        }
        this.verifyActiveSheetOrEmbeddedInActiveStoryPoint();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyDashboardFilterAsync(fieldName, values, updateType, options);
    };
    // @W-12986439: remove once initializeWithPublicInterfaces is moved to the constructor for this class
    // This method only exists since worksheetsImpl can be undefined, but we need the worksheet names in the Export APIs
    DashboardImpl.prototype.getWorksheetNamesFromZones = function () {
        var worksheetNames = [];
        for (var _i = 0, _a = this._zones; _i < _a.length; _i++) {
            var zone = _a[_i];
            if (zone.zoneType !== api_internal_contract_js_1.DashboardObjectType.Worksheet) {
                continue;
            }
            // zone.sheetInfo was not initialized prior to internal-contract 1.6.0
            var worksheetName = zone.sheetInfo ? zone.sheetInfo.name : zone.name;
            worksheetNames.push(worksheetName);
        }
        return worksheetNames;
    };
    DashboardImpl.prototype.verifyActiveSheetOrEmbeddedInActiveStoryPoint = function () {
        var isRootAndActiveDashboard = this.active;
        var isWithinActiveStoryPoint = this.parentStoryPoint != null && this.parentStoryPoint.active;
        if (!isRootAndActiveDashboard && !isWithinActiveStoryPoint) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.NotActiveSheet, 'Operation not allowed on non-active sheet');
        }
    };
    return DashboardImpl;
}(SheetImpl_1.SheetImpl));
exports.DashboardImpl = DashboardImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/DashboardObjectImpl.js":
/*!**********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/DashboardObjectImpl.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of the dashboard objects - the zones in a dashboard.
 * This does not follow the Impl pattern as it is just a property bag.
 */
var DashboardObjectImpl = /** @class */ (function () {
    function DashboardObjectImpl(_dashboardImpl, _type, _position, _size, _worksheetImpl, _name, _isFloating, _isVisible, _id) {
        this._dashboardImpl = _dashboardImpl;
        this._type = _type;
        this._position = _position;
        this._size = _size;
        this._worksheetImpl = _worksheetImpl;
        this._name = _name;
        this._isFloating = _isFloating;
        this._isVisible = _isVisible;
        this._id = _id;
    }
    Object.defineProperty(DashboardObjectImpl.prototype, "dashboardImpl", {
        get: function () {
            return this._dashboardImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "position", {
        get: function () {
            return this._position;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "worksheetImpl", {
        get: function () {
            return this._worksheetImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "isFloating", {
        get: function () {
            return this._isFloating;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "isVisible", {
        get: function () {
            return this._isVisible;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DashboardObjectImpl.prototype, "id", {
        get: function () {
            return this._id;
        },
        enumerable: true,
        configurable: true
    });
    return DashboardObjectImpl;
}());
exports.DashboardObjectImpl = DashboardObjectImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ConnectionSummary_1 = __webpack_require__(/*! ../ConnectionSummary */ "../api-shared-js/lib/src/ApiShared/ConnectionSummary.js");
var Field_1 = __webpack_require__(/*! ../Field */ "../api-shared-js/lib/src/ApiShared/Field.js");
var LogicalTable_1 = __webpack_require__(/*! ../LogicalTable */ "../api-shared-js/lib/src/ApiShared/LogicalTable.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableSummary_1 = __webpack_require__(/*! ../TableSummary */ "../api-shared-js/lib/src/ApiShared/TableSummary.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var FieldImpl_1 = __webpack_require__(/*! ./FieldImpl */ "../api-shared-js/lib/src/ApiShared/Impl/FieldImpl.js");
var DataSourceImpl = /** @class */ (function () {
    function DataSourceImpl(_dataSourceInfo, _registryId) {
        var _this = this;
        this._dataSourceInfo = _dataSourceInfo;
        this._registryId = _registryId;
        this._fields = _dataSourceInfo.fields.map(function (fieldModel) {
            var fieldImpl = new FieldImpl_1.FieldImpl(fieldModel, _this);
            return new Field_1.Field(fieldImpl);
        });
    }
    Object.defineProperty(DataSourceImpl.prototype, "name", {
        get: function () {
            return this._dataSourceInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "id", {
        get: function () {
            return this._dataSourceInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "extractUpdateTime", {
        get: function () {
            return this._dataSourceInfo.extractUpdateTime;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "fields", {
        get: function () {
            return this._fields;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "isExtract", {
        get: function () {
            return this._dataSourceInfo.isExtract;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataSourceImpl.prototype, "isPublished", {
        get: function () {
            return this._dataSourceInfo.isPublished;
        },
        enumerable: true,
        configurable: true
    });
    DataSourceImpl.prototype.publishedUrl = function () {
        return this._dataSourceInfo.publishedUrl;
    };
    DataSourceImpl.prototype.getMaxPageRowLimit = function () {
        return 10000;
    };
    DataSourceImpl.prototype.refreshAsync = function () {
        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return dataSourceService.refreshAsync(this._dataSourceInfo.id);
    };
    DataSourceImpl.prototype.getConnectionSummariesAsync = function () {
        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return dataSourceService.getConnectionSummariesAsync(this._dataSourceInfo.id).then(function (summaries) {
            return summaries.map(function (summary) { return new ConnectionSummary_1.ConnectionSummary(summary); });
        });
    };
    DataSourceImpl.prototype.getActiveTablesAsync = function () {
        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return dataSourceService.getActiveTablesAsync(this._dataSourceInfo.id).then(function (tableInfos) {
            return tableInfos.map(function (tableInfo) { return new TableSummary_1.TableSummary(tableInfo); });
        });
    };
    DataSourceImpl.prototype.getUnderlyingDataAsync = function (options) {
        var getDataService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return getDataService.getDataSourceDataAsync(this.id, !!options.ignoreAliases, options.maxRows || 0, // 0 and [] are defaults
        options.columnsToInclude || [], options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    DataSourceImpl.prototype.getLogicalTableDataAsync = function (logicalTableId, options) {
        var getDataService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return getDataService.getLogicalTableDataAsync(this.id, logicalTableId, !!options.ignoreAliases, options.maxRows || 0, // 0 and [] are defaults
        options.columnsToInclude || [], options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    DataSourceImpl.prototype.getLogicalTableDataReaderAsync = function (logicalTableId, pageRowCount, options) {
        var getDataService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return getDataService.getLogicalTableDataReaderAsync(this.id, logicalTableId, pageRowCount || this.getMaxPageRowLimit(), !!options.ignoreAliases, options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    DataSourceImpl.prototype.initializeWithPublicInterfaces = function (dataSource) {
        ErrorHelpers_1.ErrorHelpers.verifyInternalValue(dataSource, 'dataSource');
        this._fields = this._dataSourceInfo.fields.map(function (fieldModel) {
            var fieldImpl = new FieldImpl_1.FieldImpl(fieldModel, dataSource);
            return new Field_1.Field(fieldImpl);
        });
    };
    DataSourceImpl.prototype.getLogicalTablesAsync = function () {
        var dataSourceService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return dataSourceService.getLogicalTablesAsync(this.id).then(function (logicalTableInfos) {
            return logicalTableInfos.map(function (logicalTableInfo) { return new LogicalTable_1.LogicalTable(logicalTableInfo); });
        });
    };
    return DataSourceImpl;
}());
exports.DataSourceImpl = DataSourceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/FieldImpl.js":
/*!************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/FieldImpl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var FieldImpl = /** @class */ (function () {
    function FieldImpl(_fieldInfo, _parentDataSource) {
        this._fieldInfo = _fieldInfo;
        this._parentDataSource = _parentDataSource;
    }
    Object.defineProperty(FieldImpl.prototype, "name", {
        get: function () {
            return this._fieldInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "id", {
        get: function () {
            return this._fieldInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "description", {
        get: function () {
            return this._fieldInfo.description;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "aggregation", {
        get: function () {
            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.fieldAggregationType.convert(this._fieldInfo.aggregation);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "dataSource", {
        get: function () {
            return this._parentDataSource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "role", {
        get: function () {
            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.fieldRoleType.convert(this._fieldInfo.role);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isHidden", {
        get: function () {
            return this._fieldInfo.isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isGenerated", {
        get: function () {
            return this._fieldInfo.isGenerated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isCalculatedField", {
        get: function () {
            return this._fieldInfo.isCalculatedField;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FieldImpl.prototype, "isCombinedField", {
        get: function () {
            return this._fieldInfo.isCombinedField;
        },
        enumerable: true,
        configurable: true
    });
    return FieldImpl;
}());
exports.FieldImpl = FieldImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/ParameterImpl.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/ParameterImpl.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var DataValueFactory_1 = __webpack_require__(/*! ../Utils/DataValueFactory */ "../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Param_1 = __webpack_require__(/*! ../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var ParameterImpl = /** @class */ (function () {
    function ParameterImpl(parameterInfo, _registryId) {
        this._registryId = _registryId;
        this.setParameterInfo(parameterInfo);
    }
    Object.defineProperty(ParameterImpl.prototype, "name", {
        get: function () {
            return this._parameterInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParameterImpl.prototype, "currentValue", {
        get: function () {
            return DataValueFactory_1.DataValueFactory.MakeParameterDataValue(this._parameterInfo.currentValue, this._parameterInfo.dataType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParameterImpl.prototype, "dataType", {
        get: function () {
            return InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dataType.convert(this._parameterInfo.dataType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParameterImpl.prototype, "id", {
        get: function () {
            return this._globalFieldName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ParameterImpl.prototype, "allowableValues", {
        get: function () {
            return this._allowableValues;
        },
        enumerable: true,
        configurable: true
    });
    ParameterImpl.prototype.changeValueAsync = function (newValue) {
        var _this = this;
        ErrorHelpers_1.ErrorHelpers.verifyParameter(newValue, 'newValue');
        var coercedValue = Param_1.Param.serializeParameterValue(newValue);
        var parametersService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return parametersService.changeParameterValueAsync(this._globalFieldName, coercedValue).then(function (parameterInfo) {
            _this.setParameterInfo(parameterInfo);
            return _this.currentValue;
        });
    };
    ParameterImpl.prototype.setParameterInfo = function (parameterInfo) {
        this._parameterInfo = parameterInfo;
        this._globalFieldName = parameterInfo.fieldName;
        var type = InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.allowableValues.convert(parameterInfo.allowableValuesType);
        var listValues;
        var minValue;
        var maxValue;
        var stepSize;
        var dateStepPeriod;
        if (type === api_external_contract_js_1.ParameterValueType.List) {
            var values = parameterInfo.allowableValues || [];
            listValues = values.map(function (val) { return DataValueFactory_1.DataValueFactory.MakeParameterDataValue(val, parameterInfo.dataType); });
        }
        else if (type === api_external_contract_js_1.ParameterValueType.Range) {
            minValue = parameterInfo.minValue && DataValueFactory_1.DataValueFactory.MakeParameterDataValue(parameterInfo.minValue, parameterInfo.dataType);
            maxValue = parameterInfo.maxValue && DataValueFactory_1.DataValueFactory.MakeParameterDataValue(parameterInfo.maxValue, parameterInfo.dataType);
            stepSize = parameterInfo.stepSize;
            dateStepPeriod = parameterInfo.dateStepPeriod && InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateStepPeriod.convert(parameterInfo.dateStepPeriod);
        }
        this._allowableValues = {
            type: type,
            allowableValues: listValues,
            minValue: minValue,
            maxValue: maxValue,
            stepSize: stepSize,
            dateStepPeriod: dateStepPeriod,
        };
    };
    return ParameterImpl;
}());
exports.ParameterImpl = ParameterImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js":
/*!************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Param_1 = __webpack_require__(/*! ../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var SheetUtils_1 = __webpack_require__(/*! ../Utils/SheetUtils */ "../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js");
var SheetImpl = /** @class */ (function () {
    function SheetImpl(_sheetInfoImpl, _registryId) {
        this._sheetInfoImpl = _sheetInfoImpl;
        this._registryId = _registryId;
    }
    Object.defineProperty(SheetImpl.prototype, "name", {
        get: function () {
            return this._sheetInfoImpl.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "sheetType", {
        get: function () {
            return this._sheetInfoImpl.sheetType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "sheetPath", {
        get: function () {
            return this._sheetInfoImpl.sheetPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "size", {
        get: function () {
            return this._sheetInfoImpl.sheetSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "hidden", {
        get: function () {
            if (this._sheetInfoImpl.isHidden !== undefined) {
                return this._sheetInfoImpl.isHidden;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "isHidden not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "active", {
        get: function () {
            if (this._sheetInfoImpl.isActive !== undefined) {
                return this._sheetInfoImpl.isActive;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "active not implemented");
        },
        set: function (active) {
            if (this._sheetInfoImpl.isActive !== undefined) {
                this._sheetInfoImpl.active = active;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "index", {
        get: function () {
            if (this._sheetInfoImpl.index !== undefined) {
                return this._sheetInfoImpl.index;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "index not implemented");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetImpl.prototype, "url", {
        get: function () {
            if (this._sheetInfoImpl.url !== undefined) {
                return this._sheetInfoImpl.url;
            }
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.ImplementationError, "url not implemented");
        },
        enumerable: true,
        configurable: true
    });
    SheetImpl.prototype.getSheetSize = function () {
        if (!SheetUtils_1.SheetUtils.isValidSheetSize(this.size)) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InternalError, 'size is not of type SheetSize');
        }
        return this.size;
    };
    SheetImpl.prototype.findParameterAsync = function (parameterName) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(parameterName, 'parameterName');
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return service.findParameterByNameAsync(parameterName);
    };
    SheetImpl.prototype.getParametersAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("parameters-service" /* Parameters */);
        return service.getParametersForSheetAsync(this.sheetPath);
    };
    SheetImpl.prototype.changeSizeAsync = function (newSize) {
        var _this = this;
        var invalidSizeError = new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Invalid sheet size parameter');
        if (!newSize || !newSize.behavior) {
            throw invalidSizeError;
        }
        var partialSheetSize = this.normalizeSheetSize(newSize);
        var isAutomatic = partialSheetSize.behavior === Contract.SheetSizeBehavior.Automatic;
        if (!isAutomatic && !partialSheetSize.minSize && !partialSheetSize.maxSize) {
            throw invalidSizeError;
        }
        if (!isAutomatic && this.sheetType === Contract.SheetType.Worksheet) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSizeBehaviorOnWorksheet, 'Only SheetSizeBehavior.Automatic is allowed on Worksheets');
        }
        if (isAutomatic && this.getSheetSize().behavior === partialSheetSize.behavior) {
            return Promise.resolve(newSize);
        }
        var processedNewSize = this.processNewSize(partialSheetSize);
        var sizeService = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("size-service" /* Size */);
        return sizeService.changeSizeAsync(this.name, processedNewSize).then(function () {
            var clientInfoService = ServiceRegistry_1.ApiServiceRegistry.get(_this._registryId).getService("client-info-service" /* ClientInfo */);
            return clientInfoService.getClientInfoAsync().then(function (bootstrapInfo) {
                var sheet = bootstrapInfo.publishedSheets.find(function (s) { return s.name === _this.name; });
                if (!sheet) {
                    throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InternalError, "Can't find sheet with name " + _this.name);
                }
                var sheetSize = SheetUtils_1.SheetUtils.getSheetSizeFromSizeConstraints(sheet.sizeConstraint);
                _this._sheetInfoImpl.sheetSize = sheetSize;
                return sheetSize;
            });
        });
    };
    SheetImpl.prototype.normalizeSheetSize = function (newSize) {
        var behavior = newSize.behavior;
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(behavior, Contract.SheetSizeBehavior, 'SheetSizeBehavior');
        var minSize = SheetImpl.parseDimensions(newSize.minSize);
        var maxSize = SheetImpl.parseDimensions(newSize.maxSize);
        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
    };
    SheetImpl.prototype.processNewSize = function (newSize) {
        var _a, _b, _c, _d;
        var behavior = newSize.behavior, minSizeMaybe = newSize.minSize, maxSizeMaybe = newSize.maxSize;
        var hasMinWidth = !Param_1.Param.isNullOrUndefined((_a = minSizeMaybe) === null || _a === void 0 ? void 0 : _a.width);
        var hasMinHeight = !Param_1.Param.isNullOrUndefined((_b = minSizeMaybe) === null || _b === void 0 ? void 0 : _b.height);
        var hasMaxWidth = !Param_1.Param.isNullOrUndefined((_c = maxSizeMaybe) === null || _c === void 0 ? void 0 : _c.width);
        var hasMaxHeight = !Param_1.Param.isNullOrUndefined((_d = maxSizeMaybe) === null || _d === void 0 ? void 0 : _d.height);
        var hasValidMinSize = hasMinWidth && hasMinHeight;
        var hasValidMaxSize = hasMaxWidth && hasMaxHeight;
        switch (behavior) {
            case Contract.SheetSizeBehavior.Automatic: {
                return { behavior: behavior };
            }
            case Contract.SheetSizeBehavior.AtMost: {
                if (!maxSizeMaybe || !hasValidMaxSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMaxSize, 'Missing maxSize for SheetSizeBehavior.AtMost');
                }
                var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                if (maxSize.width < 0 || maxSize.height < 0) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Size value cannot be less than zero');
                }
                return { behavior: behavior, maxSize: maxSize };
            }
            case Contract.SheetSizeBehavior.AtLeast: {
                if (!minSizeMaybe || !hasValidMinSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMinSize, 'Missing minSize for SheetSizeBehavior.AtLeast');
                }
                var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                if (minSize.width < 0 || minSize.height < 0) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Size value cannot be less than zero');
                }
                return { behavior: behavior, minSize: minSize };
            }
            case Contract.SheetSizeBehavior.Range: {
                if (!minSizeMaybe || !maxSizeMaybe || !hasValidMinSize || !hasValidMaxSize) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.MissingMinMaxSize, 'Missing minSize or maxSize for SheetSizeBehavior.Range');
                }
                var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                if (minSize.width < 0 ||
                    minSize.height < 0 ||
                    maxSize.width < 0 ||
                    maxSize.height < 0 ||
                    minSize.width > maxSize.width ||
                    minSize.height > maxSize.height) {
                    throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Missing minSize or maxSize for SheetSizeBehavior.Range');
                }
                return { behavior: behavior, minSize: minSize, maxSize: maxSize };
            }
            case Contract.SheetSizeBehavior.Exactly: {
                if (minSizeMaybe && maxSizeMaybe) {
                    if (hasValidMinSize && hasValidMaxSize) {
                        var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                        var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                        if (minSize.width !== maxSize.width || minSize.height !== maxSize.height) {
                            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Conflicting size values for SheetSizeBehavior.Exactly');
                        }
                        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
                    }
                    if (hasValidMinSize) {
                        var minSize = { width: minSizeMaybe.width, height: minSizeMaybe.height };
                        return { behavior: behavior, minSize: minSize, maxSize: minSize };
                    }
                    if (hasValidMaxSize) {
                        var maxSize = { width: maxSizeMaybe.width, height: maxSizeMaybe.height };
                        return { behavior: behavior, minSize: maxSize, maxSize: maxSize };
                    }
                }
                throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.InvalidSize, 'Invalid sheet size parameter');
            }
            default: {
                throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InternalError, "Unsupported sheet size behavior: " + behavior);
            }
        }
    };
    SheetImpl.parseDimensions = function (size) {
        var empty = { width: undefined, height: undefined };
        if (!size) {
            return empty;
        }
        var _a = Param_1.Param.tryParseNumber(size.width), widthParsed = _a.success, parsedWidth = _a.parsed;
        var _b = Param_1.Param.tryParseNumber(size.height), heightParsed = _b.success, parsedHeight = _b.parsed;
        if (widthParsed && heightParsed) {
            return { width: parsedWidth, height: parsedHeight };
        }
        if (widthParsed) {
            return { width: parsedWidth };
        }
        if (heightParsed) {
            return { height: parsedHeight };
        }
        return empty;
    };
    return SheetImpl;
}());
exports.SheetImpl = SheetImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var SheetInfoImpl = /** @class */ (function () {
    function SheetInfoImpl(_name, _sheetType, _sheetSize, _index, _isActive, _isHidden, _url) {
        this._name = _name;
        this._sheetType = _sheetType;
        this._sheetSize = _sheetSize;
        this._index = _index;
        this._isActive = _isActive;
        this._isHidden = _isHidden;
        this._url = _url;
    }
    Object.defineProperty(SheetInfoImpl.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "sheetSize", {
        get: function () {
            return this._sheetSize;
        },
        set: function (value) {
            this._sheetSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "sheetType", {
        get: function () {
            return this._sheetType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "sheetPath", {
        get: function () {
            return {
                sheetName: this.name,
                isDashboard: this.sheetType === api_external_contract_js_1.SheetType.Dashboard,
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "index", {
        get: function () {
            return this._index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "isActive", {
        get: function () {
            return this._isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "active", {
        set: function (active) {
            this._isActive = active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "isHidden", {
        get: function () {
            return this._isHidden;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SheetInfoImpl.prototype, "url", {
        get: function () {
            return this._url;
        },
        enumerable: true,
        configurable: true
    });
    return SheetInfoImpl;
}());
exports.SheetInfoImpl = SheetInfoImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/SingleEventManagerImpl.js":
/*!*************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/SingleEventManagerImpl.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * This class implements the SingleEventManager interface for a single type of Tableau event
 *
 * @template TEventType The Tableau event type this class specializes
 */
var SingleEventManagerImpl = /** @class */ (function () {
    function SingleEventManagerImpl(eventType) {
        this._eventType = eventType;
        this._handlers = [];
    }
    Object.defineProperty(SingleEventManagerImpl.prototype, "eventType", {
        get: function () {
            return this._eventType;
        },
        enumerable: true,
        configurable: true
    });
    SingleEventManagerImpl.prototype.addEventListener = function (handler) {
        var _this = this;
        this._handlers.push(handler);
        return function () { return _this.removeEventListener(handler); };
    };
    SingleEventManagerImpl.prototype.removeEventListener = function (handler) {
        var beforeCount = this._handlers.length;
        this._handlers = this._handlers.filter(function (h) { return h !== handler; });
        return beforeCount > this._handlers.length;
    };
    SingleEventManagerImpl.prototype.triggerEvent = function (eventGenerator) {
        for (var _i = 0, _a = this._handlers; _i < _a.length; _i++) {
            var handler = _a[_i];
            try {
                var eventModel = eventGenerator();
                handler(eventModel);
            }
            catch (e) {
                // Since this handler could be outside our control, just catch anything it throws and continue on
                continue;
            }
        }
    };
    return SingleEventManagerImpl;
}());
exports.SingleEventManagerImpl = SingleEventManagerImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/StoryImpl.js":
/*!************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/StoryImpl.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var ShortLivedDeferred_1 = __webpack_require__(/*! ../Utils/ShortLivedDeferred */ "../api-shared-js/lib/src/ApiShared/Utils/ShortLivedDeferred.js");
var SheetImpl_1 = __webpack_require__(/*! ./SheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js");
var StoryPointImpl_1 = __webpack_require__(/*! ./StoryPointImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointImpl.js");
var StoryPointInfoImpl_1 = __webpack_require__(/*! ./StoryPointInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointInfoImpl.js");
var StoryImpl = /** @class */ (function (_super) {
    __extends(StoryImpl, _super);
    function StoryImpl(_sheetInfoImpl, storyModel, _publishedSheetInfos, _registryId) {
        var _this = _super.call(this, _sheetInfoImpl, _registryId) || this;
        _this._sheetInfoImpl = _sheetInfoImpl;
        _this._publishedSheetInfos = _publishedSheetInfos;
        _this._registryId = _registryId;
        _this._storyPointInfoImpls = [];
        _this._deferred = new ShortLivedDeferred_1.ShortLivedDeferred();
        _this.initializeStory(storyModel);
        return _this;
    }
    StoryImpl.prototype.initializeStory = function (storyModel) {
        var _this = this;
        storyModel.storyPoints.forEach(function (storyPointModel) {
            var isActive = storyPointModel.index === storyModel.activeStoryPointIndex;
            var storyPointInfoImpl = new StoryPointInfoImpl_1.StoryPointInfoImpl(storyPointModel.caption, storyPointModel.index, storyPointModel.storyPointId, isActive, storyPointModel.updated, _this);
            _this._storyPointInfoImpls.push(storyPointInfoImpl);
            if (isActive) {
                _this._activeStoryPointImpl = new StoryPointImpl_1.StoryPointImpl(storyPointInfoImpl, _this._publishedSheetInfos, _this._registryId, storyPointModel.containedSheetInfo);
            }
        });
    };
    StoryImpl.prototype.updateStoryInfo = function (index, storyPointModel) {
        if (!this._storyPointInfoImpls) {
            return;
        }
        var storyInfoImpl = this._storyPointInfoImpls[index];
        if (storyInfoImpl.storyPointId !== storyPointModel.storyPointId) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.StoryPointIdMismatch, "We should not be updating a story point when the IDs don't match. Existing storyPointID=" + storyInfoImpl.storyPointId + ", newStoryPointID=" + storyPointModel.storyPointId);
        }
        storyInfoImpl.caption = storyPointModel.caption;
        storyInfoImpl.updated = storyPointModel.updated;
        if (this._activeStoryPointImpl.storyPointId === storyPointModel.storyPointId) {
            this._activeStoryPointImpl.updated = storyInfoImpl.updated;
        }
    };
    StoryImpl.prototype.updateStory = function (storyPointModel) {
        var _this = this;
        if (!this._storyPointInfoImpls) {
            return;
        }
        this._storyPointInfoImpls.forEach(function (storyPointInfoImpl) {
            var isActive = storyPointInfoImpl.storyPointId === storyPointModel.storyPointId;
            if (isActive) {
                // update the state
                storyPointInfoImpl.caption = storyPointModel.caption;
                storyPointInfoImpl.index = storyPointModel.index;
                storyPointInfoImpl.active = true;
                storyPointInfoImpl.updated = storyPointModel.updated;
                // re-initialize activeStoryPointImpl
                _this._activeStoryPointImpl = new StoryPointImpl_1.StoryPointImpl(storyPointInfoImpl, _this._publishedSheetInfos, _this._registryId, storyPointModel.containedSheetInfo);
            }
            else {
                // set old ones to false
                storyPointInfoImpl.active = false;
            }
        });
        if (this.activeStoryPoint) {
            this._deferred.resolve(this.activeStoryPoint);
        }
    };
    Object.defineProperty(StoryImpl.prototype, "activeStoryPoint", {
        get: function () {
            return this._activeStoryPointImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "storyPointsInfo", {
        get: function () {
            return this._storyPointInfoImpls;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "isActive", {
        get: function () {
            return this._sheetInfoImpl.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryImpl.prototype, "isHidden", {
        get: function () {
            return !!this._sheetInfoImpl.isHidden;
        },
        enumerable: true,
        configurable: true
    });
    StoryImpl.prototype.activateNextStoryPointAsync = function () {
        if (this._activeStoryPointImpl.index === this._storyPointInfoImpls.length - 1) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activateNextStoryPointAsync();
        return promise;
    };
    StoryImpl.prototype.activatePreviousStoryPointAsync = function () {
        if (this._activeStoryPointImpl.index === 0) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activatePreviousStoryPointAsync();
        return promise;
    };
    StoryImpl.prototype.activateStoryPointAsync = function (index) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(index, 'index');
        ErrorHelpers_1.ErrorHelpers.verifyParameterType(index, 'number', 'index');
        if (index < 0 || index >= this._storyPointInfoImpls.length) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'The index passed to this command is out of range.');
        }
        if (index === this._activeStoryPointImpl.index) {
            return Promise.resolve(this._activeStoryPointImpl);
        }
        var promise = this._deferred.getNewPromiseOrThrowIfBusy();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        service.activateStoryPointAsync(index);
        return promise;
    };
    StoryImpl.prototype.revertStoryPointAsync = function (index) {
        var _this = this;
        ErrorHelpers_1.ErrorHelpers.verifyParameter(index, 'index');
        ErrorHelpers_1.ErrorHelpers.verifyParameterType(index, 'number', 'index');
        if (index < 0 || index >= this._storyPointInfoImpls.length) {
            throw new TableauError_1.TableauError(Contract.EmbeddingErrorCodes.IndexOutOfRange, 'The index passed to this command is out of range.');
        }
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("story-activation-service" /* StoryActivation */);
        return service.revertStoryPointAsync(index).then(function (response) {
            _this.updateStoryInfo(response.index, response);
            var storyPointInfoImpl = new StoryPointInfoImpl_1.StoryPointInfoImpl(response.caption, response.index, response.storyPointId, false, response.updated, _this);
            return storyPointInfoImpl;
        });
    };
    StoryImpl.prototype.clearPendingPromises = function () {
        if (this._deferred) {
            this._deferred.reject('All pending promises cleared');
        }
    };
    return StoryImpl;
}(SheetImpl_1.SheetImpl));
exports.StoryImpl = StoryImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointImpl.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/StoryPointImpl.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var SheetUtils_1 = __webpack_require__(/*! ../Utils/SheetUtils */ "../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js");
var DashboardImpl_1 = __webpack_require__(/*! ./DashboardImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DashboardImpl.js");
var SheetInfoImpl_1 = __webpack_require__(/*! ./SheetInfoImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetInfoImpl.js");
var WorksheetImpl_1 = __webpack_require__(/*! ./WorksheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js");
var StoryPointImpl = /** @class */ (function () {
    function StoryPointImpl(_storyPointInfoImpl, sheetInfos, registryId, containedSheetInfo) {
        this._storyPointInfoImpl = _storyPointInfoImpl;
        if (containedSheetInfo) {
            this._containedSheetImpl = this.createContainedSheet(containedSheetInfo, sheetInfos, registryId);
        }
    }
    Object.defineProperty(StoryPointImpl.prototype, "index", {
        get: function () {
            return this._storyPointInfoImpl.index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "caption", {
        get: function () {
            return this._storyPointInfoImpl.caption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "active", {
        get: function () {
            return this._storyPointInfoImpl.active;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "updated", {
        get: function () {
            return this._storyPointInfoImpl.updated;
        },
        set: function (updated) {
            this._storyPointInfoImpl.updated = updated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "parentStory", {
        get: function () {
            return this._storyPointInfoImpl.parentStory;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "containedSheet", {
        get: function () {
            return this._containedSheetImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointImpl.prototype, "storyPointId", {
        get: function () {
            return this._storyPointInfoImpl.storyPointId;
        },
        enumerable: true,
        configurable: true
    });
    StoryPointImpl.prototype.createContainedSheet = function (containedSheetInfo, sheetInfos, registryId) {
        var containedSheetIdx = -1;
        var publishedSheetInfo = SheetUtils_1.SheetUtils.getPublishedSheetInfoByName(containedSheetInfo.name, sheetInfos);
        var containedSheetSize = SheetUtils_1.SheetUtils.createAutomaticSize();
        var isContainedSheetHidden = publishedSheetInfo === undefined;
        var containedSheetUrl = publishedSheetInfo ? publishedSheetInfo.url : '';
        // Contained sheets aren't active - the containing sheet is active.
        var containedSheetActive = false;
        var containedSheetInfoImpl = new SheetInfoImpl_1.SheetInfoImpl(containedSheetInfo.name, SheetUtils_1.SheetUtils.getSheetTypeEnum(containedSheetInfo.sheetType), containedSheetSize, containedSheetIdx, containedSheetActive, isContainedSheetHidden, containedSheetUrl);
        var sheetImpl;
        switch (containedSheetInfoImpl.sheetType) {
            case Contract.SheetType.Worksheet: {
                var vizId = {
                    worksheet: containedSheetInfoImpl.name,
                };
                sheetImpl = new WorksheetImpl_1.WorksheetImpl(containedSheetInfoImpl, registryId, vizId, null, this);
                break;
            }
            case Contract.SheetType.Dashboard: {
                var sheetPath = {
                    sheetName: containedSheetInfoImpl.name,
                    isDashboard: true,
                };
                sheetImpl = new DashboardImpl_1.DashboardImpl(containedSheetInfoImpl, containedSheetInfo.dashboardZones, sheetPath, registryId, this);
                break;
            }
            default: {
                throw new TableauError_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');
            }
        }
        return sheetImpl;
    };
    return StoryPointImpl;
}());
exports.StoryPointImpl = StoryPointImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/StoryPointInfoImpl.js":
/*!*********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/StoryPointInfoImpl.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var StoryPointInfoImpl = /** @class */ (function () {
    function StoryPointInfoImpl(_caption, _index, _storyPointId, _active, _updated, _parentStoryImpl) {
        this._caption = _caption;
        this._index = _index;
        this._storyPointId = _storyPointId;
        this._active = _active;
        this._updated = _updated;
        this._parentStoryImpl = _parentStoryImpl;
    }
    Object.defineProperty(StoryPointInfoImpl.prototype, "caption", {
        get: function () {
            return this._caption;
        },
        set: function (caption) {
            this._caption = caption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "index", {
        get: function () {
            return this._index;
        },
        set: function (index) {
            this._index = index;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "storyPointId", {
        get: function () {
            return this._storyPointId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "active", {
        get: function () {
            return this._active;
        },
        set: function (isActive) {
            this._active = isActive;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "updated", {
        get: function () {
            return this._updated;
        },
        set: function (isUpdated) {
            this._updated = isUpdated;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StoryPointInfoImpl.prototype, "parentStory", {
        get: function () {
            return this._parentStoryImpl;
        },
        enumerable: true,
        configurable: true
    });
    return StoryPointInfoImpl;
}());
exports.StoryPointInfoImpl = StoryPointInfoImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/WorkbookImpl.js":
/*!***************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/WorkbookImpl.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var WorkbookImpl = /** @class */ (function () {
    function WorkbookImpl() {
    }
    return WorkbookImpl;
}());
exports.WorkbookImpl = WorkbookImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Impl/WorksheetImpl.js ***!
  \****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var DataSource_1 = __webpack_require__(/*! ../DataSource */ "../api-shared-js/lib/src/ApiShared/DataSource.js");
var LogicalTable_1 = __webpack_require__(/*! ../LogicalTable */ "../api-shared-js/lib/src/ApiShared/LogicalTable.js");
var GetDataService_1 = __webpack_require__(/*! ../Services/GetDataService */ "../api-shared-js/lib/src/ApiShared/Services/GetDataService.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var DataSourceImpl_1 = __webpack_require__(/*! ./DataSourceImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js");
var SheetImpl_1 = __webpack_require__(/*! ./SheetImpl */ "../api-shared-js/lib/src/ApiShared/Impl/SheetImpl.js");
var WorksheetImpl = /** @class */ (function (_super) {
    __extends(WorksheetImpl, _super);
    function WorksheetImpl(sheetInfoImpl, _registryId, _visualId, _parentDashboardImpl, _parentStoryPointImpl) {
        var _this = _super.call(this, sheetInfoImpl, _registryId) || this;
        _this._visualId = _visualId;
        _this._parentDashboardImpl = _parentDashboardImpl;
        _this._parentStoryPointImpl = _parentStoryPointImpl;
        return _this;
    }
    Object.defineProperty(WorksheetImpl.prototype, "parentDashboard", {
        get: function () {
            return this._parentDashboardImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetImpl.prototype, "parentStoryPoint", {
        get: function () {
            return this._parentStoryPointImpl;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(WorksheetImpl.prototype, "visualId", {
        get: function () {
            return this._visualId;
        },
        enumerable: true,
        configurable: true
    });
    WorksheetImpl.prototype.getMaxPageRowLimit = function () {
        return 10000;
    };
    WorksheetImpl.prototype.applyFilterAsync = function (fieldName, values, updateType, options) {
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(updateType, Contract.FilterUpdateType, 'Contract.FilterUpdateType');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyFilterAsync(this.visualId, fieldName, values, updateType, options);
    };
    WorksheetImpl.prototype.applyRangeFilterAsync = function (fieldName, filterOptions) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(fieldName, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyParameter(filterOptions, 'filterOptions');
        if (filterOptions.nullOption) {
            ErrorHelpers_1.ErrorHelpers.verifyEnumValue(filterOptions.nullOption, api_external_contract_js_1.FilterNullOption, 'FilterNullOption');
        }
        else {
            ErrorHelpers_1.ErrorHelpers.verifyRangeParamType(filterOptions.min, filterOptions.max);
        }
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyRangeFilterAsync(this.visualId, fieldName, filterOptions);
    };
    WorksheetImpl.prototype.applyHierarchicalFilterAsync = function (fieldName, values, updateType, options) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(fieldName, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyParameter(values, 'values');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(updateType, Contract.FilterUpdateType, 'Contract.FilterUpdateType');
        if (!Array.isArray(values) && !values.levels) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'values parameter for applyHierarchicalFilterAsync must be an array or contain a levels key');
        }
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyHierarchicalFilterAsync(this.visualId, fieldName, values, updateType, options);
    };
    WorksheetImpl.prototype.clearFilterAsync = function (fieldName) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(fieldName, 'fieldName');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.clearFilterAsync(this.visualId, fieldName);
    };
    WorksheetImpl.prototype.applyRelativeDateFilterAsync = function (fieldName, options) {
        ErrorHelpers_1.ErrorHelpers.verifyStringParameter(fieldName, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyParameter(options, 'options');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(options.periodType, api_external_contract_js_1.PeriodType, 'PeriodType');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(options.rangeType, api_external_contract_js_1.DateRangeType, 'DateRangeType');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.applyRelativeDateFilterAsync(this.visualId, fieldName, options);
    };
    WorksheetImpl.prototype.getDataSourcesAsync = function () {
        var _this = this;
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return service.getDataSourcesAsync(this.visualId).then(function (result) {
            var dataSchema = result;
            var worksheetDataSourceInfo = dataSchema.worksheetDataSchemaMap[_this.name];
            var dataSources = [];
            // First, add the primary datasource.  By convention, it comes first in the returned array.
            var primaryId = worksheetDataSourceInfo.primaryDataSource;
            dataSources.push(_this.createDataSourceFromInfo(dataSchema.dataSources[primaryId]));
            // Then, loop through any secondary data sources and add them.
            for (var _i = 0, _a = worksheetDataSourceInfo.referencedDataSourceList; _i < _a.length; _i++) {
                var secondaryId = _a[_i];
                if (secondaryId !== primaryId) {
                    dataSources.push(_this.createDataSourceFromInfo(dataSchema.dataSources[secondaryId]));
                }
            }
            return dataSources;
        });
    };
    WorksheetImpl.prototype.getFiltersAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getFiltersAsync(this.visualId);
    };
    WorksheetImpl.prototype.getSelectedMarksAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getSelectedMarksAsync(this.visualId);
    };
    WorksheetImpl.prototype.getHighlightedMarksAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getHighlightedMarksAsync(this.visualId);
    };
    WorksheetImpl.prototype.getSummaryDataAsync = function (options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getUnderlyingDataAsync(this.visualId, GetDataService_1.GetDataType.Summary, !!options.ignoreAliases, !!options.ignoreSelection, true, options.columnsToIncludeById || [], options.maxRows || 0, options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.getSummaryDataReaderAsync = function (pageRowCount, options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getSummaryDataReaderAsync(this.visualId, pageRowCount || this.getMaxPageRowLimit(), !!options.ignoreAliases, !!options.ignoreSelection, true, // includeAllColumns (can be overridden by columnsToIncludeById)
        options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.getSummaryColumnsInfoAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getSummaryColumnsInfoAsync(this.visualId);
    };
    WorksheetImpl.prototype.getUnderlyingDataAsync = function (options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getUnderlyingDataAsync(this.visualId, GetDataService_1.GetDataType.Underlying, !!options.ignoreAliases, !!options.ignoreSelection, !!options.includeAllColumns, options.columnsToIncludeById || [], options.maxRows || 0, options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.getUnderlyingTablesAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return service.getUnderlyingTablesAsync(this.visualId).then(function (logicalTableInfos) {
            return logicalTableInfos.map(function (logicalTableInfo) { return new LogicalTable_1.LogicalTable(logicalTableInfo); });
        });
    };
    WorksheetImpl.prototype.getUnderlyingTableDataAsync = function (logicalTableId, options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getUnderlyingTableDataAsync(this.visualId, logicalTableId, !!options.ignoreAliases, !!options.ignoreSelection, !!options.includeAllColumns, options.columnsToIncludeById || [], options.maxRows || 0, options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.getUnderlyingTableDataReaderAsync = function (logicalTableId, pageRowCount, options) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        options = options || {};
        return service.getUnderlyingTableDataReaderAsync(this.visualId, logicalTableId, pageRowCount || this.getMaxPageRowLimit(), !!options.ignoreAliases, !!options.ignoreSelection, !!options.includeAllColumns, options.columnsToIncludeById || [], options.includeDataValuesOption || api_external_contract_js_1.IncludeDataValuesOption.AllValues);
    };
    WorksheetImpl.prototype.clearSelectedMarksAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("selection-service" /* Selection */);
        return service.clearSelectedMarksAsync(this.visualId);
    };
    WorksheetImpl.prototype.selectMarksByValueAsync = function (selections, selectionUpdateType) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(selections, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(selectionUpdateType, api_external_contract_js_1.SelectionUpdateType, 'SelectionUpdateType');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("selection-service" /* Selection */);
        return service.selectMarksByValueAsync(this.visualId, selections, selectionUpdateType);
    };
    WorksheetImpl.prototype.selectMarksByIdAsync = function (selections, selectionUpdateType) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(selections, 'fieldName');
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(selectionUpdateType, api_external_contract_js_1.SelectionUpdateType, 'SelectionUpdateType');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("selection-service" /* Selection */);
        return service.selectMarksByIdAsync(this.visualId, selections, selectionUpdateType);
    };
    WorksheetImpl.prototype.annotateMarkAsync = function (mark, annotationText) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(mark, 'mark');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("annotation-service" /* Annotation */);
        return service.annotateMarkAsync(this.visualId, mark, annotationText);
    };
    WorksheetImpl.prototype.getAnnotationsAsync = function () {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("annotation-service" /* Annotation */);
        return service.getAnnotationsAsync(this.visualId);
    };
    WorksheetImpl.prototype.removeAnnotationAsync = function (annotation) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(annotation, 'annotation');
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("annotation-service" /* Annotation */);
        return service.removeAnnotationAsync(this.visualId, annotation);
    };
    WorksheetImpl.prototype.appendContextMenuAsync = function (targetMenu, config) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("external-context-menu-service" /* ExternalContextMenu */);
        return service.appendContextMenuAsync(this.visualId.worksheet, targetMenu, config);
    };
    WorksheetImpl.prototype.removeContextMenuAsync = function (targetMenu, menuItemId) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("external-context-menu-service" /* ExternalContextMenu */);
        return service.removeContextMenuAsync(this.visualId.worksheet, targetMenu, menuItemId);
    };
    WorksheetImpl.prototype.executeContextMenuAsync = function (targetMenu, menuItemId) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("external-context-menu-service" /* ExternalContextMenu */);
        return service.executeContextMenuAsync(this.visualId.worksheet, targetMenu, menuItemId);
    };
    WorksheetImpl.prototype.renameContextMenuAsync = function (targetMenu, menuHeader, menuDescription) {
        this.verifyActiveSheet();
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("external-context-menu-service" /* ExternalContextMenu */);
        return service.renameContextMenuAsync(this.visualId.worksheet, targetMenu, menuHeader, menuDescription);
    };
    WorksheetImpl.prototype.createDataSourceFromInfo = function (dataSourceInfo) {
        var dataSourceImpl = new DataSourceImpl_1.DataSourceImpl(dataSourceInfo, this._registryId);
        var dataSource = new DataSource_1.DataSource(dataSourceImpl);
        dataSourceImpl.initializeWithPublicInterfaces(dataSource);
        return dataSource;
    };
    WorksheetImpl.prototype.verifyActiveSheet = function () {
        var isRootAndActiveWorksheet = this.active;
        var isInsideActiveDashboard = this.isInsideActiveDashboard();
        var isInsideActiveStoryPoint = this.isInsideActiveStoryPoint();
        if (!isRootAndActiveWorksheet && !isInsideActiveDashboard && !isInsideActiveStoryPoint) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.NotActiveSheet, 'Operation not allowed on non-active sheet');
        }
    };
    WorksheetImpl.prototype.isInsideActiveStoryPoint = function () {
        return this._parentStoryPointImpl && this._parentStoryPointImpl.active;
    };
    WorksheetImpl.prototype.isInsideActiveDashboard = function () {
        return this._parentDashboardImpl && this._parentDashboardImpl.active;
    };
    return WorksheetImpl;
}(SheetImpl_1.SheetImpl));
exports.WorksheetImpl = WorksheetImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/LogicalTable.js":
/*!**********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/LogicalTable.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of a logical table.
 * This does not follow the Impl pattern as it is just a property bag.
 */
var LogicalTable = /** @class */ (function () {
    function LogicalTable(_logicalTable) {
        this._logicalTable = _logicalTable;
    }
    Object.defineProperty(LogicalTable.prototype, "id", {
        get: function () {
            return this._logicalTable.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LogicalTable.prototype, "caption", {
        get: function () {
            return this._logicalTable.caption;
        },
        enumerable: true,
        configurable: true
    });
    return LogicalTable;
}());
exports.LogicalTable = LogicalTable;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/FilterModels.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/FilterModels.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Filter = /** @class */ (function () {
    function Filter(_worksheetName, _fieldName, _filterType, _fieldId, _registryId) {
        this._worksheetName = _worksheetName;
        this._fieldName = _fieldName;
        this._filterType = _filterType;
        this._fieldId = _fieldId;
        this._registryId = _registryId;
    }
    Object.defineProperty(Filter.prototype, "worksheetName", {
        get: function () {
            return this._worksheetName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "fieldName", {
        get: function () {
            return this._fieldName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "fieldId", {
        get: function () {
            return this._fieldId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter.prototype, "filterType", {
        get: function () {
            return this._filterType;
        },
        enumerable: true,
        configurable: true
    });
    Filter.prototype.getFieldAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("data-source-service" /* DataSourceService */);
        return service.getFieldAsync(this._fieldId);
    };
    Filter.prototype.getAppliedWorksheetsAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getAppliedWorksheetsAsync(this._worksheetName, this._fieldId);
    };
    Filter.prototype.setAppliedWorksheetsAsync = function (applyToWorksheets) {
        ErrorHelpers_1.ErrorHelpers.verifyParameter(applyToWorksheets, 'applyToWorksheets');
        var uniqueWorksheets = new Set(applyToWorksheets);
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.setAppliedWorksheetsAsync(this._worksheetName, this._fieldName, this._fieldId, Array.from(uniqueWorksheets));
    };
    return Filter;
}());
exports.Filter = Filter;
var CategoricalFilter = /** @class */ (function (_super) {
    __extends(CategoricalFilter, _super);
    function CategoricalFilter(worksheetName, fieldName, fieldId, filterType, registryId, _appliedValues, _isExcludeMode, _isAllSelected) {
        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId, registryId) || this;
        _this._appliedValues = _appliedValues;
        _this._isExcludeMode = _isExcludeMode;
        _this._isAllSelected = _isAllSelected;
        return _this;
    }
    Object.defineProperty(CategoricalFilter.prototype, "isAllSelected", {
        get: function () {
            return this._isAllSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoricalFilter.prototype, "appliedValues", {
        get: function () {
            return this._appliedValues;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoricalFilter.prototype, "isExcludeMode", {
        get: function () {
            return this._isExcludeMode;
        },
        enumerable: true,
        configurable: true
    });
    CategoricalFilter.prototype.getDomainAsync = function (domainType) {
        if (!domainType) {
            domainType = api_external_contract_js_1.FilterDomainType.Relevant;
        }
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(domainType, api_external_contract_js_1.FilterDomainType, 'FilterDomainType');
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        return service.getCategoricalDomainAsync(this._worksheetName, this._fieldId, domainType);
    };
    return CategoricalFilter;
}(Filter));
exports.CategoricalFilter = CategoricalFilter;
var HierarchicalDataValue = /** @class */ (function () {
    function HierarchicalDataValue(_value, _hierarchicalPath, _level) {
        this._value = _value;
        this._hierarchicalPath = _hierarchicalPath;
        this._level = _level;
    }
    Object.defineProperty(HierarchicalDataValue.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalDataValue.prototype, "hierarchicalPath", {
        get: function () {
            return this._hierarchicalPath;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalDataValue.prototype, "level", {
        get: function () {
            return this._level;
        },
        enumerable: true,
        configurable: true
    });
    return HierarchicalDataValue;
}());
exports.HierarchicalDataValue = HierarchicalDataValue;
var HierarchicalLevelDetail = /** @class */ (function () {
    function HierarchicalLevelDetail(_name, _levelSelectionState) {
        this._name = _name;
        this._levelSelectionState = _levelSelectionState;
    }
    Object.defineProperty(HierarchicalLevelDetail.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalLevelDetail.prototype, "levelSelectionState", {
        get: function () {
            return this._levelSelectionState;
        },
        enumerable: true,
        configurable: true
    });
    return HierarchicalLevelDetail;
}());
exports.HierarchicalLevelDetail = HierarchicalLevelDetail;
var HierarchicalFilter = /** @class */ (function (_super) {
    __extends(HierarchicalFilter, _super);
    function HierarchicalFilter(worksheetName, fieldName, fieldId, filterType, registryId, _dimensionName, _hierarchyCaption, _numberOfLevels, _levelDetails, _appliedValues, _isAllSelected) {
        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId, registryId) || this;
        _this._dimensionName = _dimensionName;
        _this._hierarchyCaption = _hierarchyCaption;
        _this._numberOfLevels = _numberOfLevels;
        _this._levelDetails = _levelDetails;
        _this._appliedValues = _appliedValues;
        _this._isAllSelected = _isAllSelected;
        return _this;
    }
    HierarchicalFilter.prototype.getDomainAsync = function (domainType) {
        throw new Error('Method not implemented.');
    };
    Object.defineProperty(HierarchicalFilter.prototype, "dimensionName", {
        get: function () {
            return this._dimensionName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "hierarchyCaption", {
        get: function () {
            return this._hierarchyCaption;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "numberOfLevels", {
        get: function () {
            return this._numberOfLevels;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "levelDetails", {
        get: function () {
            return this._levelDetails;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "isAllSelected", {
        get: function () {
            return this._isAllSelected;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HierarchicalFilter.prototype, "appliedValues", {
        get: function () {
            return this._appliedValues;
        },
        enumerable: true,
        configurable: true
    });
    return HierarchicalFilter;
}(Filter));
exports.HierarchicalFilter = HierarchicalFilter;
var RangeFilter = /** @class */ (function (_super) {
    __extends(RangeFilter, _super);
    function RangeFilter(worksheetName, fieldName, fieldId, filterType, registryId, _min, _max, _includeNullValues) {
        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId, registryId) || this;
        _this._min = _min;
        _this._max = _max;
        _this._includeNullValues = _includeNullValues;
        return _this;
    }
    Object.defineProperty(RangeFilter.prototype, "minValue", {
        get: function () {
            return this._min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeFilter.prototype, "maxValue", {
        get: function () {
            return this._max;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeFilter.prototype, "includeNullValues", {
        get: function () {
            return this._includeNullValues;
        },
        enumerable: true,
        configurable: true
    });
    RangeFilter.prototype.getDomainAsync = function (domainType) {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("filter-service" /* Filter */);
        if (!domainType) {
            domainType = api_external_contract_js_1.FilterDomainType.Relevant;
        }
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(domainType, api_external_contract_js_1.FilterDomainType, 'FilterDomainType');
        return service.getRangeDomainAsync(this._worksheetName, this._fieldId, domainType);
    };
    return RangeFilter;
}(Filter));
exports.RangeFilter = RangeFilter;
var RelativeDateFilter = /** @class */ (function (_super) {
    __extends(RelativeDateFilter, _super);
    function RelativeDateFilter(worksheetName, fieldName, fieldId, filterType, registryId, _anchorDate, _periodType, _rangeType, _rangeN) {
        var _this = _super.call(this, worksheetName, fieldName, filterType, fieldId, registryId) || this;
        _this._anchorDate = _anchorDate;
        _this._periodType = _periodType;
        _this._rangeType = _rangeType;
        _this._rangeN = _rangeN;
        return _this;
    }
    Object.defineProperty(RelativeDateFilter.prototype, "anchorDate", {
        get: function () {
            return this._anchorDate;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RelativeDateFilter.prototype, "periodType", {
        get: function () {
            return this._periodType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RelativeDateFilter.prototype, "rangeType", {
        get: function () {
            return this._rangeType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RelativeDateFilter.prototype, "rangeN", {
        get: function () {
            return this._rangeN;
        },
        enumerable: true,
        configurable: true
    });
    return RelativeDateFilter;
}(Filter));
exports.RelativeDateFilter = RelativeDateFilter;
var CategoricalDomain = /** @class */ (function () {
    function CategoricalDomain(_values, _domainType) {
        this._values = _values;
        this._domainType = _domainType;
    }
    Object.defineProperty(CategoricalDomain.prototype, "values", {
        get: function () {
            return this._values;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CategoricalDomain.prototype, "type", {
        get: function () {
            return this._domainType;
        },
        enumerable: true,
        configurable: true
    });
    return CategoricalDomain;
}());
exports.CategoricalDomain = CategoricalDomain;
var RangeDomain = /** @class */ (function () {
    function RangeDomain(_min, _max, _domainType) {
        this._min = _min;
        this._max = _max;
        this._domainType = _domainType;
    }
    Object.defineProperty(RangeDomain.prototype, "type", {
        get: function () {
            return this._domainType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeDomain.prototype, "min", {
        get: function () {
            return this._min;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RangeDomain.prototype, "max", {
        get: function () {
            return this._max;
        },
        enumerable: true,
        configurable: true
    });
    return RangeDomain;
}());
exports.RangeDomain = RangeDomain;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/GetDataModels.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/GetDataModels.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var DataTable = /** @class */ (function () {
    function DataTable(_data, _columns, _totalRowCount, _isTotalRowCountLimited, _isSummaryData, _marksInfo) {
        this._data = _data;
        this._columns = _columns;
        this._totalRowCount = _totalRowCount;
        this._isTotalRowCountLimited = _isTotalRowCountLimited;
        this._isSummaryData = _isSummaryData;
        this._marksInfo = _marksInfo;
        this._name = _isSummaryData ? 'Summary Data Table' : 'Underlying Data Table';
    }
    Object.defineProperty(DataTable.prototype, "name", {
        get: function () {
            return this._name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "data", {
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "columns", {
        get: function () {
            return this._columns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "marksInfo", {
        get: function () {
            return this._marksInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "totalRowCount", {
        get: function () {
            return this._totalRowCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "isTotalRowCountLimited", {
        get: function () {
            return this._isTotalRowCountLimited;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTable.prototype, "isSummaryData", {
        get: function () {
            return this._isSummaryData;
        },
        enumerable: true,
        configurable: true
    });
    return DataTable;
}());
exports.DataTable = DataTable;
var MarkInfo = /** @class */ (function () {
    function MarkInfo(_type, _color, _tupleId) {
        this._type = _type;
        this._color = _color;
        this._tupleId = _tupleId;
    }
    Object.defineProperty(MarkInfo.prototype, "type", {
        get: function () {
            return this._type;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkInfo.prototype, "color", {
        get: function () {
            return this._color;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MarkInfo.prototype, "tupleId", {
        get: function () {
            return this._tupleId;
        },
        enumerable: true,
        configurable: true
    });
    return MarkInfo;
}());
exports.MarkInfo = MarkInfo;
var Column = /** @class */ (function () {
    function Column(_fieldName, _fieldId, _dataType, _isReferenced, _index) {
        this._fieldName = _fieldName;
        this._fieldId = _fieldId;
        this._dataType = _dataType;
        this._isReferenced = _isReferenced;
        this._index = _index;
    }
    Object.defineProperty(Column.prototype, "fieldName", {
        get: function () {
            return this._fieldName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "fieldId", {
        get: function () {
            return this._fieldId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "dataType", {
        get: function () {
            return this._dataType;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "isReferenced", {
        get: function () {
            return this._isReferenced;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Column.prototype, "index", {
        get: function () {
            return this._index;
        },
        enumerable: true,
        configurable: true
    });
    return Column;
}());
exports.Column = Column;
var DataValue = /** @class */ (function () {
    /* tslint:disable:no-any */
    function DataValue(_value, _nativeValue, _formattedValue) {
        this._value = _value;
        this._nativeValue = _nativeValue;
        this._formattedValue = _formattedValue;
    }
    Object.defineProperty(DataValue.prototype, "value", {
        get: function () {
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataValue.prototype, "nativeValue", {
        get: function () {
            return this._nativeValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataValue.prototype, "formattedValue", {
        get: function () {
            return this._formattedValue;
        },
        enumerable: true,
        configurable: true
    });
    return DataValue;
}());
exports.DataValue = DataValue;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/GetDataTableReaderModels.js":
/*!*****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/GetDataTableReaderModels.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var ServiceRegistry_1 = __webpack_require__(/*! ../Services/ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var DataTableReader = /** @class */ (function () {
    function DataTableReader(_id, _totalRowCount, _pageRowCount, _registryId) {
        this._id = _id;
        this._totalRowCount = _totalRowCount;
        this._pageRowCount = _pageRowCount;
        this._registryId = _registryId;
        this._pageCount = Math.ceil(_totalRowCount / _pageRowCount);
    }
    Object.defineProperty(DataTableReader.prototype, "totalRowCount", {
        get: function () {
            return this._totalRowCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DataTableReader.prototype, "pageCount", {
        get: function () {
            return this._pageCount;
        },
        enumerable: true,
        configurable: true
    });
    DataTableReader.prototype.getPageAsync = function (pageNumber) {
        ErrorHelpers_1.ErrorHelpers.verifyRange(pageNumber, 0, this._pageCount);
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.getPageAsync(this._id, pageNumber, this._pageRowCount);
    };
    DataTableReader.prototype.getAllPagesAsync = function (maxRows) {
        return __awaiter(this, void 0, void 0, function () {
            var firstPage, rowsRequested, pagesRequested, pagesToFetch, isDataLimited, remainingData, i, page, fullData;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getPageAsync(0)];
                    case 1:
                        firstPage = _b.sent();
                        maxRows = maxRows || this.totalRowCount;
                        rowsRequested = Math.min(maxRows, this.totalRowCount);
                        pagesRequested = Math.ceil(rowsRequested / this._pageRowCount);
                        pagesToFetch = Math.min(pagesRequested, 400);
                        isDataLimited = pagesToFetch < pagesRequested;
                        remainingData = [];
                        i = 1;
                        _b.label = 2;
                    case 2:
                        if (!(i < pagesToFetch)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getPageAsync(i)];
                    case 3:
                        page = _b.sent();
                        remainingData.push(page.data);
                        _b.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 2];
                    case 5:
                        fullData = (_a = firstPage.data).concat.apply(_a, remainingData);
                        // This slices the array only if maxRows has been set and is less than totalRowCount
                        fullData.length = rowsRequested;
                        return [2 /*return*/, {
                                name: firstPage.name,
                                data: fullData,
                                columns: firstPage.columns,
                                totalRowCount: isDataLimited ? pagesToFetch * this._pageRowCount : rowsRequested,
                                isTotalRowCountLimited: isDataLimited,
                                isSummaryData: firstPage.isSummaryData,
                            }];
                }
            });
        });
    };
    DataTableReader.prototype.releaseAsync = function () {
        var service = ServiceRegistry_1.ApiServiceRegistry.get(this._registryId).getService("get-data-service" /* GetData */);
        return service.releaseAsync(this._id);
    };
    return DataTableReader;
}());
exports.DataTableReader = DataTableReader;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Models/SelectionModels.js":
/*!********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Models/SelectionModels.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, exports) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Selection Model.
 */
var SelectionModel = /** @class */ (function () {
    function SelectionModel() {
    }
    return SelectionModel;
}());
exports.SelectionModel = SelectionModel;
/**
 * Value based selection model. Meant for hierarchical, range and categorical selections.
 */
var ValueSelectionModel = /** @class */ (function (_super) {
    __extends(ValueSelectionModel, _super);
    function ValueSelectionModel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectValues = [];
        return _this;
    }
    return ValueSelectionModel;
}(SelectionModel));
exports.ValueSelectionModel = ValueSelectionModel;
/**
 * Hierarchical value selection model
 */
var HierarchicalSelectionModel = /** @class */ (function (_super) {
    __extends(HierarchicalSelectionModel, _super);
    function HierarchicalSelectionModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return HierarchicalSelectionModel;
}(ValueSelectionModel));
exports.HierarchicalSelectionModel = HierarchicalSelectionModel;
/**
 * Range based value selection model
 */
var RangeSelectionModel = /** @class */ (function (_super) {
    __extends(RangeSelectionModel, _super);
    function RangeSelectionModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return RangeSelectionModel;
}(SelectionModel));
exports.RangeSelectionModel = RangeSelectionModel;
/**
 * Dimension value selection model
 */
var DimensionSelectionModel = /** @class */ (function (_super) {
    __extends(DimensionSelectionModel, _super);
    function DimensionSelectionModel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return DimensionSelectionModel;
}(ValueSelectionModel));
exports.DimensionSelectionModel = DimensionSelectionModel;
/**
 * Tuple based selection model
 */
var TupleSelectionModel = /** @class */ (function () {
    function TupleSelectionModel() {
        this.objectIds = [];
    }
    return TupleSelectionModel;
}());
exports.TupleSelectionModel = TupleSelectionModel;
/**
 * Container class to populate all the selection models when parsing input
 */
var SelectionModelsContainer = /** @class */ (function () {
    function SelectionModelsContainer() {
        this.hierModelArr = [];
        this.dimModelArr = [];
        this.quantModelArr = [];
    }
    return SelectionModelsContainer;
}());
exports.SelectionModelsContainer = SelectionModelsContainer;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Point.js":
/*!***************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Point.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Point = /** @class */ (function () {
    function Point(_x, _y) {
        this._x = _x;
        this._y = _y;
    }
    Object.defineProperty(Point.prototype, "x", {
        get: function () {
            return this._x;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Point.prototype, "y", {
        get: function () {
            return this._y;
        },
        enumerable: true,
        configurable: true
    });
    return Point;
}());
exports.Point = Point;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/GetDataService.js":
/*!*********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/GetDataService.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Defines which type of getData call to make.
 */
var GetDataType;
(function (GetDataType) {
    GetDataType["Summary"] = "summary";
    GetDataType["Underlying"] = "underlying";
})(GetDataType = exports.GetDataType || (exports.GetDataType = {}));


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/RegisterAllSharedServices.js":
/*!********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/RegisterAllSharedServices.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var AnimationServiceImpl_1 = __webpack_require__(/*! ./impl/AnimationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/AnimationServiceImpl.js");
var AnnotationServiceImpl_1 = __webpack_require__(/*! ./impl/AnnotationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/AnnotationServiceImpl.js");
var DataSourceServiceImpl_1 = __webpack_require__(/*! ./impl/DataSourceServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/DataSourceServiceImpl.js");
var ExportServiceImpl_1 = __webpack_require__(/*! ./impl/ExportServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ExportServiceImpl.js");
var ExternalContextMenuServiceImpl_1 = __webpack_require__(/*! ./impl/ExternalContextMenuServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ExternalContextMenuServiceImpl.js");
var FilterServiceImpl_1 = __webpack_require__(/*! ./impl/FilterServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/FilterServiceImpl.js");
var GetDataServiceImpl_1 = __webpack_require__(/*! ./impl/GetDataServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/GetDataServiceImpl.js");
var NotificationServiceImpl_1 = __webpack_require__(/*! ./impl/NotificationServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImpl.js");
var ParametersServiceImpl_1 = __webpack_require__(/*! ./impl/ParametersServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ParametersServiceImpl.js");
var SelectionServiceImpl_1 = __webpack_require__(/*! ./impl/SelectionServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/SelectionServiceImpl.js");
var SizeServiceImpl_1 = __webpack_require__(/*! ./impl/SizeServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/SizeServiceImpl.js");
var VizServiceImpl_1 = __webpack_require__(/*! ./impl/VizServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/VizServiceImpl.js");
var ZoneServiceImpl_1 = __webpack_require__(/*! ./impl/ZoneServiceImpl */ "../api-shared-js/lib/src/ApiShared/Services/impl/ZoneServiceImpl.js");
var ServiceRegistry_1 = __webpack_require__(/*! ./ServiceRegistry */ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js");
function registerAllSharedServices(dispatcher, registryId, platformVersion) {
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new AnimationServiceImpl_1.AnimationServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new DataSourceServiceImpl_1.DataSourceServiceImpl(dispatcher, registryId, platformVersion));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new ExportServiceImpl_1.ExportServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new GetDataServiceImpl_1.GetDataServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new FilterServiceImpl_1.FilterServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new NotificationServiceImpl_1.NotificationServiceImpl(dispatcher));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new ParametersServiceImpl_1.ParametersServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new SelectionServiceImpl_1.SelectionServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new AnnotationServiceImpl_1.AnnotationServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new ZoneServiceImpl_1.ZoneServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new SizeServiceImpl_1.SizeServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new VizServiceImpl_1.VizServiceImpl(dispatcher, registryId));
    ServiceRegistry_1.ApiServiceRegistry.get(registryId).registerService(new ExternalContextMenuServiceImpl_1.ExternalContextMenuServiceImpl(dispatcher, registryId));
}
exports.registerAllSharedServices = registerAllSharedServices;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js":
/*!**********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/ServiceRegistry.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
window.__tableauApiServiceRegistry = window.__tableauApiServiceRegistry || {};
var ServiceRegistryImpl = /** @class */ (function () {
    function ServiceRegistryImpl() {
        this._services = {};
    }
    ServiceRegistryImpl.prototype.registerService = function (service) {
        this._services[service.serviceName] = service;
    };
    ServiceRegistryImpl.prototype.getService = function (serviceName) {
        if (!this._services.hasOwnProperty(serviceName)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Service not registered: " + serviceName);
        }
        return this._services[serviceName];
    };
    return ServiceRegistryImpl;
}());
/**
 * Static class used for getting access to the single instance
 * of the ApiServiceRegistry associated with the registryId.
 *
 * Extensions by design don't need to store/access multiple service registries. Their single instance of ServiceRegistry is
 * stored/access with registryId = 0.
 *
 * Whereas Embedding needs to be aware of which ServiceRegistry to use when there are multiple vizzes embedded.
 * An example of how window.__tableauApiServiceRegistry will look when there are two vizzes: { 0 : ServiceRegistry, 1 : ServiceRegistry}
 * where registry ID of 0 & 1 refers to viz's internal identifier (which is generated by VizManager).
 */
var ApiServiceRegistry = /** @class */ (function () {
    // Private to avoid anyone constructing this
    function ApiServiceRegistry() {
    }
    /**
     * Gets the singleton instance of the ServiceRegistry
     */
    ApiServiceRegistry.get = function (registryId) {
        if (!window.__tableauApiServiceRegistry || !window.__tableauApiServiceRegistry[registryId]) {
            ApiServiceRegistry.setInstance(registryId, new ServiceRegistryImpl());
        }
        if (!window.__tableauApiServiceRegistry[registryId]) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, 'Service registry failed');
        }
        return window.__tableauApiServiceRegistry[registryId];
    };
    /**
     * Helper method that sets the service registry instance for the corresponding registryId. Can be used by unit tests
     *
     * @param {ServiceRegistry} serviceRegistry The new registry
     */
    ApiServiceRegistry.setInstance = function (registryId, serviceRegistry) {
        if (!window.__tableauApiServiceRegistry) {
            window.__tableauApiServiceRegistry = {};
        }
        window.__tableauApiServiceRegistry[registryId] = serviceRegistry;
    };
    /**
     * Only used by unit tests
     */
    ApiServiceRegistry.clearRegistry = function () {
        window.__tableauApiServiceRegistry = {};
    };
    return ApiServiceRegistry;
}());
exports.ApiServiceRegistry = ApiServiceRegistry;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/AnimationServiceImpl.js":
/*!********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/AnimationServiceImpl.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var AnimationServiceImpl = /** @class */ (function (_super) {
    __extends(AnimationServiceImpl, _super);
    function AnimationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AnimationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "animation-service" /* Animation */;
        },
        enumerable: true,
        configurable: true
    });
    AnimationServiceImpl.prototype.replayAsync = function (replaySpeed) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.ReplaySpeed] = 1.0,
            _a);
        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(replaySpeed, api_external_contract_js_1.ReplaySpeedType, 'ReplaySpeedType');
        parameters[api_internal_contract_js_1.ParameterId.ReplaySpeed] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.setReplaySpeedType.convert(replaySpeed);
        return this.execute(api_internal_contract_js_1.VerbId.ReplayAnimation, parameters).then(function (response) {
            return;
        });
    };
    return AnimationServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.AnimationServiceImpl = AnimationServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/AnnotationServiceImpl.js":
/*!*********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/AnnotationServiceImpl.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var SelectionModels_1 = __webpack_require__(/*! ../../Models/SelectionModels */ "../api-shared-js/lib/src/ApiShared/Models/SelectionModels.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var AnnotationServiceImpl = /** @class */ (function (_super) {
    __extends(AnnotationServiceImpl, _super);
    function AnnotationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(AnnotationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "annotation-service" /* Annotation */;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method to annotate a mark on the given worksheet.
     *
     * @param visualId
     * @param mark
     * @param annotationText
     */
    AnnotationServiceImpl.prototype.annotateMarkAsync = function (visualId, mark, annotationText) {
        var _a;
        var selectionModelContainer = this.parseMarkSelectionIds([mark]);
        var dummyTargetPoint = { x: 0, y: 0 };
        var formattedText = "<formatted-text><run>" + annotationText + "</run></formatted-text>";
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'annotateMarkAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.AnnotateEnum] = api_internal_contract_js_1.AnnotateEnum.Mark,
            _a[api_internal_contract_js_1.ParameterId.TargetPoint] = dummyTargetPoint,
            _a[api_internal_contract_js_1.ParameterId.SelectionList] = [selectionModelContainer.selection],
            _a[api_internal_contract_js_1.ParameterId.FormattedText] = formattedText,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.CreateAnnotation, parameters).then(function (response) {
            // Expecting an empty model and hence the void response.
            return;
        });
    };
    /**
     * Method to retrieve annotations for the given worksheet.
     *
     * @param visualId
     * @returns {Promise<Array<Annotation>>}
     */
    AnnotationServiceImpl.prototype.getAnnotationsAsync = function (visualId) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getAnnotationsAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetAnnotations, parameters).then(function (response) {
            var annotationsList = response.result;
            return _this.annotationFilterMap(annotationsList);
        });
    };
    /**
     * Method to remove an annotation from a given worksheet.
     *
     * @param visualId
     * @param annotation
     */
    AnnotationServiceImpl.prototype.removeAnnotationAsync = function (visualId, annotation) {
        var _a;
        var selectionModelContainer = this.parseAnnotationSelectionIds([annotation]);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'removeAnnotationAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.SelectionList] = [selectionModelContainer.selection],
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RemoveAnnotation, parameters).then(function (response) {
            // Expecting an empty model and hence the void response.
            return;
        });
    };
    /**
     * Method to prepare the pres models for selection by MarksInfo
     * @param marks
     */
    AnnotationServiceImpl.prototype.parseMarkSelectionIds = function (marks) {
        var ids = [];
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        marks.forEach(function (mark) {
            var tupleId = mark.tupleId;
            if (tupleId !== undefined && tupleId !== null && tupleId > 0) {
                ids.push(tupleId.toString()); // collect the tuple ids
            }
            else {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'invalid tupleId');
            }
        });
        if (ids.length !== 0) {
            // tuple ids based selection
            var tupleSelectionModel = new SelectionModels_1.TupleSelectionModel();
            tupleSelectionModel.selectionType = 'tuples';
            tupleSelectionModel.objectIds = ids;
            selectionModelContainer.selection = tupleSelectionModel;
        }
        return selectionModelContainer;
    };
    /**
     * Method to prepare the pres models for selection by MarkAnnotationInfo
     * @param marks
     */
    AnnotationServiceImpl.prototype.parseAnnotationSelectionIds = function (annotations) {
        var ids = [];
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        annotations.forEach(function (annotation) {
            var annotationId = annotation.annotationId;
            if (annotationId !== undefined && annotationId !== null && annotationId >= 0) {
                ids.push(annotationId.toString()); // collect the annotation ids
            }
            else {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'invalid annotationId');
            }
        });
        if (ids.length !== 0) {
            // annotation ids based selection
            var tupleSelectionModel = new SelectionModels_1.TupleSelectionModel();
            tupleSelectionModel.selectionType = 'annotations';
            tupleSelectionModel.objectIds = ids;
            selectionModelContainer.selection = tupleSelectionModel;
        }
        return selectionModelContainer;
    };
    /**
     * Method to map Annotation to MarkAnnotationInfo
     * @param annotation
     * @returns {Annotation}
     */
    AnnotationServiceImpl.prototype.mapAnnotation = function (annotation) {
        return {
            annotationHTML: annotation.annotationText,
            annotationId: annotation.annotationId,
            annotationText: annotation.annotationPlainText,
            annotationType: InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.annotationType.convert(annotation.annotateEnum),
            tupleId: annotation.tupleId,
        };
    };
    /**
     * Filter the Annotations to Mark Annotations, and map them to MarkAnnotationInfo
     * @param annotations
     * @returns {Array<Annotation>}
     */
    AnnotationServiceImpl.prototype.annotationFilterMap = function (annotations) {
        var _this = this;
        var annotationInfos = annotations.map(function (annotation) { return _this.mapAnnotation(annotation); });
        return annotationInfos;
    };
    return AnnotationServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.AnnotationServiceImpl = AnnotationServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ClientInfoServiceImpl.js":
/*!*********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ClientInfoServiceImpl.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ClientInfoServiceImpl = /** @class */ (function (_super) {
    __extends(ClientInfoServiceImpl, _super);
    function ClientInfoServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ClientInfoServiceImpl.prototype, "serviceName", {
        get: function () {
            return "client-info-service" /* ClientInfo */;
        },
        enumerable: true,
        configurable: true
    });
    ClientInfoServiceImpl.prototype.getClientInfoAsync = function () {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.GetEmbeddingClientInfo;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getClientInfoAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var clientInfo = response.result;
            return clientInfo;
        });
    };
    return ClientInfoServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ClientInfoServiceImpl = ClientInfoServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/DataSourceServiceImpl.js":
/*!*********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/DataSourceServiceImpl.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var InternalContract = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var DataSource_1 = __webpack_require__(/*! ../../DataSource */ "../api-shared-js/lib/src/ApiShared/DataSource.js");
var Field_1 = __webpack_require__(/*! ../../Field */ "../api-shared-js/lib/src/ApiShared/Field.js");
var DataSourceImpl_1 = __webpack_require__(/*! ../../Impl/DataSourceImpl */ "../api-shared-js/lib/src/ApiShared/Impl/DataSourceImpl.js");
var FieldImpl_1 = __webpack_require__(/*! ../../Impl/FieldImpl */ "../api-shared-js/lib/src/ApiShared/Impl/FieldImpl.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
exports.SENTINEL_LOGICAL_TABLE_INFO = {
    id: InternalContract.ApiShowDataTableSentinel.SingleTableId,
    caption: InternalContract.ApiShowDataTableSentinel.SingleTableCaption,
};
// The minimum platform version when Object Model was supported
var platformVersionObjectModelSupport = { major: 1, minor: 20, fix: 1 };
var DataSourceServiceImpl = /** @class */ (function (_super) {
    __extends(DataSourceServiceImpl, _super);
    // Since Object Model is supported since Tableau 2020.2, DataSourceServiceImpl can be initialized with the
    // platform version when OM was supported. Once we drop support for Tableau versions <= 2020.1, all additional
    // code in here for Object Model can be removed.
    function DataSourceServiceImpl(dispatcher, registryId, _platformVersion) {
        if (_platformVersion === void 0) { _platformVersion = platformVersionObjectModelSupport; }
        var _this = _super.call(this, dispatcher, registryId) || this;
        _this._platformVersion = _platformVersion;
        return _this;
    }
    Object.defineProperty(DataSourceServiceImpl.prototype, "serviceName", {
        get: function () {
            return "data-source-service" /* DataSourceService */;
        },
        enumerable: true,
        configurable: true
    });
    DataSourceServiceImpl.prototype.refreshAsync = function (dataSourceId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'refreshAsync',
            _a[api_internal_contract_js_1.ParameterId.DeltaTimeMs] = 0,
            _a[api_internal_contract_js_1.ParameterId.ShouldRefreshDS] = true,
            _a);
        // On server: Not passing the datasource id will refresh all datasources.
        if (dataSourceId) {
            parameters[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId;
        }
        return this.execute(api_internal_contract_js_1.VerbId.RefreshDataSource, parameters).then(function (response) {
            return;
        });
    };
    DataSourceServiceImpl.prototype.getActiveTablesAsync = function (dataSourceId) {
        var _a;
        var joinParameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getActiveTablesAsync',
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId,
            _a);
        // Get the description of the tables used by this connection
        return this.execute(api_internal_contract_js_1.VerbId.GetActiveTables, joinParameters).then(function (joinResponse) {
            var tableInfos = joinResponse.result;
            // getActiveTables is unsupported for cubes and GA. We do not have a connection type property
            // available from the platform (intentionally, to reduce code churn as new connections are added).
            // Instead,just check if any tables are returned. This array will be empty for any non-table based datasource.
            if (tableInfos.tables.length === 0) {
                throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.UnsupportedMethodForDataSourceType, "getActiveTables is not supported for: " + dataSourceId);
            }
            return tableInfos.tables;
        });
    };
    DataSourceServiceImpl.prototype.getDataSourcesAsync = function (visualId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getDataSourcesAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetDataSources, parameters).then(function (response) {
            var dataSchema = response.result;
            return dataSchema;
        });
    };
    DataSourceServiceImpl.prototype.getAllDataSourcesAsync = function () {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getAllDataSourcesAsync',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetAllDataSources, parameters).then(function (response) {
            var dataSchema = response.result;
            return dataSchema;
        });
    };
    DataSourceServiceImpl.prototype.getConnectionSummariesAsync = function (dataSourceId) {
        var _a;
        var params = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getConnectionSummariesAsync',
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId,
            _a);
        // Get the description of the tables used by this connection
        return this.execute(api_internal_contract_js_1.VerbId.GetConnectionDescriptionSummaries, params).then(function (response) {
            var descriptionSummaries = response.result;
            return descriptionSummaries;
        });
    };
    DataSourceServiceImpl.prototype.getFieldAsync = function (globalfieldName) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetFieldAndDataSource;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getFieldAsync',
            _a[api_internal_contract_js_1.ParameterId.FieldId] = globalfieldName,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var dataSource = response.result[api_internal_contract_js_1.ParameterId.DataSource];
            var field = response.result[api_internal_contract_js_1.ParameterId.Field];
            return _this.convertField(field, _this.convertDataSource(dataSource));
        });
    };
    DataSourceServiceImpl.prototype.getLogicalTablesAsync = function (dataSourceId) {
        var _a;
        if (!this.isObjectModelSupportedByPlatform()) {
            /**
             * This sentinel ID can be passed to datasource.getLogicalTableData.
             * Once the desktop is upgraded to a version that supports object model,
             * the sentinel ID will automatically fetch the upgraded table.
             * */
            return new Promise(function (resolve) { return resolve([exports.SENTINEL_LOGICAL_TABLE_INFO]); });
        }
        var params = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getLogicalTablesAsync',
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetLogicalTables, params).then(function (response) {
            return response.result;
        });
    };
    DataSourceServiceImpl.prototype.getUnderlyingTablesAsync = function (visualId) {
        var _a;
        if (!this.isObjectModelSupportedByPlatform()) {
            /**
             * This sentinel ID can be passed to worksheet.getUnderlyingTableData.
             * Once the desktop is upgraded to a version that supports object model,
             * the sentinel ID will automatically fetch the upgraded table.
             * */
            return new Promise(function (resolve) { return resolve([exports.SENTINEL_LOGICAL_TABLE_INFO]); });
        }
        var params = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getUnderlyingTablesAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetUnderlyingTables, params).then(function (response) {
            return response.result;
        });
    };
    DataSourceServiceImpl.prototype.convertField = function (field, dataSource) {
        return new Field_1.Field(new FieldImpl_1.FieldImpl(field, dataSource));
    };
    DataSourceServiceImpl.prototype.convertDataSource = function (dataSource) {
        return new DataSource_1.DataSource(new DataSourceImpl_1.DataSourceImpl(dataSource, this._registryId));
    };
    DataSourceServiceImpl.prototype.isObjectModelSupportedByPlatform = function () {
        var platformVersionNoObjectModelSupport = { major: 1, minor: 13, fix: 0 };
        return InternalContract.VersionLessThan(platformVersionNoObjectModelSupport, this._platformVersion);
    };
    return DataSourceServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.DataSourceServiceImpl = DataSourceServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ExportServiceImpl.js":
/*!*****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ExportServiceImpl.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var ExportHelpers_1 = __webpack_require__(/*! ../../Utils/ExportHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ExportHelpers.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ExportServiceImpl = /** @class */ (function (_super) {
    __extends(ExportServiceImpl, _super);
    function ExportServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ExportServiceImpl.prototype, "serviceName", {
        get: function () {
            return "export-service" /* Export */;
        },
        enumerable: true,
        configurable: true
    });
    ExportServiceImpl.prototype.getExportCrosstabSheetMapAsync = function (currentSheetType) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.GetExportCrosstabSheetMap;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getExportCrosstabSheetMapAsync',
            _a[api_internal_contract_js_1.ParameterId.CurrentSheetType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.sheetType.convert(currentSheetType),
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    ExportServiceImpl.prototype.exportCrosstabAsync = function (sheetName, format, exportableWorksheetNames, currentSheetType) {
        return __awaiter(this, void 0, void 0, function () {
            var sheetNameToIdMap, parameters, verb;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ErrorHelpers_1.ErrorHelpers.verifySheetName(exportableWorksheetNames, sheetName);
                        ErrorHelpers_1.ErrorHelpers.verifyEnumValue(format, api_external_contract_js_1.CrosstabFileFormat, 'CrosstabFileFormat');
                        return [4 /*yield*/, this.getExportCrosstabSheetMapAsync(currentSheetType)];
                    case 1:
                        sheetNameToIdMap = _b.sent();
                        if (!sheetNameToIdMap[sheetName]) {
                            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'missing sheet doc id from sheetMap');
                        }
                        parameters = (_a = {},
                            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'exportCrosstabAsync',
                            _a[api_internal_contract_js_1.ParameterId.SheetIdentifier] = sheetNameToIdMap[sheetName],
                            _a[api_internal_contract_js_1.ParameterId.SendNotifications] = true,
                            _a);
                        switch (format) {
                            case api_external_contract_js_1.CrosstabFileFormat.CSV:
                                verb = api_internal_contract_js_1.VerbId.ExportCrosstabCsvDownload;
                                // CSV only parameter: see browser-clients/export-crosstab-options-dialog repo
                                parameters[api_internal_contract_js_1.ParameterId.UseTabDelimiters] = true;
                                break;
                            case api_external_contract_js_1.CrosstabFileFormat.Excel:
                                verb = api_internal_contract_js_1.VerbId.ExportCrosstabExcelDownload;
                                break;
                            default:
                                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'unsupported Crosstab file format.');
                        }
                        return [2 /*return*/, this.execute(verb, parameters)
                                .then(function (response) {
                                var result = response.result;
                                return result;
                            })
                                .catch(function () {
                                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.CrosstabCreationError, 'An unexpected error occurred while generating the document.');
                            })];
                }
            });
        });
    };
    ExportServiceImpl.prototype.exportDataAsync = function (visualId, options) {
        var _a;
        var _b;
        ErrorHelpers_1.ErrorHelpers.verifyExportDataOptions(options);
        // Remove any duplicates from the input array
        var columnsAsSet = new Set(options.columnsToIncludeById);
        var columnsToIncludeById = Array.from(columnsAsSet);
        var verb = api_internal_contract_js_1.VerbId.ExportDataDownload;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'exportDataAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = (_b = options.ignoreAliases, (_b !== null && _b !== void 0 ? _b : false)),
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = columnsToIncludeById,
            _a);
        return this.execute(verb, parameters)
            .then(function () { })
            .catch(function () {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.DataCreationError, 'An unexpected error occurred while generating the document.');
        });
    };
    ExportServiceImpl.prototype.exportPowerPointAsync = function (sheetNames, exportScenarios) {
        var _a;
        ErrorHelpers_1.ErrorHelpers.verifySheetNamesForPDFAndPPT(sheetNames, exportScenarios);
        // Note: the ExportOriginUrl param is listed as optional for the pres layer command we are invoking; however,
        // recent changes were made that enforced the use of the empty string when invoking this command with no ExportOriginUrl.
        // see browser-clients/export-powerpoint-options-dialog repo.
        var verb = api_internal_contract_js_1.VerbId.ExportPowerpointDownload;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'exportPowerPointAsync',
            _a[api_internal_contract_js_1.ParameterId.ExportOriginUrl] = '',
            _a[api_internal_contract_js_1.ParameterId.SelectedSheetNames] = sheetNames,
            _a);
        return this.execute(verb, parameters)
            .then(function (response) {
            var result = response.result;
            return result;
        })
            .catch(function () {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.PowerPointCreationError, 'An error occured while attempting to generate the PowerPoint file.');
        });
    };
    ExportServiceImpl.prototype.exportPDFAsync = function (sheetNames, externalExportPdfOptions, exportScenarios) {
        return __awaiter(this, void 0, void 0, function () {
            var internalExportPdfOptions, verb, parameters;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        ErrorHelpers_1.ErrorHelpers.verifyExportPDFOptions(externalExportPdfOptions);
                        ErrorHelpers_1.ErrorHelpers.verifySheetNamesForPDFAndPPT(sheetNames, exportScenarios);
                        return [4 /*yield*/, this.getExportPDFOptionsAsync()];
                    case 1:
                        internalExportPdfOptions = _b.sent();
                        ExportHelpers_1.ExportHelpers.updateInternalExportPDFOptions(internalExportPdfOptions, externalExportPdfOptions, sheetNames);
                        verb = api_internal_contract_js_1.VerbId.ExportPdfDownload;
                        parameters = (_a = {},
                            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'exportPDFAsync',
                            _a[api_internal_contract_js_1.ParameterId.ExportPdfOptions] = internalExportPdfOptions,
                            _a);
                        return [2 /*return*/, this.execute(verb, parameters)
                                .then(function (response) {
                                var result = response.result;
                                return result;
                            })
                                .catch(function () {
                                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.PDFCreationError, 'Unable to create PDF because something went wrong. Try again.');
                            })];
                }
            });
        });
    };
    ExportServiceImpl.prototype.getExportPDFOptionsAsync = function () {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.GetExportPdfOptions;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getExportPdfOptionsAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    return ExportServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ExportServiceImpl = ExportServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ExternalContextMenuServiceImpl.js":
/*!******************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ExternalContextMenuServiceImpl.js ***!
  \******************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ExternalContextMenuServiceImpl = /** @class */ (function (_super) {
    __extends(ExternalContextMenuServiceImpl, _super);
    function ExternalContextMenuServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ExternalContextMenuServiceImpl.prototype, "serviceName", {
        get: function () {
            return "external-context-menu-service" /* ExternalContextMenu */;
        },
        enumerable: true,
        configurable: true
    });
    ExternalContextMenuServiceImpl.prototype.appendContextMenuAsync = function (sheetName, targetMenu, config) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.AppendExternalMenuItem;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'appendContextMenuAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = sheetName,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuItemDisplayName] = config.displayName,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var newMenuItemId = response.result;
            return newMenuItemId;
        });
    };
    ExternalContextMenuServiceImpl.prototype.removeContextMenuAsync = function (sheetName, targetMenu, menuItemId) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.RemoveExternalMenuItem;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'removeContextMenuAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = sheetName,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuItemId] = menuItemId,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    ExternalContextMenuServiceImpl.prototype.executeContextMenuAsync = function (sheetName, targetMenu, menuItemId) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ExecuteExternalMenuItem;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'executeContextMenuAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = sheetName,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuItemId] = menuItemId,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    ExternalContextMenuServiceImpl.prototype.renameContextMenuAsync = function (sheetName, targetMenu, menuHeader, menuDescription) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.RenameExternalMenu;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'renameContextMenuAsync',
            _a[api_internal_contract_js_1.ParameterId.WorksheetName] = sheetName,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuHeader] = menuHeader,
            _a[api_internal_contract_js_1.ParameterId.ExternalMenuDescription] = menuDescription,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    return ExternalContextMenuServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ExternalContextMenuServiceImpl = ExternalContextMenuServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/FilterServiceImpl.js":
/*!*****************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/FilterServiceImpl.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var InternalContract = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ApiShared_1 = __webpack_require__(/*! ../../../ApiShared */ "../api-shared-js/lib/src/ApiShared.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var FilterModels_1 = __webpack_require__(/*! ../../Models/FilterModels */ "../api-shared-js/lib/src/ApiShared/Models/FilterModels.js");
var DataValueFactory_1 = __webpack_require__(/*! ../../Utils/DataValueFactory */ "../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js");
var Param_1 = __webpack_require__(/*! ../../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var FilterServiceImpl = /** @class */ (function (_super) {
    __extends(FilterServiceImpl, _super);
    function FilterServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(FilterServiceImpl.prototype, "serviceName", {
        get: function () {
            return "filter-service" /* Filter */;
        },
        enumerable: true,
        configurable: true
    });
    FilterServiceImpl.prototype.applyFilterAsync = function (visualId, fieldName, values, updateType, filterOptions) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ApplyCategoricalFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        if (!Array.isArray(values)) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'values parameter for applyFilterAsync must be an array');
        }
        parameters[api_internal_contract_js_1.ParameterId.FilterValues] = values;
        parameters[api_internal_contract_js_1.ParameterId.FilterUpdateType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterUpdateType.convert(updateType);
        parameters[api_internal_contract_js_1.ParameterId.IsExcludeMode] =
            filterOptions === undefined || filterOptions.isExcludeMode === undefined ? false : filterOptions.isExcludeMode;
        return this.execute(verb, parameters).then(function (response) {
            return fieldName;
        });
    };
    FilterServiceImpl.prototype.applyRangeFilterAsync = function (visualId, fieldName, filterOptions) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.ApplyRangeFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyRangeFilterAsync',
            _a);
        if (filterOptions.min !== undefined && filterOptions.min !== null) {
            var min = void 0;
            if (filterOptions.min instanceof Date) {
                min = Param_1.Param.serializeDateForPlatform(filterOptions.min);
            }
            else {
                min = filterOptions.min;
            }
            parameters[api_internal_contract_js_1.ParameterId.FilterRangeMin] = min;
        }
        if (filterOptions.max !== undefined && filterOptions.max !== null) {
            var max = void 0;
            if (filterOptions.max instanceof Date) {
                max = Param_1.Param.serializeDateForPlatform(filterOptions.max);
            }
            else {
                max = filterOptions.max;
            }
            parameters[api_internal_contract_js_1.ParameterId.FilterRangeMax] = max;
        }
        // The null option is used with min+max for 'include-range' or 'include-range-or-null'
        if (filterOptions.nullOption) {
            parameters[api_internal_contract_js_1.ParameterId.FilterRangeNullOption] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.nullOptions.convert(filterOptions.nullOption);
        }
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        return this.execute(verb, parameters).then(function (response) {
            _this.apiFilterHandlerCheckForCommandError(response.result);
            return fieldName;
        });
    };
    FilterServiceImpl.prototype.applyHierarchicalFilterAsync = function (visualId, fieldName, values, updateType, filterOptions) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.HierarchicalFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyHierarchicalFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        var hierarchicalLevels = values.levels;
        if (Array.isArray(hierarchicalLevels) && hierarchicalLevels.length > 0) {
            parameters[api_internal_contract_js_1.ParameterId.FilterLevels] = hierarchicalLevels;
        }
        else if (values.length > 0) {
            parameters[api_internal_contract_js_1.ParameterId.FilterValues] = values;
        }
        else {
            // the server command expects empty list for clearing the filter
            // it also expects eithers FilterLevels or FilterValues to be set
            parameters[api_internal_contract_js_1.ParameterId.FilterLevels] = [];
        }
        parameters[api_internal_contract_js_1.ParameterId.FilterUpdateType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterUpdateType.convert(updateType);
        parameters[api_internal_contract_js_1.ParameterId.IsExcludeMode] = filterOptions && !!filterOptions.isExcludeMode;
        return this.execute(verb, parameters).then(function (response) {
            return fieldName;
        });
    };
    FilterServiceImpl.prototype.clearFilterAsync = function (visualId, fieldName) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ClearFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'clearFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        return this.execute(verb, parameters).then(function (resposne) {
            return fieldName;
        });
    };
    FilterServiceImpl.prototype.applyRelativeDateFilterAsync = function (visualId, fieldName, options) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ApplyRelativeDateFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyRelativeDateFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        parameters[api_internal_contract_js_1.ParameterId.PeriodType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.periodType.convert(options.periodType);
        parameters[api_internal_contract_js_1.ParameterId.DateRangeType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.dateRangeType.convert(options.rangeType);
        if (options.rangeType === api_external_contract_js_1.DateRangeType.LastN || options.rangeType === api_external_contract_js_1.DateRangeType.NextN) {
            if (options.rangeN === undefined || options.rangeN === null) {
                throw new ApiShared_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.MissingRangeNForRelativeDateFilters, 'Missing rangeN field for a relative date filter of LASTN or NEXTN.');
            }
            parameters[api_internal_contract_js_1.ParameterId.RangeN] = options.rangeN;
        }
        if (options.anchorDate !== undefined && options.anchorDate !== null) {
            parameters[api_internal_contract_js_1.ParameterId.AnchorDate] = this.convertAnchorDate(options.anchorDate);
        }
        return this.execute(verb, parameters).then(function (response) {
            return response.result;
        });
    };
    FilterServiceImpl.prototype.getFiltersAsync = function (visualId) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetFilters;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getFiltersAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        return this.execute(verb, parameters).then(function (response) {
            var filters = response.result;
            return _this.convertDomainFilters(filters);
        });
    };
    FilterServiceImpl.prototype.getCategoricalDomainAsync = function (worksheetName, fieldId, domainType) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetCategoricalDomain;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getCategoricalDomainAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = {
            worksheet: worksheetName,
        };
        parameters[api_internal_contract_js_1.ParameterId.FieldId] = fieldId;
        parameters[api_internal_contract_js_1.ParameterId.DomainType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterDomainType.convert(domainType);
        return this.execute(verb, parameters).then(function (response) {
            var domain = response.result;
            return _this.convertCategoricalDomain(domain, domainType);
        });
    };
    FilterServiceImpl.prototype.getRangeDomainAsync = function (worksheetName, fieldId, domainType) {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetRangeDomain;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getRangeDomainAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = {
            worksheet: worksheetName,
        };
        parameters[api_internal_contract_js_1.ParameterId.FieldId] = fieldId;
        parameters[api_internal_contract_js_1.ParameterId.DomainType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterDomainType.convert(domainType);
        return this.execute(verb, parameters).then(function (response) {
            var domain = response.result;
            return _this.convertRangeDomain(domain, domainType);
        });
    };
    FilterServiceImpl.prototype.getDashboardFiltersAsync = function () {
        var _a;
        var _this = this;
        var verb = api_internal_contract_js_1.VerbId.GetDashboardFilters;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getDashboardFiltersAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var filters = response.result;
            return _this.convertDomainFilters(filters);
        });
    };
    FilterServiceImpl.prototype.applyDashboardFilterAsync = function (fieldName, values, updateType, filterOptions) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.DashboardCategoricalFilter;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'applyDashboardFilterAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.FieldName] = fieldName;
        parameters[api_internal_contract_js_1.ParameterId.FilterValues] = values;
        parameters[api_internal_contract_js_1.ParameterId.FilterUpdateType] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.filterUpdateType.convert(updateType);
        parameters[api_internal_contract_js_1.ParameterId.IsExcludeMode] = filterOptions && !!filterOptions.isExcludeMode;
        return this.execute(verb, parameters).then(function (response) {
            return response.result;
        });
    };
    FilterServiceImpl.prototype.getAppliedWorksheetsAsync = function (worksheetName, fieldId) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var sharedFilterModel, worksheetNames;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.executeGetAppliedWorksheets(worksheetName, fieldId, 'getAppliedWorksheetsAsync')];
                    case 1:
                        sharedFilterModel = _b.sent();
                        worksheetNames = [];
                        (_a = sharedFilterModel.worksheets) === null || _a === void 0 ? void 0 : _a.map(function (worksheetInfo) {
                            if (worksheetInfo.isSelected) {
                                worksheetNames.push(worksheetInfo.worksheetName);
                            }
                        });
                        return [2 /*return*/, worksheetNames];
                }
            });
        });
    };
    FilterServiceImpl.prototype.setAppliedWorksheetsAsync = function (worksheetName, fieldName, fieldId, applyToWorksheets) {
        return __awaiter(this, void 0, void 0, function () {
            var sharedFilterModel, allowedWorksheets, activeWorksheet, verb, parameters;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.executeGetAppliedWorksheets(worksheetName, fieldId, 'getAppliedWorksheetsAsyncInternal')];
                    case 1:
                        sharedFilterModel = _a.sent();
                        if (!sharedFilterModel || !sharedFilterModel.worksheets) {
                            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'This filter does not apply to multiple worksheets');
                        }
                        allowedWorksheets = [];
                        activeWorksheet = '';
                        sharedFilterModel.worksheets.forEach(function (worksheet) {
                            // Get active worksheet
                            if (worksheet.isActive) {
                                activeWorksheet = worksheet.worksheetName;
                            }
                            // Populate allowed worksheets
                            if (worksheet.isSelected || worksheet.isEnabled) {
                                allowedWorksheets.push(worksheet.worksheetName);
                            }
                        });
                        if (activeWorksheet === '') {
                            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'No active worksheet');
                        }
                        if (!applyToWorksheets.includes(activeWorksheet)) {
                            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, activeWorksheet + " must be included in the applied worksheets");
                        }
                        applyToWorksheets.forEach(function (sheet) {
                            // check if it's present within compatible sheets
                            if (!allowedWorksheets.includes(sheet)) {
                                throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, "The field " + fieldName + " isn't applicable to the worksheet " + sheet);
                            }
                        });
                        verb = api_internal_contract_js_1.VerbId.ChangeSharedFilter;
                        parameters = {};
                        parameters[api_internal_contract_js_1.ParameterId.FunctionName] = 'setAppliedWorksheetsAsync';
                        parameters[api_internal_contract_js_1.ParameterId.VisualId] = {
                            worksheet: worksheetName,
                        };
                        parameters[api_internal_contract_js_1.ParameterId.FieldId] = fieldId;
                        parameters[api_internal_contract_js_1.ParameterId.SharedFilterSheets] = applyToWorksheets;
                        return [2 /*return*/, this.execute(verb, parameters).then(function (response) {
                                return applyToWorksheets;
                            })];
                }
            });
        });
    };
    // Helper Methods
    FilterServiceImpl.prototype.executeGetAppliedWorksheets = function (worksheetName, fieldId, telemetryFunctionName) {
        var verb = api_internal_contract_js_1.VerbId.GetSharedFilter;
        var parameters = {};
        parameters[api_internal_contract_js_1.ParameterId.FunctionName] = telemetryFunctionName;
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = {
            worksheet: worksheetName,
        };
        parameters[api_internal_contract_js_1.ParameterId.FieldId] = fieldId;
        return this.execute(verb, parameters).then(function (response) {
            var sharedFilterModel = response.result;
            return sharedFilterModel;
        });
    };
    FilterServiceImpl.prototype.convertDomainFilters = function (domainFilters) {
        var _this = this;
        var filters = [];
        domainFilters.forEach(function (domainFilter) {
            switch (domainFilter.filterType) {
                case api_internal_contract_js_1.FilterType.Categorical: {
                    var filter = domainFilter;
                    if (filter) {
                        filters.push(_this.convertCategoricalFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Categorical Filter');
                    }
                    break;
                }
                case api_internal_contract_js_1.FilterType.Hierarchical: {
                    var filter = domainFilter;
                    if (filter) {
                        filters.push(_this.convertHierarchicalFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Hierarchical Filter');
                    }
                    break;
                }
                case api_internal_contract_js_1.FilterType.Range: {
                    var filter = domainFilter;
                    if (filter) {
                        filters.push(_this.convertRangeFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Range Filter');
                    }
                    break;
                }
                case api_internal_contract_js_1.FilterType.RelativeDate: {
                    var filter = domainFilter;
                    if (filter) {
                        filters.push(_this.convertRelativeDateFilter(filter));
                    }
                    else {
                        throw new Error('Invalid Relative Date Filter');
                    }
                    break;
                }
                default: {
                    break;
                }
            }
        });
        return filters;
    };
    FilterServiceImpl.prototype.convertCategoricalFilter = function (domainFilter) {
        var appliedValues = domainFilter.values.map(function (dv) {
            return DataValueFactory_1.DataValueFactory.MakeFilterDataValue(dv);
        });
        return new FilterModels_1.CategoricalFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, api_internal_contract_js_1.FilterType.Categorical, this._registryId, appliedValues, domainFilter.isExclude, domainFilter.isAllSelected);
    };
    FilterServiceImpl.prototype.convertHierarchicalFilter = function (domainFilter) {
        var appliedValues = domainFilter.values.map(function (hierarchicalDataValue) {
            return new FilterModels_1.HierarchicalDataValue(DataValueFactory_1.DataValueFactory.MakeFilterDataValue(hierarchicalDataValue.value), hierarchicalDataValue.hierarchicalPath, hierarchicalDataValue.level);
        });
        var levelDetails = domainFilter.levelInfo.map(function (aLevel) {
            return new FilterModels_1.HierarchicalLevelDetail(aLevel.name, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.hierarchicalLevelSelectionState.convert(aLevel.levelSelectionState));
        });
        return new FilterModels_1.HierarchicalFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, api_internal_contract_js_1.FilterType.Hierarchical, this._registryId, domainFilter.dimensionName, domainFilter.hierarchyCaption, domainFilter.levels, levelDetails, appliedValues, domainFilter.isAllSelected);
    };
    FilterServiceImpl.prototype.convertRangeFilter = function (domainFilter) {
        var minValue = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domainFilter.min);
        var maxValue = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domainFilter.max);
        return new FilterModels_1.RangeFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, api_internal_contract_js_1.FilterType.Range, this._registryId, minValue, maxValue, domainFilter.includeNullValues);
    };
    FilterServiceImpl.prototype.convertRelativeDateFilter = function (domainFilter) {
        var anchorDateValue = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domainFilter.anchorDate);
        return new FilterModels_1.RelativeDateFilter(domainFilter.visualId.worksheet, domainFilter.fieldCaption, domainFilter.fieldName, api_external_contract_js_1.FilterType.RelativeDate, this._registryId, anchorDateValue, InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateStepPeriod.convert(domainFilter.periodType), InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.dateRangeType.convert(domainFilter.rangeType), domainFilter.rangeN);
    };
    FilterServiceImpl.prototype.convertCategoricalDomain = function (domain, domainType) {
        var values = domain.values.map(function (domainDv) {
            return DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domainDv);
        });
        return new FilterModels_1.CategoricalDomain(values, domainType);
    };
    FilterServiceImpl.prototype.convertRangeDomain = function (domain, domainType) {
        var min = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domain.min);
        var max = DataValueFactory_1.DataValueFactory.MakeFilterDataValue(domain.max);
        return new FilterModels_1.RangeDomain(min, max, domainType);
    };
    FilterServiceImpl.prototype.convertAnchorDate = function (anchorDate) {
        // Converts a Date object into a string format that the server expects for date/time values.
        // If anchorDate doesn't represent a valid Date object, any of these would be NaN.
        var year = anchorDate.getUTCFullYear();
        var month = anchorDate.getUTCMonth() + 1;
        var day = anchorDate.getUTCDate();
        var hh = anchorDate.getUTCHours();
        var mm = anchorDate.getUTCMinutes();
        var sec = anchorDate.getUTCSeconds();
        if (isNaN(year) || isNaN(month) || isNaN(day) || isNaN(hh) || isNaN(mm) || isNaN(sec)) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.EmbeddingErrorCodes.InvalidDateParameter, 'Invalid date parameter: anchorDate');
        }
        var result = year + "-" + month + "-" + day + " " + hh + ":" + mm + ":" + sec;
        return result;
    };
    FilterServiceImpl.prototype.apiFilterHandlerCheckForCommandError = function (serverPm) {
        if (!serverPm[InternalContract.ParameterId.ParameterError]) {
            return;
        }
        if (serverPm[InternalContract.ParameterId.InvalidFieldCaption]) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidFilterFieldName, serverPm[InternalContract.ParameterId.InvalidFieldCaption]);
        }
        if (serverPm[InternalContract.ParameterId.InvalidValues]) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidFilterFieldValue, serverPm[InternalContract.ParameterId.InvalidValues]);
        }
        if (serverPm[InternalContract.ParameterId.InvalidAggFieldName]) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidAggregationFieldName, serverPm[InternalContract.ParameterId.InvalidAggFieldName]);
        }
        throw new ApiShared_1.TableauError(api_external_contract_js_1.SharedErrorCodes.ServerError, 'Server Error');
    };
    return FilterServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.FilterServiceImpl = FilterServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/GetDataServiceImpl.js":
/*!******************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/GetDataServiceImpl.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var uuid_1 = __webpack_require__(/*! uuid */ "../../node_modules/uuid/index.js");
var ApiShared_1 = __webpack_require__(/*! ../../../ApiShared */ "../api-shared-js/lib/src/ApiShared.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var GetDataModels_1 = __webpack_require__(/*! ../../Models/GetDataModels */ "../api-shared-js/lib/src/ApiShared/Models/GetDataModels.js");
var GetDataTableReaderModels_1 = __webpack_require__(/*! ../../Models/GetDataTableReaderModels */ "../api-shared-js/lib/src/ApiShared/Models/GetDataTableReaderModels.js");
var DataValueFactory_1 = __webpack_require__(/*! ../../Utils/DataValueFactory */ "../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js");
var GetDataService_1 = __webpack_require__(/*! ../GetDataService */ "../api-shared-js/lib/src/ApiShared/Services/GetDataService.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var GetDataServiceImpl = /** @class */ (function (_super) {
    __extends(GetDataServiceImpl, _super);
    function GetDataServiceImpl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        // The extension/embedding instance uses the same cache for all DataTableReaders.
        _this.viewDataTableCacheId = uuid_1.v4();
        return _this;
    }
    Object.defineProperty(GetDataServiceImpl.prototype, "serviceName", {
        get: function () {
            return "get-data-service" /* GetData */;
        },
        enumerable: true,
        configurable: true
    });
    GetDataServiceImpl.prototype.getMaxRowLimit = function () {
        return 10000;
    };
    GetDataServiceImpl.prototype.getViewDataTableCacheId = function () {
        return this.viewDataTableCacheId;
    };
    GetDataServiceImpl.prototype.getLimitedMaxRows = function (requestedRows) {
        var rowCountLimit = this.getMaxRowLimit() + 1;
        return requestedRows > 0 && requestedRows < rowCountLimit ? requestedRows : rowCountLimit;
    };
    GetDataServiceImpl.prototype.getUnderlyingDataAsync = function (visualId, getType, ignoreAliases, ignoreSelection, includeAllColumns, columnsToIncludeById, maxRows, includeDataValuesOption) {
        var _a;
        var _this = this;
        // Create all of our parameters
        var summaryData = getType === GetDataService_1.GetDataType.Summary;
        var functionName = summaryData ? 'getSummaryDataAsync' : 'getUnderlyingDataAsync';
        var verb = summaryData ? api_internal_contract_js_1.VerbId.GetDataSummaryData : api_internal_contract_js_1.VerbId.GetUnderlyingData;
        var requestMaxRows = verb === api_internal_contract_js_1.VerbId.GetUnderlyingData ? this.getLimitedMaxRows(maxRows) : maxRows;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = functionName,
            _a);
        parameters[api_internal_contract_js_1.ParameterId.VisualId] = visualId;
        parameters[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases;
        parameters[api_internal_contract_js_1.ParameterId.IgnoreSelection] = ignoreSelection;
        parameters[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = includeAllColumns;
        parameters[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById);
        parameters[api_internal_contract_js_1.ParameterId.MaxRows] = requestMaxRows;
        parameters[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption);
        return this.execute(verb, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsTable(responseData.data, responseData.isSummary);
        });
    };
    GetDataServiceImpl.prototype.getSummaryDataReaderAsync = function (visualId, pageRowCount, ignoreAliases, ignoreSelection, includeAllColumns, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getSummaryDataReaderAsync',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.PageRowCount] = pageRowCount,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.IgnoreSelection] = ignoreSelection,
            _a[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = includeAllColumns,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetDataSummaryDataReader, parameters).then(function (response) {
            var responseData = response.result;
            return new GetDataTableReaderModels_1.DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, _this._registryId);
        });
    };
    GetDataServiceImpl.prototype.getSummaryColumnsInfoAsync = function (visualId) {
        var _a;
        // Create all the parameters for GetDataType of Summary with 1 row, and only native values
        // Then return just the columns
        var verb = api_internal_contract_js_1.VerbId.GetDataSummaryData;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getSummaryColumnsInfoAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = true,
            _a[api_internal_contract_js_1.ParameterId.IgnoreSelection] = true,
            _a[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = true,
            _a[api_internal_contract_js_1.ParameterId.MaxRows] = 1,
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = api_internal_contract_js_1.ApiShowDataTableFormat.NativeValuesOnly,
            _a);
        return this.execute(verb, parameters).then(function (response) {
            var underlyingDataTable = response.result;
            var dataTable = underlyingDataTable.data;
            var columns = dataTable.headers.map(function (h) { return new GetDataModels_1.Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index); });
            return columns;
        });
    };
    GetDataServiceImpl.prototype.getSelectedMarksAsync = function (visualId) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getSelectedMarksAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetSelectedMarks, parameters).then(function (response) {
            var responseData = response.result;
            return {
                data: responseData.data.map(function (table) { return _this.processResultsTable(table, true); }),
            };
        });
    };
    GetDataServiceImpl.prototype.getHighlightedMarksAsync = function (visualId) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getHighlightedMarksAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetHighlightedMarks, parameters).then(function (response) {
            var responseData = response.result;
            return {
                data: responseData.data.map(function (table) { return _this.processResultsTable(table, true); }),
            };
        });
    };
    GetDataServiceImpl.prototype.getDataSourceDataAsync = function (dataSourceId, ignoreAliases, maxRows, columnsToInclude, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getDataSourceDataAsync',
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = dataSourceId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.MaxRows] = this.getLimitedMaxRows(maxRows),
            _a[api_internal_contract_js_1.ParameterId.ColumnsToInclude] = this.verifyIncludeColumnArray(columnsToInclude),
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetDataSourceData, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsTable(responseData.data, false);
        });
    };
    GetDataServiceImpl.prototype.getLogicalTableDataAsync = function (datasourceId, logicalTableId, ignoreAliases, maxRows, columnsToInclude, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getLogicalTableDataAsync',
            _a[api_internal_contract_js_1.ParameterId.ColumnsToInclude] = columnsToInclude,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = datasourceId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.LogicalTableId] = logicalTableId,
            _a[api_internal_contract_js_1.ParameterId.MaxRows] = this.getLimitedMaxRows(maxRows),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetLogicalTableData, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsTable(responseData.data, false);
        });
    };
    GetDataServiceImpl.prototype.getLogicalTableDataReaderAsync = function (datasourceId, logicalTableId, pageRowCount, ignoreAliases, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getLogicalTableDataReaderAsync',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.DataSourceId] = datasourceId,
            _a[api_internal_contract_js_1.ParameterId.LogicalTableId] = logicalTableId,
            _a[api_internal_contract_js_1.ParameterId.PageRowCount] = pageRowCount,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetLogicalTableDataReader, parameters).then(function (response) {
            var responseData = response.result;
            return new GetDataTableReaderModels_1.DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, _this._registryId);
        });
    };
    GetDataServiceImpl.prototype.getUnderlyingTableDataAsync = function (visualId, logicalTableId, ignoreAliases, ignoreSelection, includeAllColumns, columnsToIncludeById, maxRows, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getUnderlyingTableDataAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.LogicalTableId] = logicalTableId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.IgnoreSelection] = ignoreSelection,
            _a[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = includeAllColumns,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.MaxRows] = this.getLimitedMaxRows(maxRows),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetUnderlyingTableData, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsTable(responseData.data, false);
        });
    };
    GetDataServiceImpl.prototype.getUnderlyingTableDataReaderAsync = function (visualId, logicalTableId, pageRowCount, ignoreAliases, ignoreSelection, includeAllColumns, columnsToIncludeById, includeDataValuesOption) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getUnderlyingTableDataReaderAsync',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.LogicalTableId] = logicalTableId,
            _a[api_internal_contract_js_1.ParameterId.IgnoreAliases] = ignoreAliases,
            _a[api_internal_contract_js_1.ParameterId.IgnoreSelection] = ignoreSelection,
            _a[api_internal_contract_js_1.ParameterId.IncludeAllColumns] = includeAllColumns,
            _a[api_internal_contract_js_1.ParameterId.ColumnsToIncludeById] = this.verifyIncludeColumnArray(columnsToIncludeById),
            _a[api_internal_contract_js_1.ParameterId.ShowDataTableFormat] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.showDataTableFormatType.convert(includeDataValuesOption),
            _a[api_internal_contract_js_1.ParameterId.PageRowCount] = pageRowCount,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetUnderlyingTableDataReader, parameters).then(function (response) {
            var responseData = response.result;
            return new GetDataTableReaderModels_1.DataTableReader(responseData.id, responseData.totalRowCount, pageRowCount, _this._registryId);
        });
    };
    GetDataServiceImpl.prototype.getPageAsync = function (tableId, pageNumber, pageSize) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getPageAsync',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableId] = tableId,
            _a[api_internal_contract_js_1.ParameterId.DataRowIndex] = pageNumber * pageSize,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetDataTableReaderPage, parameters).then(function (response) {
            var responseData = response.result;
            return _this.processResultsPage(responseData, tableId === GetDataServiceImpl.summaryTableId ? true : false);
        });
    };
    GetDataServiceImpl.prototype.releaseAsync = function (tableId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'release',
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableCacheId] = this.getViewDataTableCacheId(),
            _a[api_internal_contract_js_1.ParameterId.ViewDataTableId] = tableId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ReleaseDataTableReader, parameters).then(function (response) {
            return;
        });
    };
    GetDataServiceImpl.prototype.verifyIncludeColumnArray = function (columns) {
        // columns must be a valid array
        if (!Array.isArray(columns)) {
            throw new ApiShared_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'columnsToInclude and columnsToIncludeById must be valid arrays');
        }
        // Remove any duplicates from the input array
        var columnsAsSet = new Set(columns);
        return Array.from(columnsAsSet);
    };
    GetDataServiceImpl.prototype.processResultsTable = function (responseData, isSummary) {
        var headers = responseData.headers.map(function (h) { return new GetDataModels_1.Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index); });
        // TODO This should be controlled by a flag indicating whether this api will respond marks info or not
        var marks;
        if (responseData.marks) {
            marks = responseData.marks.map(function (h) { return new GetDataModels_1.MarkInfo(h.type, h.color, h.tupleId); });
        }
        // Limit+1 is our sentinal that underlying data contains more rows than user is allowed to fetch.
        // Remove the last element so we always return MaxRowLimit
        var isTotalRowCountLimited = isSummary === false && responseData.dataTable.length === this.getMaxRowLimit() + 1;
        if (isTotalRowCountLimited) {
            responseData.dataTable.length -= 1;
        }
        var table = responseData.dataTable.map(function (row) {
            return row.map(function (cell, index) {
                return DataValueFactory_1.DataValueFactory.MakeTableDataValue(cell, headers[index].dataType);
            });
        });
        if (marks) {
            return new GetDataModels_1.DataTable(table, headers, table.length, isTotalRowCountLimited, isSummary, marks);
        }
        return new GetDataModels_1.DataTable(table, headers, table.length, isTotalRowCountLimited, isSummary);
    };
    GetDataServiceImpl.prototype.processResultsPage = function (responseData, isSummary) {
        var headers = responseData.headers.map(function (h) { return new GetDataModels_1.Column(h.fieldCaption, h.fieldName, h.dataType, h.isReferenced, h.index); });
        var marks;
        if (responseData.marks) {
            marks = responseData.marks.map(function (h) { return new GetDataModels_1.MarkInfo(h.type, h.color, h.tupleId); });
        }
        var table = responseData.dataTable.map(function (row) {
            return row.map(function (cell, index) {
                return DataValueFactory_1.DataValueFactory.MakeTableDataValue(cell, headers[index].dataType);
            });
        });
        if (marks) {
            return new GetDataModels_1.DataTable(table, headers, table.length, false, isSummary, marks);
        }
        return new GetDataModels_1.DataTable(table, headers, table.length, false, isSummary);
    };
    GetDataServiceImpl.summaryTableId = '';
    return GetDataServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.GetDataServiceImpl = GetDataServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImpl.js":
/*!***********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImpl.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var NotificationServiceImplBase_1 = __webpack_require__(/*! ./NotificationServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImplBase.js");
var NotificationServiceImpl = /** @class */ (function (_super) {
    __extends(NotificationServiceImpl, _super);
    function NotificationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(NotificationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "notification-service" /* Notification */;
        },
        enumerable: true,
        configurable: true
    });
    return NotificationServiceImpl;
}(NotificationServiceImplBase_1.NotificationServiceImplBase));
exports.NotificationServiceImpl = NotificationServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImplBase.js":
/*!***************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/NotificationServiceImplBase.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Registration = /** @class */ (function () {
    function Registration(_filterFn, _callbackFn) {
        this._filterFn = _filterFn;
        this._callbackFn = _callbackFn;
        // Nothing Here
    }
    Registration.prototype.onNotification = function (notificationModel) {
        if (this._filterFn(notificationModel)) {
            this._callbackFn(notificationModel);
        }
    };
    return Registration;
}());
exports.Registration = Registration;
var NotificationServiceImplBase = /** @class */ (function () {
    function NotificationServiceImplBase(dispatcher) {
        this.dispatcher = dispatcher;
        this._handlers = {};
        this.dispatcher.registerNotificationHandler(this.onNotification.bind(this));
    }
    NotificationServiceImplBase.prototype.registerHandler = function (id, filterFn, handler) {
        var _this = this;
        var handlers = this._handlers[id] || new Array();
        var registration = new Registration(filterFn, handler);
        handlers.push(registration);
        this._handlers[id] = handlers;
        return function () { return _this.removeRegistration(id, registration); };
    };
    NotificationServiceImplBase.prototype.hasHandlersForNotificationType = function (id) {
        // eslint-disable-next-line no-prototype-builtins
        return this._handlers.hasOwnProperty(id);
    };
    NotificationServiceImplBase.prototype.onNotification = function (notification) {
        if (!this.hasHandlersForNotificationType(notification.notificationId)) {
            return;
        }
        // Go through and check for all the handlers of this particular notification
        this._handlers[notification.notificationId].forEach(function (h) { return h.onNotification(notification.data); });
    };
    NotificationServiceImplBase.prototype.removeRegistration = function (id, registration) {
        if (!this.hasHandlersForNotificationType(id)) {
            return;
        }
        this._handlers[id] = this._handlers[id].filter(function (reg) { return reg !== registration; });
    };
    return NotificationServiceImplBase;
}());
exports.NotificationServiceImplBase = NotificationServiceImplBase;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ParametersServiceImpl.js":
/*!*********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ParametersServiceImpl.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ParameterImpl_1 = __webpack_require__(/*! ../../Impl/ParameterImpl */ "../api-shared-js/lib/src/ApiShared/Impl/ParameterImpl.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ParametersServiceImpl = /** @class */ (function (_super) {
    __extends(ParametersServiceImpl, _super);
    function ParametersServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ParametersServiceImpl.prototype, "serviceName", {
        get: function () {
            return "parameters-service" /* Parameters */;
        },
        enumerable: true,
        configurable: true
    });
    ParametersServiceImpl.prototype.getParametersForSheetAsync = function (sheetPath) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getParametersForSheetAsync',
            _a[api_internal_contract_js_1.ParameterId.SheetPath] = sheetPath,
            _a);
        return this.getParametersAsync(parameters);
    };
    ParametersServiceImpl.prototype.getAllParametersAsync = function () {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getParametersForSheetAsync',
            _a);
        return this.getParametersAsync(parameters);
    };
    ParametersServiceImpl.prototype.getParametersAsync = function (inputParameters) {
        var _this = this;
        return this.execute(api_internal_contract_js_1.VerbId.GetParametersForSheet, inputParameters).then(function (response) {
            var result = response.result;
            return result.map(function (parameterInfo) {
                return new ParameterImpl_1.ParameterImpl(parameterInfo, _this._registryId);
            });
        });
    };
    ParametersServiceImpl.prototype.changeParameterValueAsync = function (fieldName, newValue) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'changeParameterValueAsync',
            _a[api_internal_contract_js_1.ParameterId.ParameterFieldName] = fieldName,
            _a[api_internal_contract_js_1.ParameterId.ParameterValue] = newValue,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ChangeParameterValue, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    ParametersServiceImpl.prototype.findParameterByNameAsync = function (name) {
        return this.findParameterAsync(name, undefined);
    };
    ParametersServiceImpl.prototype.findParameterByGlobalFieldNameAsync = function (fieldName) {
        return this.findParameterAsync(undefined, fieldName);
    };
    ParametersServiceImpl.prototype.findParameterAsync = function (name, fieldName) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'findParameterAsync',
            _a);
        if (name !== undefined) {
            parameters[api_internal_contract_js_1.ParameterId.ParameterCaption] = name;
        }
        else if (fieldName !== undefined) {
            parameters[api_internal_contract_js_1.ParameterId.ParameterFieldName] = fieldName;
        }
        else {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, 'name or fieldName must be provided to find parameter');
        }
        return this.execute(api_internal_contract_js_1.VerbId.FindParameter, parameters).then(function (response) {
            var instanceOfParameterInfo = function (object) {
                return 'fieldName' in object;
            };
            // We need to check to see if we got a valid response back again
            if (instanceOfParameterInfo(response.result)) {
                var result = response.result;
                return new ParameterImpl_1.ParameterImpl(result, _this._registryId);
            }
            else {
                return undefined;
            }
        });
    };
    return ParametersServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ParametersServiceImpl = ParametersServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/SelectionServiceImpl.js":
/*!********************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/SelectionServiceImpl.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var SelectionModels_1 = __webpack_require__(/*! ../../Models/SelectionModels */ "../api-shared-js/lib/src/ApiShared/Models/SelectionModels.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var Param_1 = __webpack_require__(/*! ../../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var SelectionServiceImpl = /** @class */ (function (_super) {
    __extends(SelectionServiceImpl, _super);
    function SelectionServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SelectionServiceImpl.prototype, "serviceName", {
        get: function () {
            return "selection-service" /* Selection */;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Method to clear all the selected marks for the given worksheet.
     *
     * @param visualId
     */
    SelectionServiceImpl.prototype.clearSelectedMarksAsync = function (visualId) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'clearSelectedMarksAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ClearSelectedMarks, parameters).then(function (response) {
            return; // Expecting an empty model and hence the void response.
        });
    };
    /**
     * Method to select marks for the given worksheet.
     *
     * @param visualId
     * @param selectionCriteria
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.selectMarksByValueAsync = function (visualId, selectionCriterias, selectionUpdateType) {
        var _a;
        var _this = this;
        if (selectionCriterias.length === 0) {
            throw new TableauError_1.TableauError(Contract.ErrorCodes.InvalidParameter, 'Selection criteria missing for selecting marks by value');
        }
        var selectionType = this.validateSelectionUpdateType(selectionUpdateType);
        var selectionModelContainer = this.parseSelectionMarks(selectionCriterias);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'selectMarksByValueAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.SelectionUpdateType] = selectionType,
            _a);
        if (selectionModelContainer.hierModelArr && selectionModelContainer.hierModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.HierValSelectionModels] = selectionModelContainer.hierModelArr;
        }
        if (selectionModelContainer.quantModelArr && selectionModelContainer.quantModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.QuantRangeSelectionModels] = selectionModelContainer.quantModelArr;
        }
        if (selectionModelContainer.dimModelArr && selectionModelContainer.dimModelArr.length) {
            parameters[api_internal_contract_js_1.ParameterId.DimValSelectionModels] = selectionModelContainer.dimModelArr;
        }
        return this.execute(api_internal_contract_js_1.VerbId.SelectByValue, parameters).then(function (response) {
            _this.apiFilterHandlerCheckForCommandError(response.result);
            return;
        });
    };
    SelectionServiceImpl.prototype.apiFilterHandlerCheckForCommandError = function (serverPm) {
        if (!serverPm[api_internal_contract_js_1.ParameterId.ParameterError]) {
            return;
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidFields]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionFieldName, serverPm[api_internal_contract_js_1.ParameterId.InvalidFields]);
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidValues]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionValue, serverPm[api_internal_contract_js_1.ParameterId.InvalidValues]);
        }
        if (serverPm[api_internal_contract_js_1.ParameterId.InvalidDates]) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.InvalidSelectionDate, serverPm[api_internal_contract_js_1.ParameterId.InvalidDates]);
        }
    };
    /**
     * Method to select marks for the given worksheet.
     *
     * @param visualId
     * @param MarkInfo
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.selectMarksByIdAsync = function (visualId, marks, selectionUpdateType) {
        var _a;
        if (marks.length === 0) {
            throw new TableauError_1.TableauError(Contract.ErrorCodes.InvalidParameter, 'Marks info missing for selecting marks by Id');
        }
        var selectionType = this.validateSelectionUpdateType(selectionUpdateType);
        var selectionModelContainer = this.parseSelectionIds(marks);
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'selectMarksByIdAsync',
            _a[api_internal_contract_js_1.ParameterId.VisualId] = visualId,
            _a[api_internal_contract_js_1.ParameterId.SelectionUpdateType] = selectionType,
            _a[api_internal_contract_js_1.ParameterId.Selection] = selectionModelContainer.selection,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SelectByValue, parameters).then(function (response) {
            // Expecting an empty model and hence the void response.
            return;
            // TODO Investigate the error response with multiple output params and throw error accordingly.
        });
    };
    /**
     * Method to prepare the pres models for selection by MarksInfo
     * @param marks
     */
    SelectionServiceImpl.prototype.parseSelectionIds = function (marks) {
        var ids = [];
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        for (var i = 0; i < marks.length; i++) {
            var tupleId = marks[i].tupleId;
            if (tupleId !== undefined && tupleId !== null) {
                // If tuple id is provided use that instead of pair
                ids.push(tupleId.toString()); // collect the tuple ids
            }
            else {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'tupleId parsing error');
            }
        }
        if (ids.length !== 0) {
            // tuple ids based selection
            var tupleSelectionModel = new SelectionModels_1.TupleSelectionModel();
            tupleSelectionModel.selectionType = 'tuples';
            tupleSelectionModel.objectIds = ids;
            selectionModelContainer.selection = tupleSelectionModel;
        }
        return selectionModelContainer;
    };
    /**
     * Method to prepare the pres models for selection by values.
     *
     * Supports 3 types for selection:
     * 1) Hierarchical value based selection
     * 2) Range value based selection
     * 3) Dimension value based selection
     *
     * @param marks
     */
    SelectionServiceImpl.prototype.parseSelectionMarks = function (selectionCriterias) {
        var selectionModelContainer = new SelectionModels_1.SelectionModelsContainer();
        for (var i = 0; i < selectionCriterias.length; i++) {
            var st = selectionCriterias[i];
            if (!(st.fieldName && st.value !== undefined && st.value !== null)) {
                throw new TableauError_1.TableauError(Contract.ErrorCodes.InternalError, 'Selection Criteria parsing error');
            }
            var catRegex = new RegExp('([[A-Za-z0-9]+]).*', 'g');
            var rangeOption = st.value;
            if (catRegex.test(st.fieldName)) {
                // Hierarchical value selection
                var hierModel = this.addToParamsList(st.fieldName, st.value);
                selectionModelContainer.hierModelArr.push(hierModel);
            }
            else if (rangeOption.min !== undefined && rangeOption.max !== undefined) {
                // Range value selection
                var quantModel = this.addToRangeParamsList(st.fieldName, rangeOption);
                selectionModelContainer.quantModelArr.push(quantModel);
            }
            else {
                // Dimension value selection
                var dimModel = this.addToParamsList(st.fieldName, st.value);
                selectionModelContainer.dimModelArr.push(dimModel);
            }
        }
        return selectionModelContainer;
    };
    /**
     * Method to transform the key value pair into value based pres model object.
     *
     * @param valueSelectionModel
     * @param fieldName
     * @param value
     */
    SelectionServiceImpl.prototype.addToParamsList = function (fieldName, value) {
        var valueSelectionModel = new SelectionModels_1.ValueSelectionModel();
        var markValues = [];
        if (value instanceof Array) {
            var valueArr = value;
            for (var i = 0; i < valueArr.length; i++) {
                markValues.push(Param_1.Param.serializeParameterValue(valueArr[i]));
            }
        }
        else {
            markValues.push(Param_1.Param.serializeParameterValue(value));
        }
        valueSelectionModel.qualifiedFieldCaption = fieldName;
        valueSelectionModel.selectValues = markValues;
        return valueSelectionModel;
    };
    /**
     * Method to transform the key value pair into range based selection pres model.
     *
     * TODO: Need to handle the parsing of date type values.
     *
     * @param valueSelectionModel
     * @param fieldName
     * @param value
     */
    SelectionServiceImpl.prototype.addToRangeParamsList = function (fieldName, value) {
        var rangeSelectionModel = new SelectionModels_1.RangeSelectionModel();
        rangeSelectionModel.qualifiedFieldCaption = fieldName;
        if (value.max !== undefined && value.max !== null) {
            rangeSelectionModel.maxValue = Param_1.Param.serializeParameterValue(value.max);
        }
        if (value.min !== undefined && value.min !== null) {
            rangeSelectionModel.minValue = Param_1.Param.serializeParameterValue(value.min);
        }
        rangeSelectionModel.included = this.validateNullOptionType(value.nullOption);
        return rangeSelectionModel;
    };
    /**
     * Method to validate the selection update type.
     *
     * @param selectionUpdateType
     */
    SelectionServiceImpl.prototype.validateSelectionUpdateType = function (selectionUpdateType) {
        if (selectionUpdateType === Contract.SelectionUpdateType.Replace) {
            return api_internal_contract_js_1.SelectionUpdateType.Replace;
        }
        else if (selectionUpdateType === Contract.SelectionUpdateType.Add) {
            return api_internal_contract_js_1.SelectionUpdateType.Add;
        }
        else if (selectionUpdateType === Contract.SelectionUpdateType.Remove) {
            return api_internal_contract_js_1.SelectionUpdateType.Remove;
        }
        return api_internal_contract_js_1.SelectionUpdateType.Replace;
    };
    /**
     * Method to validate the include type for range selection.
     *
     * @param nullOption
     */
    SelectionServiceImpl.prototype.validateNullOptionType = function (nullOption) {
        if (nullOption) {
            if (nullOption === Contract.FilterNullOption.NullValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeNull;
            }
            else if (nullOption === Contract.FilterNullOption.NonNullValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeNonNull;
            }
            else if (nullOption === Contract.FilterNullOption.AllValues) {
                return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeAll;
            }
        }
        return api_internal_contract_js_1.QuantitativeIncludedValues.IncludeAll;
    };
    return SelectionServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.SelectionServiceImpl = SelectionServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js":
/*!***************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var InternalToExternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/InternalToExternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/InternalToExternalEnumMappings.js");
var TableauError_1 = __webpack_require__(/*! ../../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var EnumConverter_1 = __webpack_require__(/*! ../../Utils/EnumConverter */ "../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js");
/**
 * Each ServceImpl should extend this base class for the sake of
 * proper error handling.  This base handles the conversion
 * from internal errors to external errors that we throw to developers
 */
var ServiceImplBase = /** @class */ (function () {
    function ServiceImplBase(_dispatcher, _registryId) {
        this._dispatcher = _dispatcher;
        this._registryId = _registryId;
    }
    ServiceImplBase.prototype.execute = function (verb, params) {
        return this._dispatcher.execute(verb, params).catch(function (error) {
            // Any internal error that comes from the dispatcher should be converted
            // to an external error using the enum mapper for error codes.
            var internalError = error;
            var externalErrorCode = InternalToExternalEnumMappings_1.InternalToExternalEnumMappings.errorCode.convert(internalError.errorCode, EnumConverter_1.ShouldThrow.No);
            throw new TableauError_1.TableauError(externalErrorCode, internalError.message);
        });
    };
    return ServiceImplBase;
}());
exports.ServiceImplBase = ServiceImplBase;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/SizeServiceImpl.js":
/*!***************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/SizeServiceImpl.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var SizeServiceImpl = /** @class */ (function (_super) {
    __extends(SizeServiceImpl, _super);
    function SizeServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SizeServiceImpl.prototype, "serviceName", {
        get: function () {
            return "size-service" /* Size */;
        },
        enumerable: true,
        configurable: true
    });
    SizeServiceImpl.prototype.changeSizeAsync = function (name, newSize) {
        var _a;
        var _b, _c, _d, _e;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'changeSizeAsync',
            _a[api_internal_contract_js_1.ParameterId.SheetName] = name,
            _a[api_internal_contract_js_1.ParameterId.MinHeight] = ((_b = newSize.minSize) === null || _b === void 0 ? void 0 : _b.height) || 0,
            _a[api_internal_contract_js_1.ParameterId.MinWidth] = ((_c = newSize.minSize) === null || _c === void 0 ? void 0 : _c.width) || 0,
            _a[api_internal_contract_js_1.ParameterId.MaxHeight] = ((_d = newSize.maxSize) === null || _d === void 0 ? void 0 : _d.height) || 0,
            _a[api_internal_contract_js_1.ParameterId.MaxWidth] = ((_e = newSize.maxSize) === null || _e === void 0 ? void 0 : _e.width) || 0,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SetSheetSize, parameters).then(function (_response) {
            return;
        });
    };
    return SizeServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.SizeServiceImpl = SizeServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/StoryActivationServiceImpl.js":
/*!**************************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/StoryActivationServiceImpl.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var StoryActivationServiceImpl = /** @class */ (function (_super) {
    __extends(StoryActivationServiceImpl, _super);
    function StoryActivationServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(StoryActivationServiceImpl.prototype, "serviceName", {
        get: function () {
            return "story-activation-service" /* StoryActivation */;
        },
        enumerable: true,
        configurable: true
    });
    StoryActivationServiceImpl.prototype.activateNextStoryPointAsync = function () {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ActivateNextStoryPoint;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'activateNextStoryPointAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    StoryActivationServiceImpl.prototype.activatePreviousStoryPointAsync = function () {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ActivatePreviousStoryPoint;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'activatePreviousStoryPointAsync',
            _a);
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    StoryActivationServiceImpl.prototype.activateStoryPointAsync = function (index) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.ActivateStoryPoint;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'activateStoryPointAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.StoryPointIndex] = index;
        return this.execute(verb, parameters).then(function (response) {
            return;
        });
    };
    StoryActivationServiceImpl.prototype.revertStoryPointAsync = function (index) {
        var _a;
        var verb = api_internal_contract_js_1.VerbId.RevertStoryPoint;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'revertStoryPointAsync',
            _a);
        parameters[api_internal_contract_js_1.ParameterId.StoryPointIndex] = index;
        return this.execute(verb, parameters).then(function (response) {
            return response.result;
        });
    };
    return StoryActivationServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.StoryActivationServiceImpl = StoryActivationServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/VizServiceImpl.js":
/*!**************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/VizServiceImpl.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var CustomViewImpl_1 = __webpack_require__(/*! ../../Impl/CustomViewImpl */ "../api-shared-js/lib/src/ApiShared/Impl/CustomViewImpl.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var VizServiceImpl = /** @class */ (function (_super) {
    __extends(VizServiceImpl, _super);
    function VizServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(VizServiceImpl.prototype, "serviceName", {
        get: function () {
            return "viz-service" /* Viz */;
        },
        enumerable: true,
        configurable: true
    });
    VizServiceImpl.prototype.createVizImageAsync = function (inputSpec) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'createVizImageAsync',
            _a[api_internal_contract_js_1.ParameterId.VizAPIInputJson] = JSON.stringify(inputSpec),
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.VizAPI, parameters).then(function (response) {
            var result = response.result;
            return result;
        });
    };
    VizServiceImpl.prototype.activateSheetAsync = function (name) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'activateSheetAsync',
            _a[api_internal_contract_js_1.ParameterId.SwitchToSheetName] = name,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ActivateSheet, parameters).then(function () {
            return;
        });
    };
    VizServiceImpl.prototype.getCustomViewsAsync = function () {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getCustomViewsAsync',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetCustomViews, parameters).then(function (response) {
            var customViews = response.result;
            return customViews.map(function (customView) {
                return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
            });
        });
    };
    VizServiceImpl.prototype.showCustomViewAsync = function (customViewName) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'showCustomViewAsync',
            _a[api_internal_contract_js_1.ParameterId.CustomViewName] = customViewName,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.ShowCustomView, parameters).then(function (response) {
            var customView = response.result;
            return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
        });
    };
    VizServiceImpl.prototype.removeCustomViewAsync = function (customViewName) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'removeCustomViewAsync',
            _a[api_internal_contract_js_1.ParameterId.CustomViewName] = customViewName,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.RemoveCustomView, parameters).then(function (response) {
            var customView = response.result;
            return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
        });
    };
    VizServiceImpl.prototype.saveCustomViewAsync = function (customViewName) {
        var _a;
        var _this = this;
        // CustomViewIsDefault is a required parameter, but our API has not been updated to allow it to be specified yet.
        // We should add a 'default' parameter to the interface.
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'saveCustomViewAsync',
            _a[api_internal_contract_js_1.ParameterId.CustomViewName] = customViewName,
            _a[api_internal_contract_js_1.ParameterId.CustomViewIsDefault] = false,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SaveWorkbookAsCustomView, parameters).then(function (response) {
            var customView = response.result;
            return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
        });
    };
    VizServiceImpl.prototype.setActiveCustomViewAsDefaultAsync = function () {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'setActiveCustomViewAsDefaultAsync',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.SetActiveCustomViewAsDefault, parameters).then(function () {
            return;
        });
    };
    VizServiceImpl.prototype.saveAsync = function (customView) {
        var _a;
        var _this = this;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'saveAsync',
            _a[api_internal_contract_js_1.ParameterId.CustomViewLuid] = customView.luid,
            _a[api_internal_contract_js_1.ParameterId.CustomViewName] = customView.name,
            _a[api_internal_contract_js_1.ParameterId.CustomViewIsDefault] = customView.isDefault,
            _a[api_internal_contract_js_1.ParameterId.CustomViewIsPublic] = customView.shared,
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.UpdateCustomView, parameters).then(function (response) {
            var customView = response.result;
            return new CustomViewImpl_1.CustomViewImpl(customView, _this._registryId);
        });
    };
    VizServiceImpl.prototype.getCurrentSrcAsync = function () {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'getCurrentSrcAsync',
            _a);
        return this.execute(api_internal_contract_js_1.VerbId.GetCurrentSrc, parameters).then(function (response) { return response.result; });
    };
    return VizServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.VizServiceImpl = VizServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Services/impl/ZoneServiceImpl.js":
/*!***************************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Services/impl/ZoneServiceImpl.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var ExternalToInternalEnumMappings_1 = __webpack_require__(/*! ../../EnumMappings/ExternalToInternalEnumMappings */ "../api-shared-js/lib/src/ApiShared/EnumMappings/ExternalToInternalEnumMappings.js");
var ErrorHelpers_1 = __webpack_require__(/*! ../../Utils/ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Param_1 = __webpack_require__(/*! ../../Utils/Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
var ServiceImplBase_1 = __webpack_require__(/*! ./ServiceImplBase */ "../api-shared-js/lib/src/ApiShared/Services/impl/ServiceImplBase.js");
var ZoneServiceImpl = /** @class */ (function (_super) {
    __extends(ZoneServiceImpl, _super);
    function ZoneServiceImpl() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ZoneServiceImpl.prototype, "serviceName", {
        get: function () {
            return "zone-service" /* Zone */;
        },
        enumerable: true,
        configurable: true
    });
    ZoneServiceImpl.prototype.setVisibilityAsync = function (dashboard, dashboardZoneMap, zoneVisibilityMap) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.FunctionName] = 'setVisibilityAsync',
            _a[api_internal_contract_js_1.ParameterId.Dashboard] = dashboard,
            _a[api_internal_contract_js_1.ParameterId.ZoneIdsVisibilityMap] = {},
            _a);
        // zoneVisibilityMap can be either an object or a Map - convert it to a Map
        var parameterAsMap = Param_1.Param.convertParameterToMap(zoneVisibilityMap, 'zoneVisibilityMap');
        parameterAsMap.forEach(function (value, key) {
            ErrorHelpers_1.ErrorHelpers.verifyZoneIsValid(dashboardZoneMap, Number.parseInt(key, 10));
            ErrorHelpers_1.ErrorHelpers.verifyEnumValue(value, api_external_contract_js_1.DashboardObjectVisibilityType, 'DashboardObjectVisibilityType');
            parameters[api_internal_contract_js_1.ParameterId.ZoneIdsVisibilityMap][key] = ExternalToInternalEnumMappings_1.ExternalToInternalEnumMappings.setVisibilityType.convert(value);
        });
        return this.execute(api_internal_contract_js_1.VerbId.SetZoneVisibility, parameters).then(function (response) {
            return;
        });
    };
    ZoneServiceImpl.prototype.moveAndResizeAsync = function (dashboard, dashboardZoneMap, dashboardObjectPositionAndSizeUpdateArray) {
        var _a;
        var parameters = (_a = {},
            _a[api_internal_contract_js_1.ParameterId.Dashboard] = dashboard,
            _a[api_internal_contract_js_1.ParameterId.DashboardObjectPositionAndSizeUpdateList] = dashboardObjectPositionAndSizeUpdateArray,
            _a);
        dashboardObjectPositionAndSizeUpdateArray.forEach(function (dashboardObject) {
            ErrorHelpers_1.ErrorHelpers.verifyZoneIsValidAndFloating(dashboardZoneMap, dashboardObject.dashboardObjectID);
            ErrorHelpers_1.ErrorHelpers.verifyWidthAndHeightOfDashboardObjectPositionAndSizeUpdate(dashboardObject);
        });
        return this.execute(api_internal_contract_js_1.VerbId.MoveAndResizeZones, parameters).then(function (response) {
            return;
        });
    };
    return ZoneServiceImpl;
}(ServiceImplBase_1.ServiceImplBase));
exports.ZoneServiceImpl = ZoneServiceImpl;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/TableSummary.js":
/*!**********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/TableSummary.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Implementation of a table summary.
 * This does not follow the Impl pattern as it is just a property bag.
 */
var TableSummary = /** @class */ (function () {
    function TableSummary(_tableInfo) {
        this._tableInfo = _tableInfo;
    }
    Object.defineProperty(TableSummary.prototype, "name", {
        get: function () {
            return this._tableInfo.name;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSummary.prototype, "id", {
        get: function () {
            return this._tableInfo.id;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSummary.prototype, "connectionId", {
        get: function () {
            return this._tableInfo.connectionId;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TableSummary.prototype, "customSQL", {
        get: function () {
            return this._tableInfo.customSQL;
        },
        enumerable: true,
        configurable: true
    });
    return TableSummary;
}());
exports.TableSummary = TableSummary;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/TableauError.js":
/*!**********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/TableauError.js ***!
  \**********************************************************/
/***/ (function(__unused_webpack_module, exports) {


var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * Custom error class that extends the default JavaScript Error object.
 * This allows us to provide a field with a specific error code
 * so that developers can more easily programmatically respond
 * to error scenarios.
 */
var TableauError = /** @class */ (function (_super) {
    __extends(TableauError, _super);
    function TableauError(_errorCode, message) {
        var _this = _super.call(this, _errorCode + ": " + message) || this;
        _this._errorCode = _errorCode;
        /*tslint:disable-next-line */
        // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work
        // Error inheritance does not work propertly when compiling to ES5, this is a workaround to force
        // the proto chain to be built correctly.  See the github link above for details.
        Object.setPrototypeOf(_this, TableauError.prototype);
        return _this;
    }
    Object.defineProperty(TableauError.prototype, "errorCode", {
        get: function () {
            return this._errorCode;
        },
        enumerable: true,
        configurable: true
    });
    return TableauError;
}(Error));
exports.TableauError = TableauError;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js":
/*!********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/DataValueFactory.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var InternalContract = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var GetDataModels_1 = __webpack_require__(/*! ../Models/GetDataModels */ "../api-shared-js/lib/src/ApiShared/Models/GetDataModels.js");
/**
 * In version 2 of the interface, we should collapse value into nativeValue, and do all this work over
 * in the platform.
 */
var DataValueFactory = /** @class */ (function () {
    function DataValueFactory() {
    }
    DataValueFactory.MakeParameterDataValue = function (internalDataValue, dataType) {
        // Parameter values are all strings, convert from string to value
        return new GetDataModels_1.DataValue(internalDataValue.value, InternalContract.DataTypeConverter.convertStringValueToNativeValue(internalDataValue.value, dataType), internalDataValue.formattedValue);
    };
    DataValueFactory.MakeFilterDataValue = function (internalDataValue) {
        // Filters already have native type in value, just use that for nativeValue also
        return new GetDataModels_1.DataValue(internalDataValue.value, internalDataValue.value, internalDataValue.formattedValue);
    };
    DataValueFactory.MakeTableDataValue = function (internalDataValue, dataType) {
        // DataTables contain boolean | number | string | date as string | '%null%
        // convertValueToNativeValue converts dates as string to dates, and any special to null
        // (boolean, numbers, strings are passed through)
        // Because of IncludeDataValuesOption - we can have undefined values, which are different than any special
        return new GetDataModels_1.DataValue(internalDataValue.value, internalDataValue.value !== undefined
            ? InternalContract.DataTypeConverter.convertValueToNativeValue(internalDataValue.value, dataType)
            : undefined, internalDataValue.formattedValue);
    };
    return DataValueFactory;
}());
exports.DataValueFactory = DataValueFactory;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/Deferred.js":
/*!************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/Deferred.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
/**
 * A Promise wrapper class allowing for resolving/rejecting the Promise outside the context of its constructor.
 *
 * @export
 * @class Deferred
 * @template TResolve The type used to resolve the promise.
 * @template TReject The type used to reject the promise. Defaults to any.
 * @link https://stackoverflow.com/a/34637436
 */
var Deferred = /** @class */ (function () {
    /**
     * Creates an instance of Deferred.
     */
    function Deferred() {
        var _this = this;
        this._promise = new Promise(function (resolve, reject) {
            _this._resolve = resolve;
            _this._reject = reject;
        });
    }
    Object.defineProperty(Deferred.prototype, "promise", {
        /**
         * Gets the Promise.
         *
         * @readonly
         * @type {Promise<TResolve>}
         */
        get: function () {
            return this._promise;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resolves the wrapped Promise.
     *
     * @param {(TResolve | PromiseLike<TResolve>)} response The argument to be resolved by the Promise.
     * @returns {*}  {void}
     */
    Deferred.prototype.resolve = function (response) {
        if (!this._resolve) {
            return;
        }
        this._resolve(response);
    };
    /**
     *
     *
     * @param {TReject} [reason] The reason why the Promise rejected.
     * @returns {*}  {void}
     */
    Deferred.prototype.reject = function (reason) {
        if (!this._reject) {
            return;
        }
        this._reject(reason);
    };
    return Deferred;
}());
exports.Deferred = Deferred;
exports.UnregisterTimeoutInMilliseconds = 30000;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/EnumConverter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
/**
 * This class converts from a source enum value to destination enum
 * value given a mapping from source to destination when constructed.
 *
 * Note: This exact same class is defined in api-core.  Given its small
 * nature, it is not worth having in a separate project to share this between
 * api-core and api-shared.  If more utility functionality is added that is used by api-core
 * and api-shared but has no other dependecies, a utiltity project might be merited,
 * and this class could be moved.
 */
var EnumConverter = /** @class */ (function () {
    function EnumConverter(_mappings, _defaultVal) {
        this._mappings = _mappings;
        this._defaultVal = _defaultVal;
    }
    EnumConverter.prototype.convert = function (enumVal, throwIfMissing) {
        if (throwIfMissing === void 0) { throwIfMissing = ShouldThrow.Yes; }
        if (this._mappings.hasOwnProperty(enumVal)) {
            return this._mappings[enumVal];
        }
        if (this._defaultVal !== undefined && throwIfMissing !== ShouldThrow.Yes) {
            return this._defaultVal;
        }
        throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Enum Mapping not found for: " + enumVal);
    };
    return EnumConverter;
}());
exports.EnumConverter = EnumConverter;
var ShouldThrow;
(function (ShouldThrow) {
    ShouldThrow["Yes"] = "yes";
    ShouldThrow["No"] = "no";
})(ShouldThrow = exports.ShouldThrow || (exports.ShouldThrow = {}));


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js":
/*!****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var Param_1 = __webpack_require__(/*! ./Param */ "../api-shared-js/lib/src/ApiShared/Utils/Param.js");
/**
 * This class is used to construct common errors throughout the external
 * projects (api-shared, extensions-api, etc.).  It has some duplication with
 * the ErrorHelpers class in api-core, but is separate due to the need to throw
 * an external TableauError vs. an InternalTableauError.
 */
var ErrorHelpers = /** @class */ (function () {
    function ErrorHelpers() {
    }
    /**
     * Throws with code InternalError.
     *
     * @param apiName name of api that was called.
     */
    ErrorHelpers.apiNotImplemented = function (apiName) {
        return new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, apiName + " API not yet implemented.");
    };
    /**
     * Throws an internal error if argument is null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyInternalValue = function (argumentValue, argumentName) {
        if (argumentValue === null || argumentValue === undefined) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, argumentValue + " is invalid value for: " + argumentName);
        }
    };
    /**
     * Throws an InvalidParameter error if argument is null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyParameter = function (argumentValue, argumentName) {
        if (argumentValue === null || argumentValue === undefined) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, argumentValue + " is invalid value for parameter: " + argumentName);
        }
    };
    /**
     * Throws an InvalidParameter error if argument is not the specified type.
     * For objects, it just tests that it is an object
     *
     * @param argumentValue value to verify
     * @param expectedType expected result of typeof
     * @param argumentName name of argument to verify
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyParameterType = function (argumentValue, expectedType, argumentName) {
        if (typeof argumentValue !== expectedType) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, argumentValue + " has invalid type for parameter: " + argumentName + ".");
        }
    };
    /**
     * Throws an InvalidParameter error if argument is empty string, null or undefined.
     *
     * @param argumentValue value to verify
     * @param argumentName name of argument to verify
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyStringParameter = function (argumentValue, argumentName) {
        if (argumentValue === null || argumentValue === undefined || argumentValue === '') {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, argumentValue + " is invalid value for paramter: " + argumentName);
        }
    };
    /**
     * Verifies passed value is a valid value for that enum.
     * Throws an InvalidParameter error if the enum value is not valid.
     *
     * String enums are {string : string} dictionaries which are not reverse mappable
     * This is an ugly workaround
     *
     * @param enumValue value to verify
     * @param enumType enum to verify against
     * @param enumName enum name for clear error message
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyEnumValue = function (enumValue, enumType, enumName) {
        var isValid = false;
        Object.keys(enumType).forEach(function (enumKey) {
            if (enumType[enumKey] === enumValue.toString()) {
                isValid = true;
            }
        });
        if (!isValid) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, enumValue + " is invalid value for enum: " + enumName + ".");
        }
    };
    /**
     * Verifies passed value is between [min, max) ... min <= value < max
     * Throws an InvalidParameter error if the value is not valid.
     *
     *
     * @param value value to verify
     * @param min   value must be >= min
     * @param max   value must be < max
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyRange = function (value, min, max) {
        var isValid = min <= value && value < max;
        if (!isValid) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, value + " is invalid value for range: [" + min + ".." + max + ")");
        }
    };
    /**
     * Verifies the params min and max for applying range filter.
     * Throws with error code InvalidParameter if range is invalid.
     *
     * @param min range min
     * @param max range max
     */
    /*tslint:disable-next-line */
    ErrorHelpers.verifyRangeParamType = function (min, max) {
        if (!min && !max) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, at least one of min or max is required.');
        }
        if (min && !Param_1.Param.isTypeNumber(min) && !Param_1.Param.isTypeDate(min)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, only Date and number are allowed for parameter min.');
        }
        if (max && !Param_1.Param.isTypeNumber(max) && !Param_1.Param.isTypeDate(max)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, only Date and number are allowed for parameter max.');
        }
        if (min && max && typeof min !== typeof max) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'Unexpected invalid param value, parameters min and max should be of the same type.');
        }
    };
    /**
     * Verifies that the zoneId is present in the current dashboard.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardZoneMap A map of zoneId's to the corresponding dashboard object.
     * @param zoneID ZoneId to be validated
     */
    ErrorHelpers.verifyZoneIsValid = function (dashboardZoneMap, zoneID) {
        if (dashboardZoneMap.has(zoneID)) {
            return;
        }
        throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, "Unexpected invalid param value, Dashboard Object Id: " + zoneID + " is not present in dashboard.");
    };
    /**
     * Verifies that the zone is present and floating in the current dashboard.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardZoneMap A map of zoneId's to the corresponding dashboard object.
     * @param zoneID ZoneId to be validated
     */
    ErrorHelpers.verifyZoneIsValidAndFloating = function (dashboardZoneMap, zoneID) {
        if (dashboardZoneMap.has(zoneID) && dashboardZoneMap.get(zoneID).isFloating) {
            return;
        }
        throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, "Unexpected invalid param value, Dashboard Object Id: " + zoneID + " is not present or is a fixed zone in the dashboard.");
    };
    /**
     * Verifies that width and height are > 0 for each DashboardObjectPositionAndSizeUpdate object.
     * Throws with error code InvalidParameter if either condition is false.
     *
     * @param dashboardObjectPositionAndSizeUpdate DashboardObjectPositionAndSizeUpdate object for which width and height will be validated
     */
    ErrorHelpers.verifyWidthAndHeightOfDashboardObjectPositionAndSizeUpdate = function (dashboardObjectPositionAndSizeUpdate) {
        if (dashboardObjectPositionAndSizeUpdate.width < 0 || dashboardObjectPositionAndSizeUpdate.height < 0) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, "Unexpected invalid param value for dashboard object ID " + dashboardObjectPositionAndSizeUpdate.dashboardObjectID + ":" +
                " negative widths and heights are not allowed.");
        }
    };
    /**
     * Verifies is the given sheet name is in the list of sheets names allowed for exporting.
     * Throws with error code InvalidParameter if the condition above is false.
     *
     * @param exportableSheetNames A list of sheet names allowed for exporting
     * @param sheetName the name of the sheet selected for export
     */
    ErrorHelpers.verifySheetName = function (exportableSheetNames, sheetName) {
        if (!exportableSheetNames.includes(sheetName)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidSelectionSheet, 'sheetName parameter must belong to a worksheet within the current view');
        }
    };
    /**
     * Verifies the ExportDataOptions object
     * Throws with error code InvalidParameter if the parameter is not of ExportDataOptions type.
     *
     * @param options The ExportDataOptions object used to configure the output CSV file for exportDataAsync.
     */
    ErrorHelpers.verifyExportDataOptions = function (options) {
        if ((!Param_1.Param.isNullOrUndefined(options.ignoreAliases) && !Param_1.Param.isTypeBool(options.ignoreAliases)) ||
            (!Param_1.Param.isNullOrUndefined(options.columnsToIncludeById) && !Array.isArray(options.columnsToIncludeById)))
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'options paramater must be of type ExportDataOptions');
    };
    /**
     * Verifies if the sheet names are included in any of the export scenarios.
     * Throws with error code InvalidParameter if the parameter is not an array.
     * Throws with error code InvalidSelectionSheet if there are array entries that dont exist or if there is mixing between sheets from the dashboard and sheet from the workbook.
     *
     * @param sheetNames List of sheet names selected for exporting.
     * @param exportScenarios an object containing the current sheet name, exportable sheets from the dashboard, and exportable sheets from the workbook.
     */
    ErrorHelpers.verifySheetNamesForPDFAndPPT = function (sheetNames, exportScenarios) {
        if (!Array.isArray(sheetNames))
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'sheetNames parameter must be an array');
        if (sheetNames.length === 0)
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'sheetNames should not be empty');
        var isIncludedInDashboard = sheetNames.every(function (sheetName) {
            return exportScenarios.exportableSheetNamesFromDashboard.includes(sheetName);
        });
        if (isIncludedInDashboard) {
            return;
        }
        var isIncludedInWorkbook = sheetNames.every(function (sheetName) {
            return exportScenarios.exportableSheetNamesFromWorkbook.includes(sheetName);
        });
        if (isIncludedInWorkbook) {
            return;
        }
        var isCurrentSheet = sheetNames.length === 1 && sheetNames[0] === exportScenarios.currentSheetName;
        if (isCurrentSheet) {
            return;
        }
        // Export requirement: all sheet names must be included in the list of exportable sheets in the dashboard or
        // all sheet names must be included in the list of exportable sheets in the workbook, or the sheet name is the current sheet
        throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidSelectionSheet, 'sheetNames parameter must have all its entries be exportable sheet names from the dashboard or all its entries be exportable sheet names from the workbook');
    };
    /**
     * Verifies the external ExportPDFOptions object's properties.
     * Throws with error code InvalidParameter if the parameter is not of external ExportPDFOptions type.
     *
     * @param options The external user-facing ExportPDFOptions object used to configure the output PDF file for exportPDFAsync.
     */
    ErrorHelpers.verifyExportPDFOptions = function (options) {
        try {
            this.verifyEnumValue(options.orientation, api_external_contract_js_1.PrintOrientation, 'PrintOrientation');
            this.verifyEnumValue(options.pageSize, api_external_contract_js_1.PrintPageSize, 'PrintPageSize');
            this.verifyEnumValue(options.scaling, api_external_contract_js_1.PrintScaling, 'PrintScaling');
        }
        catch (_a) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InvalidParameter, 'options parameter must be of type ExportPDFOptions');
        }
    };
    return ErrorHelpers;
}());
exports.ErrorHelpers = ErrorHelpers;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/ExportHelpers.js":
/*!*****************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/ExportHelpers.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
/**
 * Helper methods for Export APIs.
 *
 * @class ExportHelpers
 */
var ExportHelpers = /** @class */ (function () {
    function ExportHelpers() {
    }
    /**
     * Modifies the internal ExportPDFOptions' properties based on the given PDF export configuration.
     * This method will construct the internal ExportPDFOptions identically to how the 'Export PDF' dialog constructs the ExportPdfOptionsPresModel.
     * See the handleExportClick method in @browser-clients/export-pdf-options-dialog for reference.
     *
     * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.
     * @param externalExportPdfOptions The external ExportPDFOptions user-facing object passed to exportPDFAsync.
     * @param sheetNames The list of sheets selected for export.
     */
    ExportHelpers.updateInternalExportPDFOptions = function (internalExportPdfOptions, externalExportPdfOptions, sheetNames) {
        internalExportPdfOptions.currentSheet = sheetNames[0];
        this.updateExportLayoutOptions(internalExportPdfOptions, externalExportPdfOptions);
        this.updateSheetOptions(internalExportPdfOptions, sheetNames);
    };
    /**
     * Helper method for updateInternalExportPDFOptions.
     * Modifies the exportLayoutOptions property of the internal ExportPDFOptions based on the external ExportPDFOptions.
     * See the getExportLayoutOptions method in @browser-clients/export-pdf-options-dialog for reference.
     *
     * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.
     * @param externalExportPdfOptions The external ExportPDFOptions user-facing object passed to exportPDFAsync.
     */
    ExportHelpers.updateExportLayoutOptions = function (internalExportPdfOptions, externalExportPdfOptions) {
        var exportLayoutOptions = internalExportPdfOptions.exportLayoutOptions;
        // setting the image height and width properties to their default values
        exportLayoutOptions.imageHeight = this.DefaultLayoutOptions.imageHeight;
        exportLayoutOptions.imageWidth = this.DefaultLayoutOptions.imageWidth;
        //  setting the orientation value for the exportLayoutOptions
        switch (externalExportPdfOptions.orientation) {
            case api_external_contract_js_1.PrintOrientation.Landscape:
                exportLayoutOptions.pageOrientationOption = api_internal_contract_js_1.PageOrientation.Landscape;
                break;
            case api_external_contract_js_1.PrintOrientation.Portrait:
                exportLayoutOptions.pageOrientationOption = api_internal_contract_js_1.PageOrientation.Portrait;
                break;
            default:
                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'invalid orientation for ExportPDFOption');
        }
        // setting the page size value for the exportLayoutOptions
        switch (externalExportPdfOptions.pageSize) {
            case api_external_contract_js_1.PrintPageSize.A3:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.A3;
                break;
            case api_external_contract_js_1.PrintPageSize.A4:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.A4;
                break;
            case api_external_contract_js_1.PrintPageSize.A5:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.A5;
                break;
            case api_external_contract_js_1.PrintPageSize.B4:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.B4;
                break;
            case api_external_contract_js_1.PrintPageSize.B5:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.B5;
                break;
            case api_external_contract_js_1.PrintPageSize.Executive:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Executive;
                break;
            case api_external_contract_js_1.PrintPageSize.Folio:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Folio;
                break;
            case api_external_contract_js_1.PrintPageSize.Ledger:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Ledger;
                break;
            case api_external_contract_js_1.PrintPageSize.Legal:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Legal;
                break;
            case api_external_contract_js_1.PrintPageSize.Letter:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Letter;
                break;
            case api_external_contract_js_1.PrintPageSize.Note:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Note;
                break;
            case api_external_contract_js_1.PrintPageSize.Quarto:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Quarto;
                break;
            case api_external_contract_js_1.PrintPageSize.Statement:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Statement;
                break;
            case api_external_contract_js_1.PrintPageSize.Tabloid:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Tabloid;
                break;
            case api_external_contract_js_1.PrintPageSize.Unspecified:
                exportLayoutOptions.pageSizeOption = api_internal_contract_js_1.PageSizeOption.Unspecified;
                break;
            default:
                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'invalid pageSize for ExportPDFOption');
        }
        // setting the scaling values for the exportLayoutOptions
        switch (externalExportPdfOptions.scaling) {
            case api_external_contract_js_1.PrintScaling.AtMost1PageHigh:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.FitPages.FitOneHigh);
                break;
            case api_external_contract_js_1.PrintScaling.AtMost1PageWide:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.FitPages.FitOneWide);
                break;
            case api_external_contract_js_1.PrintScaling.AtMost2PagesHigh:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.FitPages.FitTwoHigh);
                break;
            case api_external_contract_js_1.PrintScaling.AtMost2PagesWide:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.FitPages.FitTwoWide);
                break;
            case api_external_contract_js_1.PrintScaling.Automatic:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePctAuto);
                break;
            case api_external_contract_js_1.PrintScaling.Perc100:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct100);
                break;
            case api_external_contract_js_1.PrintScaling.Perc200:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct200);
                break;
            case api_external_contract_js_1.PrintScaling.Perc25:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct25);
                break;
            case api_external_contract_js_1.PrintScaling.Perc400:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct400);
                break;
            case api_external_contract_js_1.PrintScaling.Perc50:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct50);
                break;
            case api_external_contract_js_1.PrintScaling.Perc60:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct60);
                break;
            case api_external_contract_js_1.PrintScaling.Perc75:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct75);
                break;
            case api_external_contract_js_1.PrintScaling.Perc80:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct80);
                break;
            case api_external_contract_js_1.PrintScaling.Perc90:
                this.setFitAndScaleValues(exportLayoutOptions, api_internal_contract_js_1.PageScalingOption.ScalePct90);
                break;
            default:
                throw new TableauError_1.TableauError(api_external_contract_js_1.SharedErrorCodes.InternalError, 'invalid scaling for ExportPDFOption');
        }
    };
    /**
     * Helper method for updateInternalExportPDFOptions.
     * Modifies the sheetOptions property of the internal ExportPDFOptions based on the sheets selected for export.
     * See the handleExportClick method in @browser-clients/export-pdf-options-dialog for reference.
     *
     * @param internalExportPdfOptions The internal ExportPDFOptions pres model used to configure the output PDF file.
     * @param sheetNames The list of sheets selected for export.
     */
    ExportHelpers.updateSheetOptions = function (internalExportPdfOptions, sheetNames) {
        var exportLayoutOptions = internalExportPdfOptions.exportLayoutOptions, sheetOptions = internalExportPdfOptions.sheetOptions;
        // updating the export layouts options for each sheet and selecting sheet for export if included in list
        for (var _i = 0, sheetOptions_1 = sheetOptions; _i < sheetOptions_1.length; _i++) {
            var sheetOption = sheetOptions_1[_i];
            sheetOption.exportLayoutOptions = exportLayoutOptions;
            sheetOption.isSelected = sheetNames.includes(sheetOption.sheet);
        }
    };
    /**
     * Helper method for updateExportLayoutOptons.
     * This method is a spoof of the getFitAndScaleValues method used in @browser-clients/export-pdf-options to set the exportLayoutOptions' scaling properties.
     * In the future, this file should be refactored to import the method directly from @browser-clients/export-pdf-options.
     *
     * @param scalingSelection string used for setting the exportLayoutOptions based on the PrintScaling property from the ExternalExportPDFOptions.
     * @param exportLayoutOptions the ExportLayoutOptions used by the internal ExportPDFOptions pres model.
     */
    ExportHelpers.setFitAndScaleValues = function (exportLayoutOptions, scalingSelection) {
        var _a;
        var _b = this.DefaultLayoutOptions, pageFitHorizontal = _b.pageFitHorizontal, pageFitVertical = _b.pageFitVertical, pageScaleMode = _b.pageScaleMode, pageScalePercent = _b.pageScalePercent;
        var fitMatch = this.fitRegex.exec(scalingSelection);
        var percentMatch = this.pctRegex.exec(scalingSelection);
        if (fitMatch) {
            _a = fitMatch.slice(1).map(function (value) { return Number(value); }), pageFitHorizontal = _a[0], pageFitVertical = _a[1];
            pageScaleMode = api_internal_contract_js_1.ScaleMode.ScaleFitPages;
        }
        else if (percentMatch) {
            pageScalePercent = percentMatch.slice(1).map(function (value) { return Number(value); })[0];
            pageScaleMode = api_internal_contract_js_1.ScaleMode.ScalePercentage;
        }
        // getFitAndScaleValues returns the properties below, but instead this method will set them.
        exportLayoutOptions.pageFitHorizontal = pageFitHorizontal;
        exportLayoutOptions.pageFitVertical = pageFitVertical;
        exportLayoutOptions.pageScaleMode = pageScaleMode;
        exportLayoutOptions.pageScalePercent = pageScalePercent;
    };
    ExportHelpers.DefaultDataOptions = {
        ignoreAliases: false,
        columnsToIncludeById: [],
    };
    ExportHelpers.DefaultPDFOptions = {
        scaling: api_external_contract_js_1.PrintScaling.Automatic,
        pageSize: api_external_contract_js_1.PrintPageSize.Letter,
        orientation: api_external_contract_js_1.PrintOrientation.Portrait,
    };
    ExportHelpers.DefaultLayoutOptions = {
        imageHeight: 0,
        imageWidth: 0,
        pageFitHorizontal: 1,
        pageFitVertical: 1,
        pageOrientationOption: api_internal_contract_js_1.PageOrientation.Portrait,
        pageScaleMode: api_internal_contract_js_1.ScaleMode.ScaleAuto,
        pageScalePercent: 100,
        pageSizeOption: api_internal_contract_js_1.PageSizeOption.Letter,
    };
    ExportHelpers.fitRegex = new RegExp('fit([0-9]+)x([0-9]+)');
    ExportHelpers.pctRegex = new RegExp('pct([0-9]+)');
    return ExportHelpers;
}());
exports.ExportHelpers = ExportHelpers;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/Param.js":
/*!*********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/Param.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var ErrorHelpers_1 = __webpack_require__(/*! ./ErrorHelpers */ "../api-shared-js/lib/src/ApiShared/Utils/ErrorHelpers.js");
var Param = /** @class */ (function () {
    function Param() {
    }
    /**
     * serializes the date into the format that the server expects.
     * @param date the date to serialize
     */
    Param.serializeDateForPlatform = function (date) {
        var year = date.getUTCFullYear();
        var month = date.getUTCMonth() + 1;
        var day = date.getUTCDate();
        var hh = date.getUTCHours();
        var mm = date.getUTCMinutes();
        var sec = date.getUTCSeconds();
        return year + "-" + month + "-" + day + " " + hh + ":" + mm + ":" + sec;
    };
    Param.serializeBooleanForPlatform = function (bool) {
        return bool ? 'true' : 'false';
    };
    Param.serializeNumberForPlatform = function (num) {
        return num.toString(10);
    };
    /**
     * Verifies the input is a number
     */
    /* tslint:disable-next-line:no-any */
    Param.isTypeNumber = function (input) {
        return typeof input === 'number' || input instanceof Number;
    };
    /**
     * Verifies the input is a Date
     */
    /* tslint:disable-next-line:no-any */
    Param.isTypeDate = function (input) {
        return input instanceof Date;
    };
    /* tslint:disable-next-line:no-any */
    Param.isTypeString = function (input) {
        return typeof input === 'string' || input instanceof String;
    };
    /* tslint:disable-next-line:no-any */
    Param.isTypeBool = function (input) {
        return typeof input === 'boolean' || input instanceof Boolean;
    };
    /**
     * Determines if the input is null or undefined
     */
    /* tslint:disable-next-line:no-any */
    Param.isNullOrUndefined = function (input) {
        return input === null || input === undefined;
    };
    /* tslint:disable-next-line:no-any */
    Param.serializeParameterValue = function (value) {
        if (Param.isTypeNumber(value)) {
            return Param.serializeNumberForPlatform(value);
        }
        else if (Param.isTypeDate(value)) {
            return Param.serializeDateForPlatform(value);
        }
        else if (Param.isTypeBool(value)) {
            return Param.serializeBooleanForPlatform(value);
        }
        else if (Param.isTypeString(value)) {
            return value;
        }
        else {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Unexpected invalid value for: " + value);
        }
    };
    /**
     * Verifies that the parameter is already a Map, or converts an object to a Map.
     * If the parameter is an object, we convert it to a Map using Object.entries.
     * @throws if the parameter is not an object or Map
     */
    // tslint:disable-next-line:no-any
    Param.convertParameterToMap = function (param, paramName) {
        ErrorHelpers_1.ErrorHelpers.verifyParameterType(param, 'object', paramName);
        if (Array.isArray(param)) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InvalidParameter, "Expecting object or Map for: " + paramName + ".");
        }
        return param instanceof Map ? param : new Map(Object.entries(param));
    };
    /* tslint:disable-next-line:no-any */
    Param.tryParseNumber = function (value) {
        if (Param.isNullOrUndefined(value)) {
            return { success: false };
        }
        if (Param.isTypeNumber(value)) {
            return { parsed: value, success: true };
        }
        var valueString = value.toString();
        if (valueString === 'NaN') {
            // 'NaN' parses as NaN which is indistinguishable from a failed parse.
            return { parsed: NaN, success: true };
        }
        var parsed = parseFloat(valueString);
        if (isNaN(parsed)) {
            return { success: false };
        }
        return { parsed: parsed, success: true };
    };
    return Param;
}());
exports.Param = Param;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js":
/*!**************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/SheetUtils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var SheetUtils = /** @class */ (function () {
    function SheetUtils() {
    }
    // This is a direct port from SheetSize.cs - SheetSizeFactory
    SheetUtils.getSheetSizeFromSizeConstraints = function (sizeConstraint) {
        var minWidth = sizeConstraint.minWidth, minHeight = sizeConstraint.minHeight, maxWidth = sizeConstraint.maxWidth, maxHeight = sizeConstraint.maxHeight;
        if (minHeight === 0 && minWidth === 0) {
            if (maxHeight === 0 && maxWidth === 0) {
                return {
                    behavior: Contract.SheetSizeBehavior.Automatic,
                };
            }
            return {
                behavior: Contract.SheetSizeBehavior.AtMost,
                maxSize: { width: maxWidth, height: maxHeight },
            };
        }
        if (maxHeight === 0 && maxWidth === 0) {
            return {
                behavior: Contract.SheetSizeBehavior.AtLeast,
                minSize: { width: minWidth, height: minHeight },
            };
        }
        if (maxHeight === minHeight && maxWidth === minWidth && minWidth > 0) {
            return {
                behavior: Contract.SheetSizeBehavior.Exactly,
                minSize: { width: minWidth, height: minHeight },
                maxSize: { width: minWidth, height: minHeight },
            };
        }
        // 'Fit Width' for a DSD layout
        var isDsdLayout = minWidth === 0 && maxWidth === 0;
        return {
            behavior: Contract.SheetSizeBehavior.Range,
            minSize: { width: minWidth, height: minHeight },
            maxSize: { width: isDsdLayout ? 2147483647 : maxWidth, height: maxHeight },
        };
    };
    SheetUtils.createAutomaticSize = function () {
        var behavior = Contract.SheetSizeBehavior.Automatic;
        var minSize = { width: 0, height: 0 };
        var maxSize = { width: 0, height: 0 };
        return { behavior: behavior, minSize: minSize, maxSize: maxSize };
    };
    SheetUtils.getPublishedSheetInfoByName = function (name, sheetInfos) {
        var sheetInfo = sheetInfos.find(function (sheet) { return sheet.name === name; });
        return sheetInfo;
    };
    SheetUtils.getSheetTypeEnum = function (internalSheetType) {
        var sheetType;
        switch (internalSheetType) {
            case api_internal_contract_js_1.SheetType.Worksheet: {
                sheetType = Contract.SheetType.Worksheet;
                break;
            }
            case api_internal_contract_js_1.SheetType.Dashboard: {
                sheetType = Contract.SheetType.Dashboard;
                break;
            }
            case api_internal_contract_js_1.SheetType.Story: {
                sheetType = Contract.SheetType.Story;
                break;
            }
            default: {
                throw new TableauError_1.TableauError(Contract.SharedErrorCodes.ServerError, 'Invalid SheetType');
            }
        }
        return sheetType;
    };
    SheetUtils.isValidSheetSize = function (sizeObject) {
        return sizeObject.behavior !== undefined;
    };
    return SheetUtils;
}());
exports.SheetUtils = SheetUtils;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/Utils/ShortLivedDeferred.js":
/*!**********************************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/Utils/ShortLivedDeferred.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var Contract = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ../TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
var Deferred_1 = __webpack_require__(/*! ./Deferred */ "../api-shared-js/lib/src/ApiShared/Utils/Deferred.js");
/**
 * A Deferred wrapper class adding functionality to reject unresponsive promises after timeout
 *
 * this class handles two things:

 *    1. Adds timeout logic for deferred
 *    2. It blocks multiple calls from executing at the same time.
 *
 * @export
 * @class ShortLivedDeferred
 * @template TResolve The type used to resolve the promise.
 * @template TReject The type used to reject the promise. Defaults to any.
 *
 */
var ShortLivedDeferred = /** @class */ (function () {
    function ShortLivedDeferred(_timeoutInMilliseconds) {
        if (_timeoutInMilliseconds === void 0) { _timeoutInMilliseconds = Deferred_1.UnregisterTimeoutInMilliseconds; }
        this._timeoutInMilliseconds = _timeoutInMilliseconds;
    }
    ShortLivedDeferred.prototype.getNewPromiseOrThrowIfBusy = function () {
        var _this = this;
        if (this._deferred) {
            throw new TableauError_1.TableauError(Contract.SharedErrorCodes.ApiExecutionError, 'This api cannot be executed till previous call is resolved.');
        }
        this._deferred = new Deferred_1.Deferred();
        this._timeoutId = setTimeout(function () {
            var error = new TableauError_1.TableauError(Contract.SharedErrorCodes.Timeout, "Api failed to complete in " + _this._timeoutInMilliseconds / 1000 + " seconds");
            _this.reject(error);
        }, this._timeoutInMilliseconds);
        return this._deferred.promise;
    };
    ShortLivedDeferred.prototype.resolve = function (response) {
        if (this._deferred) {
            clearTimeout(this._timeoutId);
            this._deferred.resolve(response);
            this._deferred = undefined;
        }
    };
    ShortLivedDeferred.prototype.reject = function (error) {
        if (this._deferred) {
            clearTimeout(this._timeoutId);
            this._deferred.reject(error);
            this._deferred = undefined;
        }
    };
    return ShortLivedDeferred;
}());
exports.ShortLivedDeferred = ShortLivedDeferred;


/***/ }),

/***/ "../api-shared-js/lib/src/ApiShared/VersionNumber.js":
/*!***********************************************************!*\
  !*** ../api-shared-js/lib/src/ApiShared/VersionNumber.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
var TableauError_1 = __webpack_require__(/*! ./TableauError */ "../api-shared-js/lib/src/ApiShared/TableauError.js");
/**
 * Represents the current version of the extensions, embedding
 * and extensions-api-types library
 */
var VersionNumber = /** @class */ (function () {
    // private constructor so everyone uses the singleton instance
    // build numbers have this form: M.m.f-pre.N
    function VersionNumber(versionString, isAlpha) {
        var partStr = versionString.split('-');
        this.build = this.getBuildNumber(partStr[1]);
        versionString = partStr[0];
        var parts = versionString.split('.').map(function (p) { return parseInt(p, 10); });
        if (parts.length !== 3) {
            throw new TableauError_1.TableauError(api_external_contract_js_1.ErrorCodes.InternalError, "Invalid version number: " + versionString);
        }
        this.major = parts[0];
        this.minor = parts[1];
        this.fix = parts[2];
        this.isAlpha = isAlpha;
    }
    VersionNumber.prototype.getBuildNumber = function (preReleaseString) {
        var noBuildNumber = -1;
        if (!preReleaseString) {
            return noBuildNumber;
        }
        // The preRelease string has this form: pre.N, but we don't depend on the actual string being 'pre'
        var partStr = preReleaseString.split('.');
        return partStr[1] ? parseInt(partStr[1], 10) : noBuildNumber;
    };
    Object.defineProperty(VersionNumber.prototype, "formattedValue", {
        get: function () {
            return this.major + "." + this.minor + "." + this.fix;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VersionNumber.prototype, "fullFormattedValue", {
        get: function () {
            return this.major + "." + this.minor + "." + this.fix + "-pre." + this.build;
        },
        enumerable: true,
        configurable: true
    });
    return VersionNumber;
}());
exports.VersionNumber = VersionNumber;


/***/ }),

/***/ "../api-shared-js/lib/src/VersionedExternalApiDispatcher.js":
/*!******************************************************************!*\
  !*** ../api-shared-js/lib/src/VersionedExternalApiDispatcher.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
var api_internal_contract_js_1 = __webpack_require__(/*! @tableau/api-internal-contract-js */ "../api-internal-contract-js/lib/src/JsApiInternalContract.js");
/**
 * Implementation of the InternalApiDispatcher which supports upgrading and downgrading the input
 * internal contract to the version that this module is built against
 *
 * @class VersionedExternalApiDispatcher
 * @implements {InternalApiDispatcher}
 */
var VersionedExternalApiDispatcher = /** @class */ (function () {
    /**
     * Creates a new instance of the VersionedExternalApiDispatcher
     * We have multiple version converting dispatchers that work together.
     * If needed, the VersionedExternalApiDispatcher wraps either the InternalApiDispatcher (desktop)
     * or the CrossFrameDispatcher (server).
     * The Internal/CrossFrame dispatchers handle an updated platform with an older external library.
     * (The CrossFrameDispatcher sends messages across the frame, and it is handled by the PresLayerHandler.)
     * Meanwhile, the VersionedExternalApiDispatcher handles an updated external library with an older platform.

     * @param _apiDelegateDispatcher The delegate that does the actual work.
     * @param platformVersionNumber The version of the internal contract which the platform module is using.
     * This number will be used to figure out how to downgrade incoming commands and upgrade the results
     */
    function VersionedExternalApiDispatcher(_apiDelegateDispatcher, platformVersionNumber) {
        var _this = this;
        this._apiDelegateDispatcher = _apiDelegateDispatcher;
        this._versionConverter = api_internal_contract_js_1.CreateExternalCompatibleVersionConverter(api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION, platformVersionNumber);
        this._notificationHandlers = [];
        _apiDelegateDispatcher.registerNotificationHandler(function (notification) {
            if (_this._notificationHandlers.length === 0) {
                return;
            }
            var upgradedNotification = _this._versionConverter.upgradeNotification(notification);
            _this._notificationHandlers.forEach(function (handler) {
                handler(upgradedNotification);
            });
        });
    }
    VersionedExternalApiDispatcher.needsVersionConverter = function (platformVersion) {
        // If our platform is less than external library version, then we need a converter
        return api_internal_contract_js_1.VersionLessThan(platformVersion, api_internal_contract_js_1.INTERNAL_CONTRACT_VERSION);
    };
    VersionedExternalApiDispatcher.prototype.execute = function (verb, parameters) {
        var _this = this;
        try {
            var downgradeParameters = this._versionConverter.downgradeExecuteCall(verb, parameters);
            return this._apiDelegateDispatcher.execute(downgradeParameters.verb, downgradeParameters.parameters).then(function (response) {
                var upgradeResponse = _this._versionConverter.upgradeExecuteReturn(response, verb, parameters);
                return upgradeResponse;
            });
        }
        catch (e) {
            return Promise.reject(e);
        }
    };
    VersionedExternalApiDispatcher.prototype.registerNotificationHandler = function (handler) {
        this._notificationHandlers.push(handler);
    };
    VersionedExternalApiDispatcher.prototype.unregisterNotificationHandler = function (handler) {
        this._notificationHandlers = this._notificationHandlers.filter(function (h) { return h !== handler; });
    };
    return VersionedExternalApiDispatcher;
}());
exports.VersionedExternalApiDispatcher = VersionedExternalApiDispatcher;


/***/ }),

/***/ "../api-internal-contract-js/lib/internal-contract-version.json":
/*!**********************************************************************!*\
  !*** ../api-internal-contract-js/lib/internal-contract-version.json ***!
  \**********************************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"major":1,"minor":131,"fix":0}');

/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/
/******/ // The require function
/******/ function __webpack_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/
/******/ 	// Execute the module function
/******/ 	__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/
/************************************************************************/
/******/ /* webpack/runtime/global */
/******/ (() => {
/******/ 	__webpack_require__.g = (function() {
/******/ 		if (typeof globalThis === 'object') return globalThis;
/******/ 		try {
/******/ 			return this || new Function('return this')();
/******/ 		} catch (e) {
/******/ 			if (typeof window === 'object') return window;
/******/ 		}
/******/ 	})();
/******/ })();
/******/
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!*********************************!*\
  !*** ./lib/src/EmbeddingApi.js ***!
  \*********************************/

/**
 * This is your main. This is where you re-export everything you want to be publicly available.
 *
 * The build enforces that the file has the same name as the global variable that is exported.
 */
Object.defineProperty(exports, "__esModule", ({ value: true }));
const api_external_contract_js_1 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
const api_shared_js_1 = __webpack_require__(/*! @tableau/api-shared-js */ "../api-shared-js/lib/src/ApiShared.js");
const TableauAskData_1 = __webpack_require__(/*! ./EmbeddingApi/Components/TableauAskData */ "./lib/src/EmbeddingApi/Components/TableauAskData.js");
const TableauAuthoringViz_1 = __webpack_require__(/*! ./EmbeddingApi/Components/TableauAuthoringViz */ "./lib/src/EmbeddingApi/Components/TableauAuthoringViz.js");
const TableauViz_1 = __webpack_require__(/*! ./EmbeddingApi/Components/TableauViz */ "./lib/src/EmbeddingApi/Components/TableauViz.js");
const isAlpha = typeof VERSION_IS_ALPHA !== 'undefined' ? VERSION_IS_ALPHA : false;
api_shared_js_1.ApiVersion.SetVersionNumber( true ? "3.6.0-pre.19" : 0, isAlpha);
window.customElements.define('tableau-viz', TableauViz_1.TableauViz);
window.customElements.define('tableau-authoring-viz', TableauAuthoringViz_1.TableauAuthoringViz);
window.customElements.define('tableau-ask-data', TableauAskData_1.TableauAskData);
const ErrorCodes = Object.assign(Object.assign({}, api_external_contract_js_1.EmbeddingErrorCodes), api_external_contract_js_1.SharedErrorCodes);
exports.ErrorCodes = ErrorCodes;
// Export Enums & Interfaces
var api_external_contract_js_2 = __webpack_require__(/*! @tableau/api-external-contract-js */ "../api-external-contract-js/lib/src/ExternalContract.js");
exports.AnalyticsObjectType = api_external_contract_js_2.AnalyticsObjectType;
exports.AnnotationType = api_external_contract_js_2.AnnotationType;
exports.ApiMenuType = api_external_contract_js_2.ApiMenuType;
exports.ClassNameKey = api_external_contract_js_2.ClassNameKey;
exports.ColumnType = api_external_contract_js_2.ColumnType;
exports.CrosstabFileFormat = api_external_contract_js_2.CrosstabFileFormat;
exports.DashboardLayoutChange = api_external_contract_js_2.DashboardLayoutChange;
exports.DashboardObjectType = api_external_contract_js_2.DashboardObjectType;
exports.DataType = api_external_contract_js_2.DataType;
exports.DateRangeType = api_external_contract_js_2.DateRangeType;
exports.DeviceType = api_external_contract_js_2.DeviceType;
exports.TableauEventType = api_external_contract_js_2.EmbeddingTableauEventType;
exports.EncodingType = api_external_contract_js_2.EncodingType;
exports.FieldAggregationType = api_external_contract_js_2.FieldAggregationType;
exports.FieldRoleType = api_external_contract_js_2.FieldRoleType;
exports.FilterDomainType = api_external_contract_js_2.FilterDomainType;
exports.FilterNullOption = api_external_contract_js_2.FilterNullOption;
exports.FilterType = api_external_contract_js_2.FilterType;
exports.FilterUpdateType = api_external_contract_js_2.FilterUpdateType;
exports.HierarchicalLevelSelectionState = api_external_contract_js_2.HierarchicalLevelSelectionState;
exports.IncludeDataValuesOption = api_external_contract_js_2.IncludeDataValuesOption;
exports.MarkType = api_external_contract_js_2.MarkType;
exports.ParameterValueType = api_external_contract_js_2.ParameterValueType;
exports.PeriodType = api_external_contract_js_2.PeriodType;
exports.PrintOrientation = api_external_contract_js_2.PrintOrientation;
exports.PrintPageSize = api_external_contract_js_2.PrintPageSize;
exports.PrintScaling = api_external_contract_js_2.PrintScaling;
exports.QuickTableCalcType = api_external_contract_js_2.QuickTableCalcType;
exports.SelectionUpdateType = api_external_contract_js_2.SelectionUpdateType;
exports.SheetSizeBehavior = api_external_contract_js_2.SheetSizeBehavior;
exports.SheetType = api_external_contract_js_2.SheetType;
exports.SortDirection = api_external_contract_js_2.SortDirection;
exports.TableauDialogType = api_external_contract_js_2.TableauDialogType;
exports.Toolbar = api_external_contract_js_2.Toolbar;
exports.TrendLineModelType = api_external_contract_js_2.TrendLineModelType;
var TableauAskData_2 = __webpack_require__(/*! ./EmbeddingApi/Components/TableauAskData */ "./lib/src/EmbeddingApi/Components/TableauAskData.js");
exports.TableauAskData = TableauAskData_2.TableauAskData;
var TableauAuthoringViz_2 = __webpack_require__(/*! ./EmbeddingApi/Components/TableauAuthoringViz */ "./lib/src/EmbeddingApi/Components/TableauAuthoringViz.js");
exports.TableauAuthoringViz = TableauAuthoringViz_2.TableauAuthoringViz;
var TableauViz_2 = __webpack_require__(/*! ./EmbeddingApi/Components/TableauViz */ "./lib/src/EmbeddingApi/Components/TableauViz.js");
exports.TableauViz = TableauViz_2.TableauViz;

})();

var __webpack_exports__AnalyticsObjectType = __webpack_exports__.AnalyticsObjectType;
var __webpack_exports__AnnotationType = __webpack_exports__.AnnotationType;
var __webpack_exports__ApiMenuType = __webpack_exports__.ApiMenuType;
var __webpack_exports__ClassNameKey = __webpack_exports__.ClassNameKey;
var __webpack_exports__ColumnType = __webpack_exports__.ColumnType;
var __webpack_exports__CrosstabFileFormat = __webpack_exports__.CrosstabFileFormat;
var __webpack_exports__DashboardLayoutChange = __webpack_exports__.DashboardLayoutChange;
var __webpack_exports__DashboardObjectType = __webpack_exports__.DashboardObjectType;
var __webpack_exports__DataType = __webpack_exports__.DataType;
var __webpack_exports__DateRangeType = __webpack_exports__.DateRangeType;
var __webpack_exports__DeviceType = __webpack_exports__.DeviceType;
var __webpack_exports__EncodingType = __webpack_exports__.EncodingType;
var __webpack_exports__ErrorCodes = __webpack_exports__.ErrorCodes;
var __webpack_exports__FieldAggregationType = __webpack_exports__.FieldAggregationType;
var __webpack_exports__FieldRoleType = __webpack_exports__.FieldRoleType;
var __webpack_exports__FilterDomainType = __webpack_exports__.FilterDomainType;
var __webpack_exports__FilterNullOption = __webpack_exports__.FilterNullOption;
var __webpack_exports__FilterType = __webpack_exports__.FilterType;
var __webpack_exports__FilterUpdateType = __webpack_exports__.FilterUpdateType;
var __webpack_exports__HierarchicalLevelSelectionState = __webpack_exports__.HierarchicalLevelSelectionState;
var __webpack_exports__IncludeDataValuesOption = __webpack_exports__.IncludeDataValuesOption;
var __webpack_exports__MarkType = __webpack_exports__.MarkType;
var __webpack_exports__ParameterValueType = __webpack_exports__.ParameterValueType;
var __webpack_exports__PeriodType = __webpack_exports__.PeriodType;
var __webpack_exports__PrintOrientation = __webpack_exports__.PrintOrientation;
var __webpack_exports__PrintPageSize = __webpack_exports__.PrintPageSize;
var __webpack_exports__PrintScaling = __webpack_exports__.PrintScaling;
var __webpack_exports__QuickTableCalcType = __webpack_exports__.QuickTableCalcType;
var __webpack_exports__SelectionUpdateType = __webpack_exports__.SelectionUpdateType;
var __webpack_exports__SheetSizeBehavior = __webpack_exports__.SheetSizeBehavior;
var __webpack_exports__SheetType = __webpack_exports__.SheetType;
var __webpack_exports__SortDirection = __webpack_exports__.SortDirection;
var __webpack_exports__TableauAskData = __webpack_exports__.TableauAskData;
var __webpack_exports__TableauAuthoringViz = __webpack_exports__.TableauAuthoringViz;
var __webpack_exports__TableauDialogType = __webpack_exports__.TableauDialogType;
var __webpack_exports__TableauEventType = __webpack_exports__.TableauEventType;
var __webpack_exports__TableauViz = __webpack_exports__.TableauViz;
var __webpack_exports__Toolbar = __webpack_exports__.Toolbar;
var __webpack_exports__TrendLineModelType = __webpack_exports__.TrendLineModelType;
var __webpack_exports___esModule = __webpack_exports__.__esModule;
export { __webpack_exports__AnalyticsObjectType as AnalyticsObjectType, __webpack_exports__AnnotationType as AnnotationType, __webpack_exports__ApiMenuType as ApiMenuType, __webpack_exports__ClassNameKey as ClassNameKey, __webpack_exports__ColumnType as ColumnType, __webpack_exports__CrosstabFileFormat as CrosstabFileFormat, __webpack_exports__DashboardLayoutChange as DashboardLayoutChange, __webpack_exports__DashboardObjectType as DashboardObjectType, __webpack_exports__DataType as DataType, __webpack_exports__DateRangeType as DateRangeType, __webpack_exports__DeviceType as DeviceType, __webpack_exports__EncodingType as EncodingType, __webpack_exports__ErrorCodes as ErrorCodes, __webpack_exports__FieldAggregationType as FieldAggregationType, __webpack_exports__FieldRoleType as FieldRoleType, __webpack_exports__FilterDomainType as FilterDomainType, __webpack_exports__FilterNullOption as FilterNullOption, __webpack_exports__FilterType as FilterType, __webpack_exports__FilterUpdateType as FilterUpdateType, __webpack_exports__HierarchicalLevelSelectionState as HierarchicalLevelSelectionState, __webpack_exports__IncludeDataValuesOption as IncludeDataValuesOption, __webpack_exports__MarkType as MarkType, __webpack_exports__ParameterValueType as ParameterValueType, __webpack_exports__PeriodType as PeriodType, __webpack_exports__PrintOrientation as PrintOrientation, __webpack_exports__PrintPageSize as PrintPageSize, __webpack_exports__PrintScaling as PrintScaling, __webpack_exports__QuickTableCalcType as QuickTableCalcType, __webpack_exports__SelectionUpdateType as SelectionUpdateType, __webpack_exports__SheetSizeBehavior as SheetSizeBehavior, __webpack_exports__SheetType as SheetType, __webpack_exports__SortDirection as SortDirection, __webpack_exports__TableauAskData as TableauAskData, __webpack_exports__TableauAuthoringViz as TableauAuthoringViz, __webpack_exports__TableauDialogType as TableauDialogType, __webpack_exports__TableauEventType as TableauEventType, __webpack_exports__TableauViz as TableauViz, __webpack_exports__Toolbar as Toolbar, __webpack_exports__TrendLineModelType as TrendLineModelType, __webpack_exports___esModule as __esModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,